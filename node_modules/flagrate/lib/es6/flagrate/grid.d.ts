import { Attribute, Property, InsertPosition, FHTMLDivElement, FHTMLTableDataCellElement, FHTMLTableRowElement, FHTMLTableHeaderCellElement } from "./element";
import { ItemOption as MenuItemOption } from "./menu";
import { Checkbox } from "./checkbox";
import { ContextMenu } from "./context-menu";
export interface Option {
    /** `id` attribute of container. */
    id?: string;
    className?: string;
    attribute?: Attribute;
    style?: Property;
    cols?: ColOption[];
    rows?: RowOption[];
    /** default is `16`. */
    colMinWidth?: number;
    /** default is `false`. */
    pagination?: boolean;
    /** default is `20`. */
    numberOfRowsPerPage?: number;
    /** default is `false`. */
    fill?: boolean;
    /** default is `false`. */
    headless?: boolean;
    /** default is `false`. */
    multiSelect?: boolean;
    /** default is `false`. */
    disableCheckbox?: boolean;
    /** default is `false`. */
    disableSelect?: boolean;
    /** default is `false`. */
    disableSort?: boolean;
    /** default is `false`. */
    disableResize?: boolean;
    onSelect?(event?: Event, row?: Row, grid?: Grid): void;
    onDeselect?(event?: Event, row?: Row, grid?: Grid): void;
    onClick?(event?: MouseEvent, row?: Row, grid?: Grid): void;
    onDblClick?(event?: MouseEvent, row?: Row, grid?: Grid): void;
    onRender?(grid?: Grid): boolean;
    onRendered?(grid?: Grid): void;
    postProcessOfRow?(tr?: FHTMLTableRowElement, row?: Row, grid?: Grid): void;
}
export interface Col extends ColOption {
    readonly isSorted?: boolean;
    readonly isAsc?: boolean;
    _id?: string;
    _th?: FHTMLTableHeaderCellElement;
    _div?: FHTMLDivElement;
    _resizeHandle?: FHTMLDivElement;
}
export interface ColOption {
    /** `id` attribute of `th` */
    id?: string;
    className?: string;
    attribute?: Attribute;
    style?: Property;
    key: string;
    label?: string;
    icon?: string;
    align?: TextAlign;
    width?: number;
    minWidth?: number;
    /** default is `false`. */
    disableSort?: boolean;
    /** default is `false`. */
    disableResize?: boolean;
}
export interface Row extends RowOption {
    cell?: {
        [colKey: string]: string | number | Cell;
    };
    readonly tr?: FHTMLTableRowElement;
    _grid?: Grid;
    _tr?: FHTMLTableRowElement;
    _checkbox?: Checkbox;
    _last?: FHTMLTableDataCellElement;
    _menu?: ContextMenu;
}
export interface RowOption {
    /** `id` attribute of `tr` */
    id?: string;
    className?: string;
    attribute?: Attribute;
    style?: Property;
    cell?: {
        [colKey: string]: string | number | CellOption;
    };
    menuItems?: MenuItemOption[];
    isSelected?: boolean;
    onSelect?(event?: Event, row?: Row, grid?: Grid): void;
    onDeselect?(event?: Event, row?: Row, grid?: Grid): void;
    onClick?(event?: MouseEvent, row?: Row, grid?: Grid): void;
    onDblClick?(event?: MouseEvent, row?: Row, grid?: Grid): void;
    postProcess?(tr?: FHTMLTableRowElement, row?: Row, grid?: Grid): void;
    /** value of row. this will disables cell's value. */
    value?: any;
}
export interface Cell extends CellOption {
    readonly td?: FHTMLTableDataCellElement;
    readonly div?: FHTMLDivElement;
    _td?: FHTMLTableDataCellElement;
    _div?: FHTMLDivElement;
}
export interface CellOption {
    /** `id` attribute of `td` */
    id?: string;
    className?: string;
    attribute?: Attribute;
    style?: Property;
    text?: string | number;
    html?: string;
    element?: HTMLElement;
    icon?: string;
    sortAlt?: number | string;
    onClick?(event?: MouseEvent, cell?: Cell, grid?: Grid): void;
    onDblClick?(event?: MouseEvent, cell?: Cell, grid?: Grid): void;
    postProcess?(td?: FHTMLTableDataCellElement, cell?: Cell, grid?: Grid): void;
    /** value of cell. */
    value?: any;
}
export declare type TextAlign = "left" | "center" | "right";
export declare class Grid {
    private _opt;
    private _cols;
    private _rows;
    private _pagePosition;
    onSelect: (event?: Event, row?: Row, grid?: Grid) => void;
    onDeselect: (event?: Event, row?: Row, grid?: Grid) => void;
    onClick: (event?: MouseEvent, row?: Row, grid?: Grid) => void;
    onDblClick: (event?: MouseEvent, row?: Row, grid?: Grid) => void;
    onRender: (grid?: Grid) => boolean;
    onRendered: (grid?: Grid) => void;
    postProcessOfRow: (tr?: FHTMLTableRowElement, row?: Row, grid?: Grid) => void;
    private _selectedRows;
    private _sortedByKey;
    private _sortedByAsc;
    element: FHTMLDivElement;
    private _checkbox;
    private _pager;
    private _lastCol;
    private _head;
    private _thead;
    private _tr;
    private _body;
    private _tbody;
    private _style;
    static idCounter: number;
    private _id;
    private _renderTimer;
    private _layoutTimer;
    private _layoutInterval;
    private _layoutWidth;
    constructor(_opt?: Option);
    headless: boolean;
    fill: boolean;
    rows: Row[];
    readonly sortedByKey: string;
    readonly sortedByAsc: boolean;
    selectedRows: Row[];
    insertTo(element: HTMLElement, pos?: InsertPosition): this;
    on(eventType: string, listener: EventListener, useCapture?: boolean): this;
    off(eventType: string, listener?: EventListener, useCapture?: boolean): this;
    /** select row(s) */
    select(...row: (number | Row)[]): this;
    select(rows: (number | Row)[]): this;
    /** deselect row(s) */
    deselect(...row: (number | Row)[]): this;
    deselect(rows: (number | Row)[]): this;
    /** select all rows */
    selectAll(): this;
    /** deselect all rows */
    deselectAll(): this;
    /** get selected rows */
    getSelectedRows(): Row[];
    /** get values of selected rows */
    getValues(): any[];
    /** sort rows by key */
    sort(key: string, isAsc?: boolean): this;
    unshift(row: Row): number;
    unshift(rows: Row[]): number;
    push(row: Row): number;
    push(rows: Row[]): number;
    shift(count?: number): Row | Row[];
    pop(count?: number): Row | Row[];
    splice(index: number, howMany?: number, rows?: Row[]): Row[];
    splice(index: number, howMany?: number, row?: Row): Row[];
    indexOf(row: Row, fromIndex?: number): number;
    removeRow(row: Row): Row;
    removeRow(rows: Row[]): Row[];
    disable(): this;
    enable(): this;
    isEnabled(): boolean;
    private _create();
    private _layoutUpdater();
    private _requestUpdateLayout();
    private _requestRender();
    private _render();
    private _updateRowMenu(row, items);
    private _updatePositionOfResizeHandles();
    private _updateLayoutOfCols(surplus?);
    private _createOnScrollHandler();
    private _createBodyOnScrollHandler();
    private _createColOnClickHandler(col);
    private _createRowOnClickHandler(row);
    private _createRowOnDblClickHandler(row);
    private _createCellOnClickHandler(cell);
    private _createCellOnDblClickHandler(cell);
    private _createRowOnCheckHandler(row);
    private _createLastRowOnClickHandler(row);
    private _createResizeHandleOnMousedownHandler(col);
}
export declare function createGrid(a: any): Grid;
