/*
   Copyright 2016 Webnium

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
"use strict";
import { extendObject } from "./util";
const _cache = {};
const _insertionTranslation = {
    before(element, node) {
        element.parentNode.insertBefore(node, element);
    },
    top(element, node) {
        element.insertBefore(node, element.firstChild);
    },
    bottom(element, node) {
        element.appendChild(node);
    },
    after(element, node) {
        element.parentNode.insertBefore(node, element.nextSibling);
    }
};
/*?
    flagrate.createElement([tagName = "div", attribute])
    new flagrate.Element([tagName = "div", attribute])
    - tagName (String) - The name of the HTML element to create.
    - attribute (Attribute) - An optional group of attribute/value pairs to set on the element.

    Creates an HTML element with `tagName` as the tag name, optionally with the given attributes.

    #### Example

        // The old way:
        var a = document.createElement("a");
        a.setAttribute("class", "foo");
        a.setAttribute("href", "/foo.html");
        a.appendChild(document.createTextNode("Next page"));
        x.appendChild(a);

        // The new way:
        var a = flagrate.createElement("a", { "class": "foo", href: "/foo.html" })
                        .insertText("Next page")
                        .insertTo(x);
**/
function FElement(tagName = "div", attribute) {
    let node;
    if (_cache[tagName]) {
        node = _cache[tagName].cloneNode(false);
    }
    else if ((attribute && attribute.hasOwnProperty("type")) || tagName === "select") {
        node = document.createElement(tagName);
    }
    else {
        node = document.createElement(tagName);
        _cache[tagName] = node.cloneNode(false);
    }
    extendObject(node, this);
    return attribute ? node.writeAttribute(attribute) : node;
}
export const Element = FElement;
function _createElement(tagName, attribute) {
    return new Element(tagName, attribute);
}
export const createElement = _createElement;
Element.prototype = {
    isFlagrated: true
};
/*?
    flagrate.Element.visible(element) -> Boolean
    - element (Element) - instance of Element.

    Tells whether `element` is visible

    This method is similar to http://api.prototypejs.org/dom/Element/visible/
**/
Element.visible = (element) => {
    return element.style.display !== "none";
};
/*?
    flagrate.Element.exists(element) -> Boolean
    - element (Element) - instance of Element.

    Tells whether `element` is exists on document.
**/
Element.exists = (element) => {
    if (element.parentNode) {
        while ((element = element.parentNode) !== null) {
            if (element === document) {
                return true;
            }
        }
    }
    return false;
};
/*?
    flagrate.Element.toggle(element) -> Element
    - element (Element) - instance of Element.

    Toggles the visibility of `element`. Returns `element`.

    This method is similar to http://api.prototypejs.org/dom/Element/toggle/
**/
Element.toggle = (element) => {
    return Element[Element.visible(element) ? "hide" : "show"](element);
};
/*?
    flagrate.Element.hide(element) -> Element
    - element (Element) - instance of Element.

    Sets `display: none` on `element`. Returns `element`.

    This method is similar to http://api.prototypejs.org/dom/Element/hide/
**/
Element.hide = (element) => {
    element.style.display = "none";
    return element;
};
/*?
    flagrate.Element.show(element) -> Element
    - element (Element) - instance of Element.

    Removes `display: none` on `element`. Returns `element`.

    This method is similar to http://api.prototypejs.org/dom/Element/show/
**/
Element.show = (element) => {
    element.style.display = "";
    return element;
};
/*?
    flagrate.Element.remove(element) -> void
    - element (Element) - instance of Element.

    Completely removes `element` from the document and returns it.

    This method is similar to http://api.prototypejs.org/dom/Element/remove/
**/
Element.remove = (element) => {
    if (element.parentNode) {
        element.parentNode.removeChild(element);
    }
    return;
};
/*?
    flagrate.Element.update(element[, newContent]) -> Element
    - element (Element) - instance of Element.
    - newContent (String|Number|Element) - new content.

    Replaces _the content_ of `element` with the `newContent` argument and
    returns `element`.

    This method is similar to http://api.prototypejs.org/dom/Element/update/
**/
Element.update = (element, content) => {
    let i = element.childNodes.length;
    while (i--) {
        Element.remove(element.childNodes[i]);
    }
    if (!content) {
        return element;
    }
    if (Element.isElement(content) === true) {
        element.appendChild(content);
        return element;
    }
    if (typeof content !== "string") {
        content = content.toString(10);
    }
    element.innerHTML = content;
    return element;
};
/*?
    flagrate.Element.updateText(element[, newContent]) -> Element
    - element (Element) - instance of Element.
    - newContent (String|Number) - new text content.
**/
Element.updateText = (element, content) => {
    let i = element.childNodes.length;
    while (i--) {
        Element.remove(element.childNodes[i]);
    }
    if (content === undefined) {
        return element;
    }
    if (Element.isElement(content) === true && (content.toString !== void 0)) {
        return Element.updateText(element, content.toString());
    }
    if (typeof content !== "string") {
        content = content.toString(10);
    }
    element.appendChild(document.createTextNode(content));
    return element;
};
/*?
    flagrate.Element.insert(element, content) -> Element
    - element (Element) - instance of Element.
    - content (String|Number|Element|Object) - The content to insert

    Inserts content `above`, `below`, at the `top`, and/or at the `bottom` of
    the given element, depending on the option(s) given.

    This method is similar to http://api.prototypejs.org/dom/Element/insert/
**/
Element.insert = (element, insertion) => {
    if (typeof insertion === "string" || typeof insertion === "number" || Element.isElement(insertion) === true) {
        insertion = { bottom: insertion };
    }
    let position, content, insert, div;
    for (position in insertion) {
        if (insertion.hasOwnProperty(position)) {
            content = insertion[position];
            position = position.toLowerCase();
            insert = _insertionTranslation[position];
            if (Element.isElement(content) === true) {
                insert(element, content);
                continue;
            }
            if (typeof content !== "string") {
                content = content.toString(10);
            }
            div = new Element();
            div.innerHTML = content;
            if (position === "top" || position === "after") {
                [...div.childNodes].reverse();
            }
            while (div.childNodes.length !== 0) {
                insert(element, div.childNodes[0]);
            }
        }
    }
    return element;
};
/*?
    flagrate.Element.insertText(element, content) -> Element
    - element (Element) - instance of Element.
    - content (String|Number|Object) - The content to insert

    Inserts content `above`, `below`, at the `top`, and/or at the `bottom` of
    the given element, depending on the option(s) given.
**/
Element.insertText = (element, insertion) => {
    if (typeof insertion === "string" || typeof insertion === "number") {
        insertion = { bottom: insertion };
    }
    let position, content, insert;
    for (position in insertion) {
        if (insertion.hasOwnProperty(position)) {
            content = insertion[position];
            position = position.toLowerCase();
            insert = _insertionTranslation[position];
            if (typeof content !== "string") {
                content = content.toString(10);
            }
            insert(element, document.createTextNode(content));
        }
    }
    return element;
};
/*?
    flagrate.Element.insertTo(element, to[, position = "bottom"]) -> Element
    - element (Element) - insert this.
    - to (Element) - insert to this element.
    - position (String) - `before` or `top` or `bottom` or `after`.
**/
Element.insertTo = (element, to, position = "bottom") => {
    var insertion = {};
    if (position) {
        insertion[position] = element;
    }
    else {
        insertion["bottom"] = element;
    }
    Element.insert(to, insertion);
    return element;
};
/*?
    flagrate.Element.readAttribute(element, attributeName) -> String | null
    - element (Element) - instance of Element.
    - attributeName (String) - attribute name.

    Returns the value of `element`'s `attribute` or `null` if `attribute` has
    not been specified.

    This method is similar to http://api.prototypejs.org/dom/Element/readAttribute/
**/
Element.readAttribute = (element, name) => {
    // ref: https://github.com/sstephenson/prototype/blob/1fb9728/src/dom/dom.js#L1856
    return element.getAttribute(name);
};
/*?
    flagrate.Element.writeAttribute(element, attribute[, value = true]) -> Element
    - element (Element) - instance of Element.
    - attribute (String|Object) - attribute name or name/value pairs object.
    - value (Boolean|String) - value of attribute.

    Adds, specifies or removes attributes passed as either a hash or a name/value pair.

    This method is similar to http://api.prototypejs.org/dom/Element/writeAttribute/
**/
Element.writeAttribute = (element, name, value) => {
    let attr;
    if (typeof name === "object") {
        attr = name;
    }
    else {
        attr = {};
        attr[name] = (value === undefined) ? true : value;
    }
    let k;
    for (k in attr) {
        if (attr.hasOwnProperty(k) === true) {
            value = attr[k];
            if (value === false || value === null) {
                element.removeAttribute(k);
            }
            else if (value === true) {
                element.setAttribute(k, k);
            }
            else if (value !== undefined) {
                element.setAttribute(k, value);
            }
        }
    }
    return element;
};
/*?
    flagrate.Element.getDimensions(element) -> Object
    - element (Element) - instance of Element.

    Finds the computed width and height of `element` and returns them as
    key/value pairs of an object.

    This method is similar to http://api.prototypejs.org/dom/Element/getDimensions/
**/
Element.getDimensions = (element) => {
    const display = Element.getStyle(element, "display");
    if (display && display !== "none") {
        return {
            width: element.offsetWidth,
            height: element.offsetHeight
        };
    }
    const before = {
        visibility: element.style.visibility,
        position: element.style.position,
        display: element.style.display
    };
    const after = {
        visibility: "hidden",
        display: "block"
    };
    // Switching `fixed` to `absolute` causes issues in Safari.
    if (before.position !== "fixed") {
        after.position = "absolute";
    }
    Element.setStyle(element, after);
    const dimensions = {
        width: element.offsetWidth,
        height: element.offsetHeight
    };
    Element.setStyle(element, before);
    return dimensions;
};
/*?
    flagrate.Element.getHeight(element) -> Number
    - element (Element) - instance of Element.

    This method is similar to http://api.prototypejs.org/dom/Element/getHeight/
**/
Element.getHeight = (element) => {
    return Element.getDimensions(element).height;
};
/*?
    flagrate.Element.getWidth(element) -> Number
    - element (Element) - instance of Element.

    This method is similar to http://api.prototypejs.org/dom/Element/getWidth/
**/
Element.getWidth = (element) => {
    return Element.getDimensions(element).width;
};
/*?
    flagrate.Element.cumulativeOffset(element) -> Object
    - element (Element) - instance of Element.

    This method is similar to http://api.prototypejs.org/dom/Element/cumulativeOffset/
**/
Element.cumulativeOffset = (element) => {
    let t = 0, l = 0;
    if (element.parentNode) {
        do {
            t += element.offsetTop || 0;
            l += element.offsetLeft || 0;
            element = element.offsetParent;
        } while (element);
    }
    return {
        top: t,
        left: l
    };
};
/*?
    flagrate.Element.cumulativeScrollOffset(element) -> Object
    - element (Element) - instance of Element.

    This method is similar to http://api.prototypejs.org/dom/Element/cumulativeScrollOffset/
**/
Element.cumulativeScrollOffset = (element) => {
    let t = 0, l = 0;
    do {
        t += element.scrollTop || 0;
        l += element.scrollLeft || 0;
        // for Chrome
        if (element.parentNode === document.body && document.documentElement.scrollTop !== 0) {
            element = document.documentElement;
        }
        else {
            element = element.parentNode;
        }
    } while (element);
    return {
        top: t,
        left: l
    };
};
/*?
    Flagrate.Element.hasClassName(element, className) -> Boolean
    - element (Element) - instance of Element.
    - className (String) -

    This method is similar to http://api.prototypejs.org/dom/Element/hasClassName/
**/
Element.hasClassName = (element, className) => {
    return (element.className.length > 0 && (element.className === className || new RegExp("(^|\\s)" + className + "(\\s|$)").test(element.className)));
};
/*?
    flagrate.Element.addClassName(element, className) -> Element
    - element (Element) - instance of Element.
    - className (String) - The class name to add.

    This method is similar to http://api.prototypejs.org/dom/Element/addClassName/
**/
Element.addClassName = (element, className) => {
    if (!Element.hasClassName(element, className)) {
        element.className += (element.className ? " " : "") + className;
    }
    return element;
};
/*?
    flagrate.Element.removeClassName(element, className) -> Element
    - element (Element) - instance of Element.
    - className (String) -

    This method is similar to http://api.prototypejs.org/dom/Element/removeClassName/
**/
Element.removeClassName = (element, className) => {
    element.className = element.className.replace(new RegExp("(^|\\s+)" + className + "(\\s+|$)"), " ").trim();
    return element;
};
/*?
    flagrate.Element.toggleClassName(element, className) -> Element
    - element (Element) - instance of Element.
    - className (String) -

    This method is similar to http://api.prototypejs.org/dom/Element/toggleClassName/
**/
Element.toggleClassName = (element, className) => {
    return Element[Element.hasClassName(element, className) ? "removeClassName" : "addClassName"](element, className);
};
/*?
    flagrate.Element.getStyle(element, propertyName) -> String | Number | null
    - element (Element) - instance of Element.
    - propertyName (String) - The property name of style to be retrieved.

    This method is similar to http://api.prototypejs.org/dom/Element/getStyle/
**/
Element.getStyle = (element, style) => {
    style = style === "float" ? "cssFloat" : style.replace(/-+([a-z])?/g, (m, s) => {
        return s ? s.toUpperCase() : "";
    });
    let value = element.style[style];
    if (!value || value === "auto") {
        const css = document.defaultView.getComputedStyle(element, null);
        value = css && (css[style] !== void 0) && css[style] !== "" ? css[style] : null;
    }
    if (style === "opacity") {
        return value ? parseFloat(value) : 1.0;
    }
    return value === "auto" ? null : value;
};
/*?
    flagrate.Element.setStyle(element, style) -> Element
    - element (Element) - instance of Element.
    - style (Object) -

    This method is similar to http://api.prototypejs.org/dom/Element/setStyle/
**/
Element.setStyle = (element, style) => {
    let p;
    for (p in style) {
        if (style.hasOwnProperty(p)) {
            element.style[(p === "float" || p === "cssFloat") ? "cssFloat" : p] = style[p];
        }
    }
    return element;
};
/*?
    flagrate.Element.on(element, eventName, listener[, useCapture = false]) -> Element
    - element (Element) - instance of Element.
    - eventName (String) - name of event.
    - listener (Function) - The function to call when the event occurs.
    - useCapture (Boolean) -

    Registers an event handler on a DOM element.
**/
Element.on = (element, name, listener, useCapture) => {
    if (element._flagrateEvent === undefined) {
        element._flagrateEvent = {};
    }
    if (element._flagrateEvent[name] === undefined) {
        element._flagrateEvent[name] = [];
    }
    element._flagrateEvent[name].push({
        listener: listener,
        useCapture: useCapture
    });
    element.addEventListener(name, listener, useCapture || false);
    return element;
};
/*?
    flagrate.Element.off(element, eventName[, listener, useCapture = false]) -> Element
    - element (Element) - instance of Element.
    - eventName (String) - name of event.
    - listener (Function) - The function to call when the event occurs.
    - useCapture (Boolean) -

    Unregisters an event handler on a DOM element.
**/
Element.off = (element, name, listener, useCapture) => {
    if (listener) {
        element.removeEventListener(name, listener, useCapture || false);
        return;
    }
    if (element._flagrateEvent === undefined) {
        element._flagrateEvent = {};
    }
    if (element._flagrateEvent[name] === undefined) {
        element._flagrateEvent[name] = [];
    }
    element._flagrateEvent[name].forEach(fevent => {
        element.removeEventListener(name, fevent.listener, fevent.useCapture || false);
    });
    return element;
};
/*?
    flagrate.Element.fire(element, eventName[, property]) -> Element
    - element (Element) - instance of Element.
    - eventName (String) - name of event.
    - property (Object) -

    Fires a custom event.
**/
Element.fire = (element, name, property) => {
    const event = document.createEvent("HTMLEvents");
    event.initEvent(name, true, true);
    if (property) {
        extendObject(event, property);
    }
    element.dispatchEvent(event);
    return element;
};
/*?
    flagrate.Element.emit(element, eventName[, property]) -> Element
    Alias of: flagrate.Element.fire
**/
Element.emit = Element.fire;
//
// create instance methods
//
for (const name in Element) {
    if (!(name in Element.prototype)) {
        Element.prototype[name] = wrapper(name);
    }
}
function wrapper(name) {
    return function () {
        return Element[name](this, ...arguments);
    };
}
//
// extra class methods
//
/*?
    flagrate.Element.extend(element) -> flagrate.Element
    - element (Element) - instance of Element.

    Extends the given `element` instance.

    **Caution**: This method will add Flagrate.Element instance methods to given element instance.
**/
Element.extend = (element) => {
    if (element.isFlagrated) {
        return element;
    }
    extendObject(element, Element.prototype);
    return element;
};
/*?
    flagrate.Element.isElement(element) -> Boolean
    - element (Element) - instance of Element.
**/
if (typeof HTMLElement === "object") {
    Element.isElement = (object) => {
        return object instanceof HTMLElement;
    };
}
else {
    Element.isElement = (object) => {
        return !!(object && object.nodeType === 1 && typeof object.nodeName === "string");
    };
}

//# sourceMappingURL=element.js.map
