import { Attribute, Property, FHTMLDivElement } from "./element";
import { Pulldown } from "./pulldown";
import { Grid } from "./grid";
export interface Select extends Instance, FHTMLDivElement {
}
export interface Class {
    new (option?: Option): Select;
    prototype: Instance;
}
export interface Instance {
    select(index: number): this;
    deselect(index: number): this;
    selectAll(): this;
    deselectAll(): this;
    disable(): this;
    enable(): this;
    isEnabled(): boolean;
    getValue(): any;
    getValues(): any[];
    onChange?(event?: any, menu?: this): void;
    readonly listView?: boolean;
    readonly multiple?: boolean;
    readonly items?: ItemOption[];
    readonly max?: number;
    readonly selectedIndex?: number;
    readonly selectedIndexes?: number[];
    readonly isPulldown?: boolean;
    _pulldown?: Pulldown;
    _grid?: Grid;
}
export interface Option {
    /** id attribute. */
    id?: string;
    /** class attribute. */
    className?: string;
    /** attribute/value pairs properties. */
    attribute?: Attribute;
    /** CSS style properties (uses flagrate.Element.setStyle). */
    style?: Property;
    /** default is false. */
    listView?: boolean;
    /** default is false. */
    multiple?: boolean;
    /** default is -1 (unlimited). */
    max?: number;
    /** Array of any value or, SelectItemOption object. */
    items?: ItemOption[];
    selectedIndex?: number;
    selectedIndexes?: number[];
    /** default is false. */
    isDisabled?: boolean;
}
export declare type ItemOption = string | number | {
    /** if not specifies label, tries convert value to string for display label. */
    label?: string;
    labelHTML?: string;
    /** icon image URL. */
    icon?: string;
    /** value. */
    value: any;
};
export declare const Select: Class;
export declare function createSelect(option?: Option): Select;
