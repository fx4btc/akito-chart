/*
   Copyright 2016 Webnium

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
"use strict";
import { Element } from "./element";
import { Button } from "./button";
import { Checkbox } from "./checkbox";
import { Toolbar } from "./toolbar";
import { ContextMenu } from "./context-menu";
/*?
    flagrate.createGrid(option)
    new flagrate.Grid(option)
    - option (Object) - configuration for the grid.

    Create and initialize the grid.

    #### option

    * `id`                       (String): `id` attribute of container.
    * `className`                (String):
    * `attribute`                (Object):
    * `style`                    (Object): (using flagrate.Element.setStyle)
    * `cols`                     (Array): of col object.
    * `rows`                     (Array): of row object.
    * `pagination`               (Boolean; default `false`):
    * `numberOfRowsPerPage`      (Number; default `20`): pagination.
    * `fill`                     (Boolean; default `false`):
    * `headless`                 (Boolean; default `false`):
    * `multiSelect`              (Boolean; default `false`):
    * `disableCheckbox`          (Boolean; default `false`):
    * `disableSelect`            (Boolean; default `false`):
    * `disableSort`              (Boolean; default `false`):
    * `disableFilter`            (Boolean; default `false`):
    * `disableResize`            (Boolean; default `false`):
    * `onSelect`                 (Function):
    * `onDeselect`               (Function):
    * `onClick`                  (Function):
    * `onDblClick`               (Function):
    * `onRender`                 (Function):
    * `onRendered`               (Function):
    * `postProcessOfRow`         (Function):

    #### col

    * `id`                       (String): `id` attribute of `th`
    * `className`                (String):
    * `attribute`                (Object):
    * `style`                    (Object): styling of `th` (using flagrate.Element.setStyle)
    * `key`                      (String; required):
    * `label`                    (String; default `""`):
    * `icon`                     (String):
    * `align`                    (String):
    * `width`                    (Number):
    * `disableSort`              (Boolean; default `false`):
    * `disableResize`            (Boolean; default `false`):

    #### row

    * `id`                       (String): `id` attribute of `tr`
    * `className`                (String):
    * `attribute`                (Object):
    * `style`                    (Object): styling of `tr` (using flagrate.Element.setStyle)
    * `cell`                     (Object|String; default `{}`): of cell object. or String for text.
    * `menuItems`                (Array): of Menu items.
    * `isSelected`               (Boolean):
    * `onSelect`                 (Function):
    * `onDeselect`               (Function):
    * `onClick`                  (Function):
    * `onDblClick`               (Function):
    * `postProcess`              (Function):

    #### cell

    * `id`                       (String): `id` attribute of `td`
    * `className`                (String):
    * `attribute`                (Object):
    * `style`                    (Object): styling of `td` (using flagrate.Element.setStyle)
    * `text`                     (String):
    * `html`                     (String):
    * `element`                  (Element):
    * `icon`                     (String):
    * `sortAlt`                  (Number|String):
    * `onClick`                  (Function):
    * `onDblClick`               (Function):
    * `postProcess`              (Function):
**/
export class Grid {
    constructor(_opt = {}) {
        this._opt = _opt;
        this._cols = [];
        this._rows = [];
        this._pagePosition = 0;
        this._selectedRows = [];
        this._sortedByKey = null;
        this._sortedByAsc = null;
        this.element = new Element("div", { "class": "flagrate flagrate-grid" });
        this._head = new Element("div", { "class": "flagrate-grid-head" }).insertTo(this.element);
        this._thead = new Element("thead").insertTo(new Element("table").insertTo(this._head));
        this._tr = new Element("tr").insertTo(this._thead);
        this._body = new Element("div", { "class": "flagrate-grid-body" }).insertTo(this.element);
        this._tbody = new Element("tbody").insertTo(new Element("table").insertTo(this._body));
        this._style = new Element("style").insertTo(this.element);
        this._id = "flagrate-grid-" + (++Grid.idCounter).toString(10);
        if (_opt.id) {
            this.element.writeAttribute("id", _opt.id);
        }
        if (_opt.className) {
            this.element.addClassName(_opt.className);
        }
        if (_opt.attribute) {
            this.element.writeAttribute(_opt.attribute);
        }
        if (_opt.style) {
            this.element.setStyle(_opt.style);
        }
        if (_opt.cols) {
            this._cols = _opt.cols;
        }
        if (_opt.rows) {
            this._rows = _opt.rows;
        }
        if (_opt.colMinWidth === undefined) {
            _opt.colMinWidth = 16;
        }
        if (_opt.pagination === undefined) {
            _opt.pagination = false;
        }
        if (!_opt.numberOfRowsPerPage) {
            _opt.numberOfRowsPerPage = 20;
        }
        if (_opt.fill === undefined) {
            _opt.fill = false;
        }
        if (_opt.headless === true) {
            _opt.disableSort = true;
            _opt.disableResize = true;
            this.element.addClassName("flagrate-grid-headless");
        }
        if (_opt.multiSelect === undefined) {
            _opt.multiSelect = false;
        }
        if (_opt.disableCheckbox === undefined) {
            _opt.disableCheckbox = false;
        }
        if (_opt.disableSelect === undefined) {
            _opt.disableSelect = false;
        }
        if (_opt.disableSort === undefined) {
            _opt.disableSort = false;
        }
        /* if (_opt.disableFilter === undefined) {
            _opt.disableFilter = false;
        } */
        if (_opt.disableResize === undefined) {
            _opt.disableResize = false;
        }
        this.onSelect = _opt.onSelect;
        this.onDeselect = _opt.onDeselect;
        this.onClick = _opt.onClick;
        this.onDblClick = _opt.onDblClick;
        this.onRender = _opt.onRender;
        this.onRendered = _opt.onRendered;
        this.postProcessOfRow = _opt.postProcessOfRow;
        this._create()._requestRender();
    }
    get headless() {
        return this.element.hasClassName("flagrate-grid-headless");
    }
    set headless(enable) {
        if (enable) {
            this.element.addClassName("flagrate-grid-headless");
        }
        else {
            this.element.removeClassName("flagrate-grid-headless");
        }
    }
    get fill() {
        return this.element.hasClassName("flagrate-grid-fill");
    }
    set fill(enable) {
        if (enable) {
            this.element.addClassName("flagrate-grid-fill");
            this._body.onscroll = this._createBodyOnScrollHandler();
        }
        else {
            this.element.removeClassName("flagrate-grid-fill");
            this.element.onscroll = this._createOnScrollHandler();
        }
        this._requestRender();
    }
    get rows() {
        return this._rows;
    }
    set rows(rows) {
        this._rows = rows;
        this._requestRender();
    }
    get sortedByKey() {
        return this._sortedByKey;
    }
    get sortedByAsc() {
        return this._sortedByAsc;
    }
    get selectedRows() {
        return this.getSelectedRows();
    }
    set selectedRows(rows) {
        this.select(rows);
    }
    insertTo(element, pos) {
        return this.element.insertTo(element, pos) && this;
    }
    on(eventType, listener, useCapture) {
        return this.element.on(eventType, listener, useCapture) && this;
    }
    off(eventType, listener, useCapture) {
        return this.element.off(eventType, listener, useCapture) && this;
    }
    select(a) {
        let rows;
        if (Array.isArray(a) === true) {
            rows = a;
        }
        else {
            rows = [];
            for (let i = 0, l = arguments.length; i < l; i++) {
                rows.push(arguments[i]);
            }
        }
        if (this._opt.multiSelect === false) {
            this.deselectAll();
        }
        for (let i = 0, l = rows.length; i < l; i++) {
            let row = rows[i];
            if (typeof row === "number") {
                row = this._rows[row];
            }
            row.isSelected = true;
            if (row._tr && row._tr.hasClassName("flagrate-grid-row-selected") === true) {
                continue;
            }
            this._selectedRows.push(row);
            if (row._tr) {
                row._tr.addClassName("flagrate-grid-row-selected");
            }
            if (row._checkbox) {
                row._checkbox.check();
                setTimeout(() => {
                    if (row.isSelected === true) {
                        row._checkbox.check();
                    }
                }, 0);
            }
            if (row.onSelect) {
                row.onSelect.call(this, window.event, row, this);
            }
            if (this.onSelect) {
                this.onSelect(window.event, row, this);
            }
        }
        if (this._selectedRows.length !== 0 && this._checkbox) {
            this._checkbox.check();
        }
        this.element.fire("change", { targetGrid: this });
        return this;
    }
    deselect(a) {
        let rows;
        if (Array.isArray(a)) {
            rows = a;
        }
        else {
            rows = [];
            for (let i = 0, l = arguments.length; i < l; i++) {
                rows.push(arguments[i]);
            }
        }
        for (let i = 0, l = rows.length; i < l; i++) {
            let row = rows[i];
            if (typeof row === "number") {
                row = this._rows[row];
            }
            row.isSelected = false;
            if (row._tr && row._tr.hasClassName("flagrate-grid-row-selected") === false) {
                continue;
            }
            this._selectedRows.splice(this._selectedRows.indexOf(row), 1);
            if (row._tr) {
                row._tr.removeClassName("flagrate-grid-row-selected");
            }
            if (row._checkbox) {
                row._checkbox.uncheck();
                setTimeout(() => {
                    if (row.isSelected === false) {
                        row._checkbox.uncheck();
                    }
                }, 0);
            }
            if (row.onDeselect) {
                row.onDeselect.call(this, window.event, row, this);
            }
            if (this.onDeselect) {
                this.onDeselect(window.event, row, this);
            }
        }
        if (this._selectedRows.length === 0 && this._checkbox) {
            this._checkbox.uncheck();
        }
        this.element.fire("change", { targetGrid: this });
        return this;
    }
    /** select all rows */
    selectAll() {
        return this.select(this._rows);
    }
    /** deselect all rows */
    deselectAll() {
        return this.deselect(this._rows);
    }
    /** get selected rows */
    getSelectedRows() {
        return this._selectedRows;
    }
    /** get values of selected rows */
    getValues() {
        return this._selectedRows.map(row => getValue.call(row));
    }
    /** sort rows by key */
    sort(key, isAsc) {
        if (isAsc === undefined) {
            isAsc = true;
        }
        this._rows.sort((a, b) => {
            let A = 0;
            let B = 0;
            const cellA = a.cell[key];
            const cellB = b.cell[key];
            if (typeof cellA === "object") {
                A = (cellA.sortAlt !== undefined) ? cellA.sortAlt : cellA.text || cellA.html || (cellA.element && cellA.element.innerHTML) || (cellA._div && cellA._div.innerHTML) || 0;
            }
            else {
                A = cellA || 0;
            }
            if (typeof cellB === "object") {
                B = (cellB.sortAlt !== undefined) ? cellB.sortAlt : cellB.text || cellB.html || (cellB.element && cellB.element.innerHTML) || (cellB._div && cellB._div.innerHTML) || 0;
            }
            else {
                B = cellB || 0;
            }
            return A === B ? 0 : (A > B ? 1 : -1);
        });
        if (isAsc === false) {
            this._rows.reverse();
        }
        for (let i = 0, l = this._cols.length; i < l; i++) {
            if (this._cols[i].key === key) {
                if (isAsc) {
                    this._cols[i]._th.addClassName("flagrate-grid-col-sorted-asc");
                    this._cols[i]._th.removeClassName("flagrate-grid-col-sorted-desc");
                }
                else {
                    this._cols[i]._th.addClassName("flagrate-grid-col-sorted-desc");
                    this._cols[i]._th.removeClassName("flagrate-grid-col-sorted-asc");
                }
                this._cols[i].isSorted = true;
                this._cols[i].isAsc = isAsc;
                this._sortedByKey = key;
                this._sortedByAsc = isAsc;
            }
            else {
                if (this._cols[i].isSorted) {
                    this._cols[i]._th.removeClassName("flagrate-grid-col-sorted-asc").removeClassName("flagrate-grid-col-sorted-desc");
                }
                this._cols[i].isSorted = false;
                this._cols[i].isAsc = null;
            }
        }
        this._requestRender();
        return this;
    }
    unshift(r) {
        if (Array.isArray(r) === true) {
            for (let i = 0, l = r.length; i < l; i++) {
                this._rows.unshift(r[i]);
            }
        }
        else {
            this._rows.unshift(r);
        }
        if (this._sortedByKey === null) {
            this._requestRender();
        }
        else {
            this.sort(this._sortedByKey, this._sortedByAsc);
        }
        return this._rows.length;
    }
    push(r) {
        if (Array.isArray(r) === true) {
            for (let i = 0, l = r.length; i < l; i++) {
                this._rows.push(r[i]);
            }
        }
        else {
            this._rows.push(r);
        }
        if (this._sortedByKey === null) {
            this._requestRender();
        }
        else {
            this.sort(this._sortedByKey, this._sortedByAsc);
        }
        return this._rows.length;
    }
    shift(c) {
        const count = c || 1;
        const removes = [];
        for (let i = 0, l = this._rows.length; i < l && i < count; i++) {
            removes.push(this._rows.shift());
        }
        this._requestRender();
        return !c ? removes[0] : removes;
    }
    pop(c) {
        const count = c || 1;
        const removes = [];
        for (let i = 0, l = this._rows.length; i < l && i < count; i++) {
            removes.push(this._rows.pop());
        }
        this._requestRender();
        return !c ? removes[0] : removes;
    }
    splice(index, c, r) {
        c = typeof c === "undefined" ? this._rows.length - index : c;
        const removes = this._rows.splice(index, c);
        if (r) {
            if (r instanceof Array === false) {
                r = [r];
            }
            for (let i = 0, l = r.length; i < l; i++) {
                this._rows.splice(index + i, 0, r[i]);
            }
        }
        if (this._sortedByKey === null) {
            this._requestRender();
        }
        else {
            this.sort(this._sortedByKey, this._sortedByAsc);
        }
        return removes;
    }
    indexOf(row, fromIndex) {
        return this._rows.indexOf(row, fromIndex);
    }
    removeRow(r) {
        const removes = [];
        let bulk = true;
        if (r instanceof Array === false) {
            bulk = false;
            r = [r];
        }
        for (let i = 0, l = r.length; i < l; i++) {
            const index = this.indexOf(r[i]);
            if (index !== -1) {
                removes.push(this.splice(index, 1));
            }
        }
        return bulk ? removes : removes[0];
    }
    disable() {
        this.element.addClassName("flagrate-disabled");
        return this;
    }
    enable() {
        this.element.removeClassName("flagrate-disabled");
        return this;
    }
    isEnabled() {
        return !this.element.hasClassName("flagrate-disabled");
    }
    _create() {
        if (this._opt.disableCheckbox === false && this._opt.disableSelect === false && this._opt.multiSelect === true) {
            this._checkbox = new Checkbox({
                onCheck: this.selectAll.bind(this),
                onUncheck: this.deselectAll.bind(this)
            }).insertTo(new Element("th", { "class": "flagrate-grid-cell-checkbox" }).insertTo(this._tr));
        }
        for (let i = 0, l = this._cols.length; i < l; i++) {
            let col = this._cols[i];
            col._id = `${this._id}-col-${col.key}`;
            col._th = new Element("th").insertTo(this._tr);
            if (col.id) {
                col._th.writeAttribute("id", col.id);
            }
            if (col.className) {
                col._th.writeAttribute("class", col.className);
            }
            if (col.attribute) {
                col._th.writeAttribute(col.attribute);
            }
            if (col.style) {
                col._th.setStyle(col.style);
            }
            col._th.addClassName(col._id);
            const width = !!col.width ? (col.width.toString(10) + "px") : "auto";
            this._style.insertText(`.${col._id}{width:${width}}`);
            if (col.align) {
                col._th.style.textAlign = col.align;
            }
            col._div = new Element().insertTo(col._th);
            if (col.label) {
                col._div.updateText(col.label);
            }
            if (col.icon) {
                col._div.addClassName("flagrate-icon");
                col._div.setStyle({
                    backgroundImage: "url(" + col.icon + ")"
                });
            }
            if (this._opt.disableResize === false && !col.disableResize) {
                col._resizeHandle = new Element("div", {
                    "class": "flagrate-grid-col-resize-handle"
                }).insertTo(this.element);
                col._resizeHandle.onmousedown = this._createResizeHandleOnMousedownHandler(col);
            }
            if (this._opt.disableSort === false && !col.disableSort) {
                col._th.addClassName("flagrate-grid-col-sortable");
                col._th.onclick = this._createColOnClickHandler(col);
            }
        }
        this._lastCol = new Element("th", { "class": this._id + "-col-last" }).insertTo(this._tr);
        this._style.insertText("." + this._id + "-col-last:after{right:0}");
        // pagination (testing)
        if (this._opt.pagination) {
            this.element.addClassName("flagrate-grid-pagination");
            // pager container
            this._pager = new Toolbar({
                className: "flagrate-grid-pager",
                items: [
                    {
                        key: "rn",
                        element: new Element("span").insertText("-")
                    },
                    {
                        key: "first",
                        element: new Button({
                            className: "flagrate-grid-pager-first",
                            onSelect: () => {
                                this._pagePosition = 0;
                                this._requestRender();
                            }
                        })
                    },
                    {
                        key: "prev",
                        element: new Button({
                            className: "flagrate-grid-pager-prev",
                            onSelect: () => {
                                --this._pagePosition;
                                this._requestRender();
                            }
                        })
                    },
                    {
                        key: "num",
                        element: new Element("span", { "class": "flagrate-grid-pager-num" }).insertText("-")
                    },
                    {
                        key: "next",
                        element: new Button({
                            className: "flagrate-grid-pager-next",
                            onSelect: () => {
                                ++this._pagePosition;
                                this._requestRender();
                            }
                        })
                    },
                    {
                        key: "last",
                        element: new Button({
                            className: "flagrate-grid-pager-last",
                            onSelect: () => {
                                this._pagePosition = Math.floor(this._rows.length / this._opt.numberOfRowsPerPage);
                                this._requestRender();
                            }
                        })
                    }
                ]
            }).insertTo(this.element);
        }
        if (this._opt.fill) {
            this.element.addClassName("flagrate-grid-fill");
            this._body.onscroll = this._createBodyOnScrollHandler();
        }
        else {
            this.element.onscroll = this._createOnScrollHandler();
        }
        if (this._opt.disableResize === false) {
            this._layoutUpdater();
        }
        return this;
    }
    _layoutUpdater() {
        if (this._layoutInterval) {
            clearInterval(this._layoutInterval);
        }
        this._layoutInterval = setInterval(() => {
            if (this.element.exists() === false) {
                clearInterval(this._layoutInterval);
                return;
            }
            this._requestUpdateLayout();
        }, 1000);
    }
    _requestUpdateLayout() {
        if (this._layoutWidth === this.element.clientWidth) {
            return;
        }
        if (this._layoutTimer) {
            clearTimeout(this._layoutTimer);
        }
        this._layoutTimer = setTimeout(() => {
            this._layoutWidth = this.element.clientWidth;
            this._updateLayoutOfCols();
            this._updatePositionOfResizeHandles();
        }, 0);
    }
    _requestRender() {
        if (this._renderTimer) {
            clearTimeout(this._renderTimer);
        }
        this._renderTimer = setTimeout(this._render.bind(this), 0);
        return this;
    }
    _render() {
        if (!!this.onRender && this.onRender(this) === false) {
            return this;
        }
        const isCheckable = (this._opt.disableCheckbox === false && this._opt.disableSelect === false && this._opt.multiSelect === true);
        let i, j, row, col, cell, pl, pages, from, to;
        const rl = this._rows.length;
        const cl = this._cols.length;
        if (this._opt.pagination) {
            pl = 0;
            pages = Math.ceil(rl / this._opt.numberOfRowsPerPage);
            if (pages <= this._pagePosition) {
                this._pagePosition = pages - 1;
            }
            if (this._pagePosition <= 0) {
                this._pagePosition = 0;
            }
            from = this._pagePosition * this._opt.numberOfRowsPerPage;
            to = from + this._opt.numberOfRowsPerPage;
        }
        this._tbody.update();
        for (i = 0; i < rl; i++) {
            if (this._opt.pagination) {
                if (i < from) {
                    continue;
                }
                if (i >= to) {
                    break;
                }
                ++pl;
            }
            row = this._rows[i];
            if (row._tr) {
                row._tr.insertTo(this._tbody);
                continue;
            }
            // init row
            row._grid = this;
            row._tr = new Element("tr").insertTo(this._tbody);
            if (row.id) {
                row._tr.id = row.id;
            }
            if (row.className) {
                row._tr.className = row.className;
            }
            if (row.attribute) {
                row._tr.writeAttribute(row.attribute);
            }
            if (row.style) {
                row._tr.setStyle(row.style);
            }
            if (row.onClick || this.onClick || this._opt.disableSelect === false) {
                if (this._opt.disableSelect === false) {
                    row._tr.addClassName("flagrate-grid-row-selectable");
                }
                if (row.onClick || this.onClick) {
                    row._tr.addClassName("flagrate-grid-row-clickable");
                }
                row._tr.onclick = this._createRowOnClickHandler(row);
            }
            if (row.onDblClick || this.onDblClick) {
                row._tr.ondblclick = this._createRowOnDblClickHandler(row);
            }
            if (isCheckable && !row._checkbox) {
                row._checkbox = new Checkbox({
                    onChange: this._createRowOnCheckHandler(row)
                }).insertTo(new Element("td", { "class": "flagrate-grid-cell-checkbox" }).insertTo(row._tr));
            }
            if (row.isSelected === true) {
                this.select(row);
            }
            for (j = 0; j < cl; j++) {
                col = this._cols[j];
                cell = (row.cell[col.key] === undefined) ? (row.cell[col.key] = {}) : row.cell[col.key];
                if (typeof cell === "string" || typeof cell === "number") {
                    cell = row.cell[col.key] = { text: cell };
                }
                if (cell._td) {
                    cell._td.insertTo(row._tr);
                    continue;
                }
                // init cell
                cell._td = new Element("td").insertTo(row._tr);
                if (cell.id) {
                    cell._td.id = cell.id;
                }
                if (cell.className) {
                    cell._td.className = cell.className;
                }
                if (cell.attribute) {
                    cell._td.writeAttribute(cell.attribute);
                }
                if (cell.style) {
                    cell._td.setStyle(cell.style);
                }
                if (col.align) {
                    cell._td.style.textAlign = col.align;
                }
                cell._td.addClassName(col._id);
                // init cell content
                cell._div = new Element().insertTo(cell._td);
                if (cell.text !== undefined) {
                    cell._div.updateText(cell.text);
                }
                if (cell.html) {
                    cell._div.update(cell.html);
                }
                if (cell.element) {
                    cell._div.update(cell.element);
                }
                if (cell.icon) {
                    cell._div.addClassName("flagrate-icon");
                    cell._div.style.backgroundImage = `url(${cell.icon})`;
                }
                if (cell.onClick) {
                    cell._td.addClassName("flagrate-grid-cell-clickable");
                    cell._td.onclick = this._createCellOnClickHandler(cell);
                }
                if (cell.onDblClick) {
                    cell._td.ondblclick = this._createCellOnDblClickHandler(cell);
                }
                // redefine props
                Object.defineProperties(cell, cellProps);
                // post-processing
                if (cell.postProcess) {
                    cell.postProcess.call(this, cell._td, cell, this);
                }
            }
            if (!row._last) {
                row._last = new Element("td", { "class": this._id + "-col-last" });
            }
            row._last.insertTo(row._tr);
            // menu
            if (row.menuItems) {
                this._updateRowMenu(row, row.menuItems);
            }
            // redefine props
            Object.defineProperties(row, rowProps);
            // post-processing
            if (row.postProcess) {
                row.postProcess.call(this, row._tr, row, this);
            }
            if (this.postProcessOfRow) {
                this.postProcessOfRow(row._tr, row, this);
            }
        } //<--for
        if (this._opt.pagination) {
            this._pager.getElementByKey("rn").updateText((from + 1) + " - " + (from + pl) + " / " + rl);
            this._pager.getElementByKey("num").updateText((this._pagePosition + 1) + " / " + pages);
        }
        if (this._opt.disableResize === false) {
            if (this._opt.fill) {
                this._head.style.right = (this._body.offsetWidth - this._body.clientWidth) + "px";
                this._head.scrollLeft = this._body.scrollLeft;
            }
            this._requestUpdateLayout();
        }
        if (this.onRendered) {
            this.onRendered(this);
        }
        return this;
    }
    _updateRowMenu(row, items) {
        if (row._menu) {
            row._menu.remove();
            delete row._menu;
        }
        if (items && items.length !== 0) {
            row._last.addClassName("flagrate-grid-cell-menu");
            row._menu = new ContextMenu({
                target: row._tr,
                items: items
            });
            if (!row._last.onclick) {
                row._last.onclick = row._grid._createLastRowOnClickHandler(row);
            }
        }
        else {
            row._last.removeClassName("flagrate-grid-cell-menu");
        }
    }
    _updatePositionOfResizeHandles() {
        const adj = this._opt.fill ? -this._body.scrollLeft : 0;
        let col;
        for (let i = 0, l = this._cols.length; i < l; i++) {
            col = this._cols[i];
            if (col._resizeHandle) {
                col._resizeHandle.style.left = (col._th.offsetLeft + col._th.getWidth() + adj) + "px";
            }
        }
    }
    _updateLayoutOfCols(surplus) {
        let fixed = true;
        let minimized = 0;
        let col;
        for (let i = 0, l = this._cols.length; i < l; i++) {
            col = this._cols[i];
            if (col.width) {
                continue;
            }
            let width = "auto";
            const minWidth = col.minWidth === undefined ? this._opt.colMinWidth : col.minWidth;
            if (surplus) {
                width = surplus + "px";
            }
            else if (minWidth >= col._th.getWidth()) {
                width = minWidth + "px";
                ++minimized;
            }
            else {
                fixed = false;
            }
            this._style.updateText(this._style.innerHTML.replace(new RegExp("(" + col._id + "{width:)([^}]*)}"), "$1" + width + "}"));
        }
        if (fixed) {
            this.element.addClassName("flagrate-grid-fixed");
        }
        else {
            this.element.removeClassName("flagrate-grid-fixed");
        }
        setTimeout(() => {
            const base = this._opt.fill ? this._body : this.element;
            this._style.updateText(this._style.innerHTML.replace(new RegExp("(" + this._id + "-col-last:after{right:)([^}]*)}"), "$1" + (base.scrollWidth - base.clientWidth - base.scrollLeft) + "px!important}"));
            const _surplus = this._lastCol.getWidth();
            if (fixed && !surplus && _surplus && minimized) {
                this._updateLayoutOfCols(Math.floor(_surplus / minimized));
            }
        }, 0);
    }
    _createOnScrollHandler() {
        return (e) => {
            if (this._opt.disableResize === false) {
                this._updateLayoutOfCols();
            }
        };
    }
    _createBodyOnScrollHandler() {
        return (e) => {
            this._head.style.right = (this._body.offsetWidth - this._body.clientWidth) + "px";
            this._head.scrollLeft = this._body.scrollLeft;
            if (this._opt.disableResize === false) {
                this._updateLayoutOfCols();
                this._updatePositionOfResizeHandles();
            }
        };
    }
    _createColOnClickHandler(col) {
        return (e) => {
            this.sort(col.key, !col.isAsc);
        };
    }
    _createRowOnClickHandler(row) {
        return (e) => {
            if (/firefox/i.test(navigator.userAgent) === true) {
                window.event = e;
            }
            if (this.isEnabled() === false) {
                return;
            }
            if (row.onClick) {
                row.onClick.call(this, e, row, this);
            }
            if (this.onClick) {
                this.onClick(e, row, this);
            }
            if (this._opt.disableSelect === false) {
                if (row.isSelected === true) {
                    this.deselect(row);
                }
                else {
                    this.select(row);
                }
            }
            if (row._checkbox) {
                row._checkbox.focus();
            }
            return false;
        };
    }
    _createRowOnDblClickHandler(row) {
        return (e) => {
            if (/firefox/i.test(navigator.userAgent) === true) {
                window.event = e;
            }
            if (this.isEnabled() === false) {
                return;
            }
            if (row.onDblClick) {
                row.onDblClick.call(this, e, row, this);
            }
            if (this.onDblClick) {
                this.onDblClick(e, row, this);
            }
        };
    }
    _createCellOnClickHandler(cell) {
        return (e) => {
            if (this.isEnabled() === false) {
                return;
            }
            if (cell.onClick) {
                cell.onClick.call(this, e, cell, this);
            }
        };
    }
    _createCellOnDblClickHandler(cell) {
        return (e) => {
            if (this.isEnabled() === false) {
                return;
            }
            if (cell.onDblClick) {
                cell.onDblClick.call(this, e, cell, this);
            }
        };
    }
    _createRowOnCheckHandler(row) {
        return (e) => {
            if (this.isEnabled() === false) {
                if (e.targetCheckbox.isChecked() === true) {
                    e.targetCheckbox.uncheck();
                }
                else {
                    e.targetCheckbox.check();
                }
                return;
            }
            if (this._opt.disableSelect === false) {
                if (row._checkbox.isChecked() === true) {
                    this.select(row);
                }
                else {
                    this.deselect(row);
                }
            }
        };
    }
    _createLastRowOnClickHandler(row) {
        return (e) => {
            if (this.isEnabled() === false) {
                return;
            }
            e.stopPropagation();
            if (row._menu) {
                row._menu.open(e);
            }
        };
    }
    _createResizeHandleOnMousedownHandler(col) {
        return (e) => {
            //e.stopPropagation();
            e.preventDefault();
            let current = e.clientX;
            const origin = current;
            const onMove = (e) => {
                e.preventDefault();
                const delta = e.clientX - current;
                current += delta;
                col._resizeHandle.style.left = (parseInt(col._resizeHandle.style.left.replace("px", ""), 10) + delta) + "px";
            };
            const onUp = (e) => {
                e.preventDefault();
                document.removeEventListener("mousemove", onMove, true);
                document.removeEventListener("mouseup", onUp, true);
                const minWidth = col.minWidth === undefined ? this._opt.colMinWidth : col.minWidth;
                const delta = e.clientX - origin;
                let width = col._th.getWidth() + delta;
                width = col.width = Math.max(width, minWidth);
                this._style.updateText(this._style.innerHTML.replace(new RegExp(`(${col._id}{width:)([^}]*)}`), `$1${width}px}`));
                this._updateLayoutOfCols();
                this._updatePositionOfResizeHandles();
            };
            document.addEventListener("mousemove", onMove, true);
            document.addEventListener("mouseup", onUp, true);
        };
    }
}
Grid.idCounter = 0;
export function createGrid(a) {
    return new Grid(a);
}
/** get value of row */
function getValue() {
    const row = this;
    if (row.value !== undefined) {
        return row.value;
    }
    const ret = {};
    for (const key in row.cell) {
        if (typeof row.cell[key] === "object" && row.cell[key].value !== undefined) {
            ret[key] = row.cell[key].value;
        }
    }
    return ret;
}
const hiddenProp = { enumerable: false };
const rowProps = {
    _checkbox: hiddenProp,
    _grid: hiddenProp,
    _last: hiddenProp,
    _menu: hiddenProp,
    _tr: hiddenProp,
    className: hiddenProp,
    attribute: hiddenProp,
    style: hiddenProp,
    postProcess: hiddenProp,
    tr: {
        enumerable: true,
        get: function () {
            return this._tr;
        }
    },
    id: {
        enumerable: true,
        get: function () {
            return this._tr.id || undefined;
        },
        set: function (id) {
            this._tr.id = id;
        }
    },
    menuItems: {
        enumerable: true,
        get: function () {
            if (this._menu) {
                return this._menu.items;
            }
        },
        set: function (items) {
            this._grid._updateRowMenu(this, items);
        }
    }
};
const cellProps = {
    _td: hiddenProp,
    _div: hiddenProp,
    className: hiddenProp,
    attribute: hiddenProp,
    style: hiddenProp,
    postProcess: hiddenProp,
    td: {
        enumerable: true,
        get: function () {
            return this._td;
        }
    },
    div: {
        enumerable: true,
        get: function () {
            return this._div;
        }
    },
    id: {
        enumerable: true,
        get: function () {
            return this._td.id || undefined;
        },
        set: function (id) {
            this._td.id = id;
        }
    },
    align: {
        enumerable: true,
        get: function () {
            return this._td.style.textAlign || undefined;
        },
        set: function (align) {
            this._td.style.textAlign = align;
        }
    },
    text: {
        enumerable: false,
        get: function () {
            return this._div.innerText;
        },
        set: function (text) {
            this._div.updateText(text);
        }
    },
    html: {
        enumerable: false,
        get: function () {
            return this._div.innerHTML;
        },
        set: function (html) {
            this._div.update(html);
        }
    },
    element: {
        enumerable: false,
        get: function () {
            return this._div.firstChild;
        },
        set: function (element) {
            this._div.update(element);
        }
    },
    icon: {
        enumerable: true,
        get: function () {
            return this._div.style.backgroundImage.replace(/(.*url\()([^)]+)(\).*)/, "$2") || undefined;
        },
        set: function (url) {
            const cell = this;
            if (url) {
                cell._div.addClassName("flagrate-icon");
                cell._div.style.backgroundImage = `url(${url})`;
            }
            else {
                cell._div.removeClassName("flagrate-icon");
                cell._div.style.backgroundImage = "";
            }
        }
    }
};

//# sourceMappingURL=grid.js.map
