import { FHTMLDivElement } from "./element";
import { Button } from "./button";
export interface Option {
    /** default is `document.body`. */
    target?: HTMLElement;
    id?: string;
    className?: string;
    title?: string;
    subtitle?: string;
    text?: string;
    html?: string;
    element?: HTMLElement;
    content?: FHTMLDivElement;
    buttons?: ModalButtonOption[];
    /** default is `"flex"`. */
    sizing?: Sizing;
    onBeforeClose?(modal?: Modal, e?: Event): boolean;
    onClose?(modal?: Modal, e?: Event): void;
    onShow?(modal?: Modal): void;
    /** default is `false`. */
    disableCloseButton?: boolean;
    /** default is `false`. */
    disableCloseByMask?: boolean;
    /** default is `false`. */
    disableCloseByEsc?: boolean;
}
export declare type Sizing = "flex" | "full";
export interface ModalButton extends ModalButtonOption {
    _button?: Button;
}
export interface ModalButtonOption {
    key?: string;
    label?: string;
    icon?: string;
    color?: string;
    onSelect?(e?: Event, modal?: Modal): void;
    isFocused?: boolean;
    isDisabled?: boolean;
    className?: string;
}
export declare class Modal {
    private _opt;
    private _content;
    private _buttons;
    onBeforeClose: (modal?: Modal, e?: Event) => boolean;
    onClose: (modal?: Modal, e?: Event) => void;
    onShow: (modal?: Modal) => void;
    private _container;
    private _obi;
    private _modal;
    private _closeButton;
    private _header;
    private _middle;
    private _footer;
    private _title;
    private _subtitle;
    private _positioningTimer;
    private _closingTimer;
    private _close;
    private __onKeydownHandler;
    constructor(_opt?: Option);
    readonly buttons: Button[];
    id: string;
    className: string;
    content: FHTMLDivElement;
    sizing: Sizing;
    element: HTMLElement;
    html: string;
    text: string;
    title: string;
    subtitle: string;
    setId(id: string): this;
    setClassName(className: string): this;
    setContent(div: FHTMLDivElement): this;
    setSizing(sizing: Sizing): this;
    setElement(element: HTMLElement): this;
    setHTML(html: string): this;
    setText(text: string): this;
    setTitle(title: string): this;
    setSubtitle(subtitle: string): this;
    visible(): boolean;
    open(): this;
    /** DEPRECATED */
    show(): this;
    /** DEPRECATED */
    render(): this;
    close(e?: Event): this;
    getButtonByKey(key: string): Button;
    getButtons(): Button[];
    setButtons(buttons: ModalButtonOption[]): this;
    private _create();
    private _createBase();
    private _createModal();
    private _createButtons();
    private _positioning();
    private _onKeydownHandler(e);
}
export declare function createModal(option?: Option): Modal;
