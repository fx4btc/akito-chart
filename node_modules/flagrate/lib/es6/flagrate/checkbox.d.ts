import { Attribute, FHTMLLabelElement, FHTMLInputElement } from "./element";
export interface Checkbox extends Instance, FHTMLLabelElement {
}
export interface Class {
    new (option?: Option): Checkbox;
    prototype: Instance;
}
export interface Instance {
    disable(): this;
    enable(): this;
    isEnabled(): boolean;
    isChecked(): boolean;
    check(): this;
    uncheck(): this;
    onChange?(e: CheckboxEvent, target: this): void;
    onCheck?(e: CheckboxEvent, target: this): void;
    onUncheck?(e: CheckboxEvent, target: this): void;
    _input?: FHTMLInputElement;
}
export interface Option {
    /** id attribute. */
    id?: string;
    /** class attribute. */
    className?: string;
    /** attribute/value pairs properties. */
    attribute?: Attribute;
    /** Label text. */
    label?: string;
    /** Label HTML. */
    labelHTML?: string;
    /** icon image URL. */
    icon?: string;
    /** default is false. */
    isChecked?: boolean;
    /** default is false. */
    isFocused?: boolean;
    /** default is false. */
    isDisabled?: boolean;
    onChange?(e?: CheckboxEvent, target?: Checkbox): void;
    onCheck?(e?: CheckboxEvent, target?: Checkbox): void;
    onUncheck?(e?: CheckboxEvent, target?: Checkbox): void;
}
export interface CheckboxEvent extends Event {
    targetCheckbox?: Checkbox;
}
export declare const Checkbox: Class;
export declare function createCheckbox(option?: Option): Checkbox;
