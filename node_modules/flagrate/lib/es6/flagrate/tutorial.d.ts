export interface Option {
    steps?: Step[];
    index?: number;
    onFinish?(tutorial?: this): void;
    onAbort?(tutorial?: this): void;
    onClose?(tutorial?: this): void;
}
export interface Step {
    /** Element to target. If target is undefined or not found, will creates flagrate.Modal. */
    target?: string | HTMLElement;
    /** Title for this step. */
    title?: string;
    /** Descriptive text for this step. */
    text?: string;
    /** Descriptive html for this step. */
    html?: string;
    /** Triggered whenever a step is started. */
    onStep?(): void;
    /** Triggered at before starting of this step. */
    onBeforeStep?(done?: AsyncCallback): void;
    /** Triggered at after of this step. */
    onAfterStep?(done?: AsyncCallback): void;
}
export interface AsyncCallback {
    (): void;
}
export interface ButtonOption {
    id?: string;
    className?: string;
    color?: string;
    label?: string;
    labelHTML?: string;
    icon?: string;
    isFocused?: boolean;
    isDisabled?: boolean;
    onSelect?(): void;
}
export declare class Tutorial {
    onFinish: (tutorial?: this) => void;
    onAbort: (tutorial?: this) => void;
    onClose: (tutorial?: this) => void;
    private _steps;
    private _index;
    private _popover;
    private _modal;
    private _inStep;
    constructor(opt?: Option);
    visible(): boolean;
    open(): this;
    close(): this;
    abort(): this;
    finish(): this;
    prev(): this;
    next(): this;
    private _main();
    private _step();
    _afterStep(done: AsyncCallback): this;
}
export declare function createTutorial(option?: Option): Tutorial;
