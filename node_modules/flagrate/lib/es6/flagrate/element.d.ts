export interface FHTMLElement extends Instance, HTMLElement {
}
export interface FHTMLAnchorElement extends Instance, HTMLAnchorElement {
}
export interface FHTMLAppletElement extends Instance, HTMLAppletElement {
}
export interface FHTMLAreaElement extends Instance, HTMLAreaElement {
}
export interface FHTMLAudioElement extends Instance, HTMLAudioElement {
}
export interface FHTMLBaseElement extends Instance, HTMLBaseElement {
}
export interface FHTMLBaseFontElement extends Instance, HTMLBaseFontElement {
}
export interface FHTMLBodyElement extends Instance, HTMLBodyElement {
}
export interface FHTMLBRElement extends Instance, HTMLBRElement {
}
export interface FHTMLButtonElement extends Instance, HTMLButtonElement {
}
export interface FHTMLCanvasElement extends Instance, HTMLCanvasElement {
}
export interface FHTMLTableCaptionElement extends Instance, HTMLTableCaptionElement {
}
export interface FHTMLTableColElement extends Instance, HTMLTableColElement {
}
export interface FHTMLTableColElement extends Instance, HTMLTableColElement {
}
export interface FHTMLDataListElement extends Instance, HTMLDataListElement {
}
export interface FHTMLModElement extends Instance, HTMLModElement {
}
export interface FHTMLDirectoryElement extends Instance, HTMLDirectoryElement {
}
export interface FHTMLDivElement extends Instance, HTMLDivElement {
}
export interface FHTMLDListElement extends Instance, HTMLDListElement {
}
export interface FHTMLEmbedElement extends Instance, HTMLEmbedElement {
}
export interface FHTMLFieldSetElement extends Instance, HTMLFieldSetElement {
}
export interface FHTMLFontElement extends Instance, HTMLFontElement {
}
export interface FHTMLFormElement extends Instance, HTMLFormElement {
}
export interface FHTMLFrameElement extends Instance, HTMLFrameElement {
}
export interface FHTMLFrameSetElement extends Instance, HTMLFrameSetElement {
}
export interface FHTMLHeadingElement extends Instance, HTMLHeadingElement {
}
export interface FHTMLHeadingElement extends Instance, HTMLHeadingElement {
}
export interface FHTMLHeadingElement extends Instance, HTMLHeadingElement {
}
export interface FHTMLHeadingElement extends Instance, HTMLHeadingElement {
}
export interface FHTMLHeadingElement extends Instance, HTMLHeadingElement {
}
export interface FHTMLHeadingElement extends Instance, HTMLHeadingElement {
}
export interface FHTMLHeadElement extends Instance, HTMLHeadElement {
}
export interface FHTMLHRElement extends Instance, HTMLHRElement {
}
export interface FHTMLHtmlElement extends Instance, HTMLHtmlElement {
}
export interface FHTMLIFrameElement extends Instance, HTMLIFrameElement {
}
export interface FHTMLImageElement extends Instance, HTMLImageElement {
}
export interface FHTMLInputElement extends Instance, HTMLInputElement {
}
export interface FHTMLModElement extends Instance, HTMLModElement {
}
export interface FHTMLLabelElement extends Instance, HTMLLabelElement {
}
export interface FHTMLLegendElement extends Instance, HTMLLegendElement {
}
export interface FHTMLLIElement extends Instance, HTMLLIElement {
}
export interface FHTMLLinkElement extends Instance, HTMLLinkElement {
}
export interface FHTMLMapElement extends Instance, HTMLMapElement {
}
export interface FHTMLMarqueeElement extends Instance, HTMLMarqueeElement {
}
export interface FHTMLMenuElement extends Instance, HTMLMenuElement {
}
export interface FHTMLMetaElement extends Instance, HTMLMetaElement {
}
export interface FHTMLObjectElement extends Instance, HTMLObjectElement {
}
export interface FHTMLOListElement extends Instance, HTMLOListElement {
}
export interface FHTMLOptGroupElement extends Instance, HTMLOptGroupElement {
}
export interface FHTMLOptionElement extends Instance, HTMLOptionElement {
}
export interface FHTMLParagraphElement extends Instance, HTMLParagraphElement {
}
export interface FHTMLParamElement extends Instance, HTMLParamElement {
}
export interface FHTMLPreElement extends Instance, HTMLPreElement {
}
export interface FHTMLProgressElement extends Instance, HTMLProgressElement {
}
export interface FHTMLQuoteElement extends Instance, HTMLQuoteElement {
}
export interface FHTMLScriptElement extends Instance, HTMLScriptElement {
}
export interface FHTMLSelectElement extends Instance, HTMLSelectElement {
}
export interface FHTMLSourceElement extends Instance, HTMLSourceElement {
}
export interface FHTMLSpanElement extends Instance, HTMLSpanElement {
}
export interface FHTMLStyleElement extends Instance, HTMLStyleElement {
}
export interface FHTMLTableElement extends Instance, HTMLTableElement {
}
export interface FHTMLTableSectionElement extends Instance, HTMLTableSectionElement {
}
export interface FHTMLTableDataCellElement extends Instance, HTMLTableDataCellElement {
}
export interface FHTMLTextAreaElement extends Instance, HTMLTextAreaElement {
}
export interface FHTMLTableSectionElement extends Instance, HTMLTableSectionElement {
}
export interface FHTMLTableHeaderCellElement extends Instance, HTMLTableHeaderCellElement {
}
export interface FHTMLTableSectionElement extends Instance, HTMLTableSectionElement {
}
export interface FHTMLTitleElement extends Instance, HTMLTitleElement {
}
export interface FHTMLTableRowElement extends Instance, HTMLTableRowElement {
}
export interface FHTMLTrackElement extends Instance, HTMLTrackElement {
}
export interface FHTMLUListElement extends Instance, HTMLUListElement {
}
export interface FHTMLVideoElement extends Instance, HTMLVideoElement {
}
export interface FHTMLUnknownElement extends Instance, HTMLUnknownElement {
}
export interface Class {
    new (tagName: "a", attribute?: Attribute): FHTMLAnchorElement;
    new (tagName: "abbr", attribute?: Attribute): FHTMLElement;
    new (tagName: "acronym", attribute?: Attribute): FHTMLElement;
    new (tagName: "address", attribute?: Attribute): FHTMLElement;
    new (tagName: "applet", attribute?: Attribute): FHTMLAppletElement;
    new (tagName: "area", attribute?: Attribute): FHTMLAreaElement;
    new (tagName: "audio", attribute?: Attribute): FHTMLAudioElement;
    new (tagName: "b", attribute?: Attribute): FHTMLElement;
    new (tagName: "base", attribute?: Attribute): FHTMLBaseElement;
    new (tagName: "basefont", attribute?: Attribute): FHTMLBaseFontElement;
    new (tagName: "bdo", attribute?: Attribute): FHTMLElement;
    new (tagName: "big", attribute?: Attribute): FHTMLElement;
    new (tagName: "blockquote", attribute?: Attribute): FHTMLQuoteElement;
    new (tagName: "body", attribute?: Attribute): FHTMLBodyElement;
    new (tagName: "br", attribute?: Attribute): FHTMLBRElement;
    new (tagName: "button", attribute?: Attribute): FHTMLButtonElement;
    new (tagName: "canvas", attribute?: Attribute): FHTMLCanvasElement;
    new (tagName: "caption", attribute?: Attribute): FHTMLTableCaptionElement;
    new (tagName: "center", attribute?: Attribute): FHTMLElement;
    new (tagName: "cite", attribute?: Attribute): FHTMLElement;
    new (tagName: "code", attribute?: Attribute): FHTMLElement;
    new (tagName: "col", attribute?: Attribute): FHTMLTableColElement;
    new (tagName: "colgroup", attribute?: Attribute): FHTMLTableColElement;
    new (tagName: "datalist", attribute?: Attribute): FHTMLDataListElement;
    new (tagName: "dd", attribute?: Attribute): FHTMLElement;
    new (tagName: "del", attribute?: Attribute): FHTMLModElement;
    new (tagName: "dfn", attribute?: Attribute): FHTMLElement;
    new (tagName: "dir", attribute?: Attribute): FHTMLDirectoryElement;
    new (tagName?: "div", attribute?: Attribute): FHTMLDivElement;
    new (tagName: "dl", attribute?: Attribute): FHTMLDListElement;
    new (tagName: "dt", attribute?: Attribute): FHTMLElement;
    new (tagName: "em", attribute?: Attribute): FHTMLElement;
    new (tagName: "embed", attribute?: Attribute): FHTMLEmbedElement;
    new (tagName: "fieldset", attribute?: Attribute): FHTMLFieldSetElement;
    new (tagName: "font", attribute?: Attribute): FHTMLFontElement;
    new (tagName: "form", attribute?: Attribute): FHTMLFormElement;
    new (tagName: "frame", attribute?: Attribute): FHTMLFrameElement;
    new (tagName: "frameset", attribute?: Attribute): FHTMLFrameSetElement;
    new (tagName: "h1", attribute?: Attribute): FHTMLHeadingElement;
    new (tagName: "h2", attribute?: Attribute): FHTMLHeadingElement;
    new (tagName: "h3", attribute?: Attribute): FHTMLHeadingElement;
    new (tagName: "h4", attribute?: Attribute): FHTMLHeadingElement;
    new (tagName: "h5", attribute?: Attribute): FHTMLHeadingElement;
    new (tagName: "h6", attribute?: Attribute): FHTMLHeadingElement;
    new (tagName: "head", attribute?: Attribute): FHTMLHeadElement;
    new (tagName: "hr", attribute?: Attribute): FHTMLHRElement;
    new (tagName: "html", attribute?: Attribute): FHTMLHtmlElement;
    new (tagName: "i", attribute?: Attribute): FHTMLElement;
    new (tagName: "iframe", attribute?: Attribute): FHTMLIFrameElement;
    new (tagName: "img", attribute?: Attribute): FHTMLImageElement;
    new (tagName: "input", attribute?: Attribute): FHTMLInputElement;
    new (tagName: "ins", attribute?: Attribute): FHTMLModElement;
    new (tagName: "isindex", attribute?: Attribute): FHTMLUnknownElement;
    new (tagName: "kbd", attribute?: Attribute): FHTMLElement;
    new (tagName: "keygen", attribute?: Attribute): FHTMLElement;
    new (tagName: "label", attribute?: Attribute): FHTMLLabelElement;
    new (tagName: "legend", attribute?: Attribute): FHTMLLegendElement;
    new (tagName: "li", attribute?: Attribute): FHTMLLIElement;
    new (tagName: "link", attribute?: Attribute): FHTMLLinkElement;
    new (tagName: "listing", attribute?: Attribute): FHTMLPreElement;
    new (tagName: "map", attribute?: Attribute): FHTMLMapElement;
    new (tagName: "marquee", attribute?: Attribute): FHTMLMarqueeElement;
    new (tagName: "menu", attribute?: Attribute): FHTMLMenuElement;
    new (tagName: "meta", attribute?: Attribute): FHTMLMetaElement;
    new (tagName: "nextid", attribute?: Attribute): FHTMLUnknownElement;
    new (tagName: "nobr", attribute?: Attribute): FHTMLElement;
    new (tagName: "object", attribute?: Attribute): FHTMLObjectElement;
    new (tagName: "ol", attribute?: Attribute): FHTMLOListElement;
    new (tagName: "optgroup", attribute?: Attribute): FHTMLOptGroupElement;
    new (tagName: "option", attribute?: Attribute): FHTMLOptionElement;
    new (tagName: "p", attribute?: Attribute): FHTMLParagraphElement;
    new (tagName: "param", attribute?: Attribute): FHTMLParamElement;
    new (tagName: "plaintext", attribute?: Attribute): FHTMLElement;
    new (tagName: "pre", attribute?: Attribute): FHTMLPreElement;
    new (tagName: "progress", attribute?: Attribute): FHTMLProgressElement;
    new (tagName: "q", attribute?: Attribute): FHTMLQuoteElement;
    new (tagName: "rt", attribute?: Attribute): FHTMLElement;
    new (tagName: "ruby", attribute?: Attribute): FHTMLElement;
    new (tagName: "s", attribute?: Attribute): FHTMLElement;
    new (tagName: "samp", attribute?: Attribute): FHTMLElement;
    new (tagName: "script", attribute?: Attribute): FHTMLScriptElement;
    new (tagName: "select", attribute?: Attribute): FHTMLSelectElement;
    new (tagName: "small", attribute?: Attribute): FHTMLElement;
    new (tagName: "source", attribute?: Attribute): FHTMLSourceElement;
    new (tagName: "span", attribute?: Attribute): FHTMLSpanElement;
    new (tagName: "strike", attribute?: Attribute): FHTMLElement;
    new (tagName: "strong", attribute?: Attribute): FHTMLElement;
    new (tagName: "style", attribute?: Attribute): FHTMLStyleElement;
    new (tagName: "sub", attribute?: Attribute): FHTMLElement;
    new (tagName: "sup", attribute?: Attribute): FHTMLElement;
    new (tagName: "table", attribute?: Attribute): FHTMLTableElement;
    new (tagName: "tbody", attribute?: Attribute): FHTMLTableSectionElement;
    new (tagName: "td", attribute?: Attribute): FHTMLTableDataCellElement;
    new (tagName: "textarea", attribute?: Attribute): FHTMLTextAreaElement;
    new (tagName: "tfoot", attribute?: Attribute): FHTMLTableSectionElement;
    new (tagName: "th", attribute?: Attribute): FHTMLTableHeaderCellElement;
    new (tagName: "thead", attribute?: Attribute): FHTMLTableSectionElement;
    new (tagName: "title", attribute?: Attribute): FHTMLTitleElement;
    new (tagName: "tr", attribute?: Attribute): FHTMLTableRowElement;
    new (tagName: "track", attribute?: Attribute): FHTMLTrackElement;
    new (tagName: "tt", attribute?: Attribute): FHTMLElement;
    new (tagName: "u", attribute?: Attribute): FHTMLElement;
    new (tagName: "ul", attribute?: Attribute): FHTMLUListElement;
    new (tagName: "var", attribute?: Attribute): FHTMLElement;
    new (tagName: "video", attribute?: Attribute): FHTMLVideoElement;
    new (tagName: "xmp", attribute?: Attribute): FHTMLPreElement;
    new (tagName: string, attribute?: Attribute): FHTMLElement;
    /** Tells whether `element` is visible. */
    visible<T extends Node>(element: T): boolean;
    /** Tells whether `element` is exists on document. */
    exists<T extends Node>(element: T): boolean;
    /** Toggles the visibility of `element`. */
    toggle<T extends Node>(element: T): T;
    /** Sets `display: none` on `element`. */
    hide<T extends Node>(element: T): T;
    /** Removes `display: none` on `element`. */
    show<T extends Node>(element: T): T;
    /** Completely removes `element` from the document. */
    remove<T extends Node>(element: T): void;
    /** Clear the _content_ of `element`. */
    update<T extends Node>(element: T): T;
    /** Update the _content_ of `element` with the `string` as HTML. */
    update<T extends Node>(element: T, string: string): T;
    /** **DEPRECATED**: Use updateText instead. */
    update<T extends Node>(element: T, number: number): T;
    /** Replaces the _content_ of `element` with the `newContent`. */
    update<T extends Node, U extends Node>(element: T, newContent: U): T;
    /** Update the _content_ of `element` with the `string` as Text. */
    updateText<T extends Node>(element: T, string: string | number | boolean): T;
    /** Update the _content_ of `element` with the `content` element as Text. */
    updateText<T extends Node, U extends Node>(element: T, content: U): T;
    /** Insert the `string` as HTML to the _content_ of `element`. */
    insert<T extends Node>(element: T, string: string): T;
    /** **DEPRECATED**: Use updateText instead. */
    insert<T extends Node>(element: T, number: number): T;
    /** Insert the `content` to the _content_ of `element`. */
    insert<T extends Node, U extends Node>(element: T, content: U): T;
    /** Insert the content(s) to the specific position of _content_ of `element` (Advanced).  */
    insert<T extends Node>(element: T, insertion: Insertion): T;
    /** Insert the `string` to the _content_ of `element` */
    insertText<T extends Node>(element: T, string: string | number | boolean): T;
    /** Insert the content(s) to the specific position of _content_ of `element` (Advanced). */
    insertText<T extends Node>(element: T, content: Insertion): T;
    /** Insert `element` to the _content_ of `element`. */
    insertTo<T extends Node, U extends Node>(element: T, to: U): T;
    /** Insert `element` to the specific position of _content_ of `element`. */
    insertTo<T extends Node, U extends Node>(element: T, to: U, position: InsertPosition): T;
    /** **DEPRECATED**: Use getAttribute instead. */
    readAttribute<T extends Node>(element: T, name: string): string;
    /** Set attribute `name`. */
    writeAttribute<T extends Node>(element: T, name: string): T;
    /** Set or Remove attribute `name`. */
    writeAttribute<T extends Node>(element: T, name: string, exists: boolean): T;
    /** Set value of attribute `name`. */
    writeAttribute<T extends Node>(element: T, name: string, value: string): T;
    /** Set attribute(s) by name/value pairs. */
    writeAttribute<T extends Node>(element: T, attribute: Attribute): T;
    /** Get dimenstions of `element`. */
    getDimensions<T extends Node>(element: T): Dimensions;
    /** Get height of `element`. */
    getHeight<T extends Node>(element: T): number;
    /** Get width of `element`. */
    getWidth<T extends Node>(element: T): number;
    /** Get cumulative offset of `element`. */
    cumulativeOffset<T extends Node>(element: T): Offset;
    /** Get cumulative scroll offset of `element`. */
    cumulativeScrollOffset<T extends Node>(element: T): Offset;
    /** Tells weather class name is exists. */
    hasClassName<T extends Node>(element: T, className: string): boolean;
    /** Add class name to `element`. */
    addClassName<T extends Node>(element: T, className: string): T;
    /** Remove class name from `element`. */
    removeClassName<T extends Node>(element: T, className: string): T;
    /** Toggles the class name of `element`. */
    toggleClassName<T extends Node>(element: T, className: string): T;
    /** Get value of style property of `element`. */
    getStyle<T extends Node>(element: T, propertyName: NumberProperty): number;
    /** Get value of style property of `element`. */
    getStyle<T extends Node>(element: T, propertyName: string): string;
    /** Set value of style property of `element`. */
    setStyle<T extends Node>(element: T, style: Property): T;
    /** Registers an event handler on a DOM element. */
    on<T extends Node>(element: T, eventType: string, listener: EventListener, useCapture?: boolean): T;
    /** Unregisters an event handler on a DOM element. */
    off<T extends Node>(element: T, eventType: string, listener?: EventListener, useCapture?: boolean): T;
    /** Fires a custom event. */
    fire<T extends Node>(element: T, eventType: string, property?: any): T;
    /** Emit a custom event. (alias of fire) */
    emit<T extends Node>(element: T, eventType: string, property?: any): T;
    /** Extends the given `element` instance. */
    extend<T extends Node>(element: T): FHTMLElement;
    /** Check object type. */
    isElement(object: any): boolean;
}
export interface createElement {
    (tagName: "a", attribute?: Attribute): FHTMLAnchorElement;
    (tagName: "abbr", attribute?: Attribute): FHTMLElement;
    (tagName: "acronym", attribute?: Attribute): FHTMLElement;
    (tagName: "address", attribute?: Attribute): FHTMLElement;
    (tagName: "applet", attribute?: Attribute): FHTMLAppletElement;
    (tagName: "area", attribute?: Attribute): FHTMLAreaElement;
    (tagName: "audio", attribute?: Attribute): FHTMLAudioElement;
    (tagName: "b", attribute?: Attribute): FHTMLElement;
    (tagName: "base", attribute?: Attribute): FHTMLBaseElement;
    (tagName: "basefont", attribute?: Attribute): FHTMLBaseFontElement;
    (tagName: "bdo", attribute?: Attribute): FHTMLElement;
    (tagName: "big", attribute?: Attribute): FHTMLElement;
    (tagName: "blockquote", attribute?: Attribute): FHTMLQuoteElement;
    (tagName: "body", attribute?: Attribute): FHTMLBodyElement;
    (tagName: "br", attribute?: Attribute): FHTMLBRElement;
    (tagName: "button", attribute?: Attribute): FHTMLButtonElement;
    (tagName: "canvas", attribute?: Attribute): FHTMLCanvasElement;
    (tagName: "caption", attribute?: Attribute): FHTMLTableCaptionElement;
    (tagName: "center", attribute?: Attribute): FHTMLElement;
    (tagName: "cite", attribute?: Attribute): FHTMLElement;
    (tagName: "code", attribute?: Attribute): FHTMLElement;
    (tagName: "col", attribute?: Attribute): FHTMLTableColElement;
    (tagName: "colgroup", attribute?: Attribute): FHTMLTableColElement;
    (tagName: "datalist", attribute?: Attribute): FHTMLDataListElement;
    (tagName: "dd", attribute?: Attribute): FHTMLElement;
    (tagName: "del", attribute?: Attribute): FHTMLModElement;
    (tagName: "dfn", attribute?: Attribute): FHTMLElement;
    (tagName: "dir", attribute?: Attribute): FHTMLDirectoryElement;
    (tagName?: "div", attribute?: Attribute): FHTMLDivElement;
    (tagName: "dl", attribute?: Attribute): FHTMLDListElement;
    (tagName: "dt", attribute?: Attribute): FHTMLElement;
    (tagName: "em", attribute?: Attribute): FHTMLElement;
    (tagName: "embed", attribute?: Attribute): FHTMLEmbedElement;
    (tagName: "fieldset", attribute?: Attribute): FHTMLFieldSetElement;
    (tagName: "font", attribute?: Attribute): FHTMLFontElement;
    (tagName: "form", attribute?: Attribute): FHTMLFormElement;
    (tagName: "frame", attribute?: Attribute): FHTMLFrameElement;
    (tagName: "frameset", attribute?: Attribute): FHTMLFrameSetElement;
    (tagName: "h1", attribute?: Attribute): FHTMLHeadingElement;
    (tagName: "h2", attribute?: Attribute): FHTMLHeadingElement;
    (tagName: "h3", attribute?: Attribute): FHTMLHeadingElement;
    (tagName: "h4", attribute?: Attribute): FHTMLHeadingElement;
    (tagName: "h5", attribute?: Attribute): FHTMLHeadingElement;
    (tagName: "h6", attribute?: Attribute): FHTMLHeadingElement;
    (tagName: "head", attribute?: Attribute): FHTMLHeadElement;
    (tagName: "hr", attribute?: Attribute): FHTMLHRElement;
    (tagName: "html", attribute?: Attribute): FHTMLHtmlElement;
    (tagName: "i", attribute?: Attribute): FHTMLElement;
    (tagName: "iframe", attribute?: Attribute): FHTMLIFrameElement;
    (tagName: "img", attribute?: Attribute): FHTMLImageElement;
    (tagName: "input", attribute?: Attribute): FHTMLInputElement;
    (tagName: "ins", attribute?: Attribute): FHTMLModElement;
    (tagName: "isindex", attribute?: Attribute): FHTMLUnknownElement;
    (tagName: "kbd", attribute?: Attribute): FHTMLElement;
    (tagName: "keygen", attribute?: Attribute): FHTMLElement;
    (tagName: "label", attribute?: Attribute): FHTMLLabelElement;
    (tagName: "legend", attribute?: Attribute): FHTMLLegendElement;
    (tagName: "li", attribute?: Attribute): FHTMLLIElement;
    (tagName: "link", attribute?: Attribute): FHTMLLinkElement;
    (tagName: "listing", attribute?: Attribute): FHTMLPreElement;
    (tagName: "map", attribute?: Attribute): FHTMLMapElement;
    (tagName: "marquee", attribute?: Attribute): FHTMLMarqueeElement;
    (tagName: "menu", attribute?: Attribute): FHTMLMenuElement;
    (tagName: "meta", attribute?: Attribute): FHTMLMetaElement;
    (tagName: "nextid", attribute?: Attribute): FHTMLUnknownElement;
    (tagName: "nobr", attribute?: Attribute): FHTMLElement;
    (tagName: "object", attribute?: Attribute): FHTMLObjectElement;
    (tagName: "ol", attribute?: Attribute): FHTMLOListElement;
    (tagName: "optgroup", attribute?: Attribute): FHTMLOptGroupElement;
    (tagName: "option", attribute?: Attribute): FHTMLOptionElement;
    (tagName: "p", attribute?: Attribute): FHTMLParagraphElement;
    (tagName: "param", attribute?: Attribute): FHTMLParamElement;
    (tagName: "plaintext", attribute?: Attribute): FHTMLElement;
    (tagName: "pre", attribute?: Attribute): FHTMLPreElement;
    (tagName: "progress", attribute?: Attribute): FHTMLProgressElement;
    (tagName: "q", attribute?: Attribute): FHTMLQuoteElement;
    (tagName: "rt", attribute?: Attribute): FHTMLElement;
    (tagName: "ruby", attribute?: Attribute): FHTMLElement;
    (tagName: "s", attribute?: Attribute): FHTMLElement;
    (tagName: "samp", attribute?: Attribute): FHTMLElement;
    (tagName: "script", attribute?: Attribute): FHTMLScriptElement;
    (tagName: "select", attribute?: Attribute): FHTMLSelectElement;
    (tagName: "small", attribute?: Attribute): FHTMLElement;
    (tagName: "source", attribute?: Attribute): FHTMLSourceElement;
    (tagName: "span", attribute?: Attribute): FHTMLSpanElement;
    (tagName: "strike", attribute?: Attribute): FHTMLElement;
    (tagName: "strong", attribute?: Attribute): FHTMLElement;
    (tagName: "style", attribute?: Attribute): FHTMLStyleElement;
    (tagName: "sub", attribute?: Attribute): FHTMLElement;
    (tagName: "sup", attribute?: Attribute): FHTMLElement;
    (tagName: "table", attribute?: Attribute): FHTMLTableElement;
    (tagName: "tbody", attribute?: Attribute): FHTMLTableSectionElement;
    (tagName: "td", attribute?: Attribute): FHTMLTableDataCellElement;
    (tagName: "textarea", attribute?: Attribute): FHTMLTextAreaElement;
    (tagName: "tfoot", attribute?: Attribute): FHTMLTableSectionElement;
    (tagName: "th", attribute?: Attribute): FHTMLTableHeaderCellElement;
    (tagName: "thead", attribute?: Attribute): FHTMLTableSectionElement;
    (tagName: "title", attribute?: Attribute): FHTMLTitleElement;
    (tagName: "tr", attribute?: Attribute): FHTMLTableRowElement;
    (tagName: "track", attribute?: Attribute): FHTMLTrackElement;
    (tagName: "tt", attribute?: Attribute): FHTMLElement;
    (tagName: "u", attribute?: Attribute): FHTMLElement;
    (tagName: "ul", attribute?: Attribute): FHTMLUListElement;
    (tagName: "var", attribute?: Attribute): FHTMLElement;
    (tagName: "video", attribute?: Attribute): FHTMLVideoElement;
    (tagName: "xmp", attribute?: Attribute): FHTMLPreElement;
    (tagName: string, attribute?: Attribute): FHTMLElement;
}
export interface Instance {
    readonly isFlagrated: boolean;
    /** Tells whether `element` is visible. */
    visible(): boolean;
    /** Tells whether `element` is exists on document. */
    exists(): boolean;
    /** Toggles the visibility of `element`. */
    toggle(): this;
    /** Sets `display: none` on `element`. */
    hide(): this;
    /** Removes `display: none` on `element`. */
    show(): this;
    /** Completely removes `element` from the document. */
    /** Clear the _content_ of `element`. */
    update(): this;
    /** Update the _content_ of `element` with the `string` as HTML. */
    update(string: string): this;
    /** **DEPRECATED**: Use updateText instead. */
    update(number: number): this;
    /** Replaces the _content_ of `element` with the `newContent`. */
    update<T extends Node>(newContent: T): this;
    /** Update the _content_ of `element` with the `string` as Text. */
    updateText(string: string | number | boolean): this;
    /** Update the _content_ of `element` with the `content` element as Text. */
    updateText<T extends Node>(content: T): this;
    /** Insert the `string` as HTML to the _content_ of `element`. */
    insert(string: string): this;
    /** **DEPRECATED**: Use updateText instead. */
    insert(number: number): this;
    /** Insert the `content` to the _content_ of `element`. */
    insert<T extends Node>(content: T): this;
    /** Insert the content(s) to the specific position of _content_ of `element` (Advanced).  */
    insert(insertion: Insertion): this;
    /** Insert the `string` to the _content_ of `element` */
    insertText(string: string | number | boolean): this;
    /** Insert the content(s) to the specific position of _content_ of `element` (Advanced). */
    insertText(content: Insertion): this;
    /** Insert `element` to the _content_ of `element`. */
    insertTo<T extends Node>(to: T): this;
    /** Insert `element` to the specific position of _content_ of `element`. */
    insertTo<T extends Node>(to: T, position: InsertPosition): this;
    /** **DEPRECATED**: Use getAttribute instead. */
    readAttribute(name: string): string;
    /** Set attribute `name`. */
    writeAttribute(name: string): this;
    /** Set or Remove attribute `name`. */
    writeAttribute(name: string, value: string): this;
    /** Set value of attribute `name`. */
    writeAttribute(name: string, exists: boolean): this;
    /** Set attribute(s) by name/value pairs. */
    writeAttribute(object: Attribute): this;
    /** Get dimenstions of `element`. */
    getDimensions(): Dimensions;
    /** Get height of `element`. */
    getHeight(): number;
    /** Get width of `element`. */
    getWidth(): number;
    /** Get cumulative offset of `element`. */
    cumulativeOffset(): Offset;
    /** Get cumulative scroll offset of `element`. */
    cumulativeScrollOffset(): Offset;
    /** Tells weather class name is exists. */
    hasClassName(className: string): boolean;
    /** Add class name to `element`. */
    addClassName(className: string): this;
    /** Remove class name from `element`. */
    removeClassName(className: string): this;
    /** Toggles the class name of `element`. */
    toggleClassName(className: string): this;
    /** Get value of style property of `element`. */
    getStyle(propertyName: NumberProperty): number;
    /** Get value of style property of `element`. */
    getStyle(propertyName: string): string;
    /** Set value of style property of `element`. */
    setStyle(style: Property): this;
    /** Registers an event handler on a DOM element. */
    on(eventType: string, listener: EventListener, useCapture?: boolean): this;
    /** Unregisters an event handler on a DOM element. */
    off(eventType: string, listener?: EventListener, useCapture?: boolean): this;
    /** Fires a custom event. */
    fire(eventType: string, property?: any): this;
    /** Emit a custom event. (alias of fire) */
    emit(eventType: string, property?: any): this;
}
export declare type Attribute = {
    [name: string]: string | boolean;
};
export declare type Property = {
    [name: string]: string;
};
export declare type NumberProperty = "opacity";
export declare type InsertPosition = "before" | "top" | "bottom" | "after";
export interface Insertion {
    before?: HTMLElement | string | number;
    top?: HTMLElement | string | number;
    bottom?: HTMLElement | string | number;
    after?: HTMLElement | string | number;
}
export interface Dimensions {
    readonly width: number;
    readonly height: number;
}
export interface Offset {
    readonly top: number;
    readonly left: number;
}
export declare const Element: Class;
export declare const createElement: createElement;
