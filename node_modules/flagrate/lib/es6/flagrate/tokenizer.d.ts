import { Attribute, Property, FHTMLSpanElement, FHTMLDivElement } from "./element";
import { TextInput } from "./text-input";
export interface Tokenizer extends Instance, FHTMLDivElement {
}
export interface Class {
    new (option?: Option): Tokenizer;
    prototype: Instance;
}
export interface Instance {
    disable(): this;
    enable(): this;
    isEnabled(): boolean;
    setValues(values: (string | Value)[]): this;
    getValues(): (string | Value)[];
    removeValues(): this;
    removeValue(value: string | Value): this;
    setIcon(url?: string): this;
    getIcon(): string;
    focus(): void;
    onChange?(event?: any, tokenizer?: this): void;
    values?: (string | Value)[];
    max?: number;
    _updateTokens(): this;
    _tokenize(): this;
    _tokenized(candidates: (string | Value)[]): this;
    _tokenized(candidates: string | Value): this;
    _onClickHandler(event: MouseEvent): void;
    _onKeydownHandler(event: KeyboardEvent): void;
    _onFocusHandler(event: FocusEvent): void;
    _onBlurHandler(event: FocusEvent): void;
    _tokens?: FHTMLSpanElement;
    _input?: TextInput;
}
export interface Option {
    /** id attribute. */
    id?: string;
    /** class attribute. */
    className?: string;
    /** attribute/value pairs properties. */
    attribute?: Attribute;
    /** CSS style properties (uses Flagrate.Element.setStyle). */
    style?: Property;
    /** default values. */
    values?: Value[];
    /** default is `-1`. */
    max?: number;
    /** placeholder. */
    placeholder?: string;
    /** icon image URL. */
    icon?: string;
    /** default is Flagrate.identity */
    tokenize?(input: string, done: TokenizedCallback): void;
    tokenizeSync?(input: string): (string | Value)[];
    /** default is false. */
    isDisabled?: boolean;
    onChange?(event?: any, tokenizer?: Tokenizer): void;
}
export interface TokenizedCallback {
    (output: (string | Value)[]): void;
    (output: string | Value): void;
}
export interface Value {
    label: string;
    value: any;
}
export declare const Tokenizer: Class;
export declare function createTokenizer(option?: Option): Tokenizer;
