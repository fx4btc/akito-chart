import { Attribute, Property, FHTMLDivElement } from "./element";
import { Checkbox, Option as _CheckboxOption, CheckboxEvent } from "./checkbox";
export interface Checkboxes extends Instance, FHTMLDivElement {
}
export interface Class {
    new (option?: Option): Checkboxes;
    prototype: Instance;
}
export interface Instance {
    select(index: number): this;
    deselect(index: number): this;
    selectAll(): this;
    deselectAll(): this;
    getValues(): any[];
    addValue(value: any): this;
    removeValue(value: any): this;
    setValues(values: any[]): this;
    selectAll(): this;
    deselectAll(): this;
    enable(): this;
    disable(): this;
    isEnabled(): boolean;
    onChange?(event: CheckboxEvent, target: this): void;
    _items?: CheckboxesItem[];
}
export interface Option {
    /** id attribute. */
    id?: string;
    /** class attribute. */
    className?: string;
    /** attribute/value pairs properties. */
    attribute?: Attribute;
    /** CSS style properties (uses flagrate.Element.setStyle). */
    style?: Property;
    /** Button items */
    items?: (string | number | boolean | CheckboxOption)[];
    /** default value */
    values?: any[];
    /** default is false. */
    isDisabled?: boolean;
    onChange?(event?: CheckboxEvent, target?: Checkboxes): void;
}
export interface CheckboxOption extends _CheckboxOption {
    label: string;
    value: any;
}
export interface CheckboxesItem extends CheckboxOption {
    _checkbox?: Checkbox;
}
export declare const Checkboxes: Class;
export declare function createCheckboxes(option?: Option): Checkboxes;
