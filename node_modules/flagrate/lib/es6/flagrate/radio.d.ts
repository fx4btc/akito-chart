import { Attribute, FHTMLLabelElement, FHTMLInputElement } from "./element";
export interface Radio extends Instance, FHTMLLabelElement {
}
export interface Class {
    new (option?: Option): Radio;
    prototype: Instance;
}
export interface Instance {
    disable(): this;
    enable(): this;
    isEnabled(): boolean;
    isChecked(): boolean;
    check(): this;
    uncheck(): this;
    onChange?(e: RadioEvent, target: this): void;
    onCheck?(e: RadioEvent, target: this): void;
    onUncheck?(e: RadioEvent, target: this): void;
    _input?: FHTMLInputElement;
    _checked?: boolean;
}
export interface Option {
    /** id attribute. */
    id?: string;
    /** name attribute. */
    name?: string;
    /** class attribute. */
    className?: string;
    /** attribute/value pairs properties. */
    attribute?: Attribute;
    /** Label text. */
    label?: string;
    /** Label HTML. */
    labelHTML?: string;
    /** icon image URL. */
    icon?: string;
    /** default is false. */
    isChecked?: boolean;
    /** default is false. */
    isFocused?: boolean;
    /** default is false. */
    isDisabled?: boolean;
    onChange?(e?: RadioEvent, target?: Radio): void;
    onCheck?(e?: RadioEvent, target?: Radio): void;
    onUncheck?(e?: RadioEvent, target?: Radio): void;
}
export interface RadioEvent extends Event {
    targetRadio?: Radio;
}
export declare const Radio: Class;
export declare function createRadio(option?: Option): Radio;
