import { Attribute, Property, FHTMLSpanElement, FHTMLButtonElement } from "./element";
export interface Button extends Instance, FHTMLButtonElement {
}
export interface Class {
    new (option?: Option): Button;
    prototype: Instance;
}
export interface Instance {
    select(): this;
    disable(): this;
    enable(): this;
    isEnabled(): boolean;
    setLabel(label: string): this;
    setLabelHTML(html: string): this;
    setColor(color?: string): this;
    getColor(): string;
    setIcon(url?: string): this;
    getIcon(): string;
    onSelect?(event?: ButtonEvent, button?: this): void;
    onRemove?(event?: ButtonEvent, button?: this): void;
    readonly labelElement?: FHTMLSpanElement;
    _removeButton?: FHTMLButtonElement;
    _color?: string;
    _iconIdentifier?: string;
    _onSelectHandler(event: MouseEvent): void;
    _onRemoveHandler(event: MouseEvent): void;
}
export interface Option {
    /** id attribute. */
    id?: string;
    /** class attribute. */
    className?: string;
    /** attribute/value pairs properties. */
    attribute?: Attribute;
    /** CSS style properties (uses flagrate.Element.setStyle). */
    style?: Property;
    /** Color (uses flagrate.Button#setColor). */
    color?: string;
    /** Label text. */
    label?: string;
    /** Label html. */
    labelHTML?: string;
    /** icon image URL. */
    icon?: string;
    /** default is false. */
    isFocused?: boolean;
    /** default is false. */
    isDisabled?: boolean;
    /** default is false. */
    isRemovableByUser?: boolean;
    onSelect?(event?: ButtonEvent, button?: Button): void;
    onRemove?(event?: ButtonEvent, button?: Button): void;
}
export interface ButtonEvent extends MouseEvent {
    targetButton?: Button;
}
export declare const Button: Class;
export declare function createButton(option?: Option): Button;
