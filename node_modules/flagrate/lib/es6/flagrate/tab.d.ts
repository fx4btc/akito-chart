import { Attribute, Property, FHTMLDivElement } from "./element";
import { Button } from "./button";
export interface Tab extends Instance, FHTMLDivElement {
}
export interface Class {
    new (option?: Option): Tab;
    prototype: Instance;
}
export interface Instance {
    /** select the tab by key. */
    select(tabKey: string): this;
    /** select the tab by index. */
    select(tabIndex: number): this;
    /** select the tab by same object. */
    select(tabItem: TabItem): this;
    /** unshift the tab. */
    unshift(tabItem: TabItem): number;
    /** unshift the tabs. */
    unshift(tabItems: TabItem[]): number;
    /** push the tab. */
    push(tabItem: TabItem): number;
    /** push the tabs. */
    push(tabItems: TabItem[]): number;
    /** shift the tab(s). */
    shift(count?: number): TabItem | TabItem[];
    /** pop the tabs. */
    pop(count?: number): TabItem | TabItem[];
    /** Changes the content of a tabs, adding new tabs while removing old tab(s). */
    splice(index: number, howMany?: number, tabItems?: TabItem[]): TabItem[];
    /** Changes the content of a tabs, adding new tab while removing old tab(s). */
    splice(index: number, howMany?: number, tabItem?: TabItem): TabItem[];
    /** remove tab by key. */
    removeTab(tabKey: string): TabItem;
    /** remove tab by index. */
    removeTab(tabIndex: number): TabItem;
    /** remove tab by same object. */
    removeTab(tabItem: TabItem): TabItem;
    /** remove tabs by same objects */
    removeTab(tabItems: TabItem[]): TabItem[];
    /** get index by key. */
    indexOf(tabKey: string): number;
    /** get index by same object. */
    indexOf(tabItem: TabItem): number;
    readonly tabs?: TabItem[];
    readonly bodyless?: boolean;
    readonly selectedIndex?: number;
    onSelect?(event?: TabEvent, tabItem?: TabItem): void;
    _tabs?: TabItem[];
    _bodyless?: boolean;
    _selectedIndex?: number;
    _head?: FHTMLDivElement;
    _body?: FHTMLDivElement;
    _create(): this;
    _render(): this;
    _createOnSelectHandler(tabItem: TabItem): (e: Event) => void;
}
export interface Option {
    id?: string;
    className?: string;
    attribute?: Attribute;
    style?: Property;
    tabs?: TabItemOption[];
    selectedIndex?: number;
    fill?: boolean;
    bodyless?: boolean;
    onSelect?(event?: TabEvent, tabItem?: TabItem): void;
}
export interface TabItem extends TabItemOption {
    _button?: Button;
}
export interface TabItemOption {
    key?: string;
    label?: string;
    icon?: string;
    text?: string;
    html?: string;
    element?: HTMLElement;
    onSelect?(event?: TabEvent, tabItem?: TabItem): void;
}
export interface TabEvent extends Event {
    targetTab?: Tab;
    targetTabItem?: TabItem;
}
export declare const Tab: Class;
export declare function createTab(option?: Option): Tab;
