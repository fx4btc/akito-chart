import { Attribute, Property, FHTMLDivElement } from "./element";
import { Button } from "./button";
import { TextInput } from "./text-input";
export interface SearchBox extends Instance, FHTMLDivElement {
}
export interface Class {
    new (option?: Option): SearchBox;
    prototype: Instance;
}
export interface Instance {
    disable(): this;
    enable(): this;
    isEnabled(): boolean;
    getValue(): string;
    setValue(value: string): this;
    search(): this;
    suggest(): this;
    focus(): void;
    blur(): void;
    _suggested(items: (string | SuggestedItem)[]): void;
    _onKeydownHandler(e: KeyboardEvent): void;
    _onKeyupHandler(e: KeyboardEvent): void;
    _onFocusHandler(e: FocusEvent): void;
    _onBlurHandler(e: FocusEvent): void;
    _input?: TextInput;
    _button?: Button;
    _suggest?: FHTMLDivElement;
}
export interface Option {
    id?: string;
    className?: string;
    attribute?: Attribute;
    style?: Property;
    value?: string;
    placeholder?: string;
    icon?: string;
    isDisabled?: boolean;
    suggester?(value: string, callback: (items: (string | SuggestedItem)[]) => void): void;
    suggester?(value: string): (string | SuggestedItem)[];
    onSearch?(value?: string, target?: SearchBox): void;
}
export interface SuggestedItem {
    label: string;
    icon?: string;
    onSelect?(): void;
}
export declare const SearchBox: Class;
export declare function createSearchBox(option?: Option): SearchBox;
