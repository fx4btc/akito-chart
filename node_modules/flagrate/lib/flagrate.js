(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
/*!
   Copyright 2016 Webnium

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
"use strict";

Object.defineProperty(exports, "__esModule", {
   value: true
});
exports.Flagrate = undefined;

var _util = require("./flagrate/util");

var util = _interopRequireWildcard(_util);

var _element = require("./flagrate/element");

var element = _interopRequireWildcard(_element);

var _button = require("./flagrate/button");

var button = _interopRequireWildcard(_button);

var _buttons = require("./flagrate/buttons");

var buttons = _interopRequireWildcard(_buttons);

var _menu = require("./flagrate/menu");

var menu = _interopRequireWildcard(_menu);

var _pulldown = require("./flagrate/pulldown");

var pulldown = _interopRequireWildcard(_pulldown);

var _textInput = require("./flagrate/text-input");

var textInput = _interopRequireWildcard(_textInput);

var _tokenizer = require("./flagrate/tokenizer");

var tokenizer = _interopRequireWildcard(_tokenizer);

var _textArea = require("./flagrate/text-area");

var textArea = _interopRequireWildcard(_textArea);

var _comboBox = require("./flagrate/combo-box");

var comboBox = _interopRequireWildcard(_comboBox);

var _select = require("./flagrate/select");

var select = _interopRequireWildcard(_select);

var _contextMenu = require("./flagrate/context-menu");

var contextMenu = _interopRequireWildcard(_contextMenu);

var _toolbar = require("./flagrate/toolbar");

var toolbar = _interopRequireWildcard(_toolbar);

var _searchBox = require("./flagrate/search-box");

var searchBox = _interopRequireWildcard(_searchBox);

var _checkbox = require("./flagrate/checkbox");

var checkbox = _interopRequireWildcard(_checkbox);

var _checkboxes = require("./flagrate/checkboxes");

var checkboxes = _interopRequireWildcard(_checkboxes);

var _radio = require("./flagrate/radio");

var radio = _interopRequireWildcard(_radio);

var _radios = require("./flagrate/radios");

var radios = _interopRequireWildcard(_radios);

var _switch = require("./flagrate/switch");

var sw = _interopRequireWildcard(_switch);

var _progress = require("./flagrate/progress");

var progress = _interopRequireWildcard(_progress);

var _slider = require("./flagrate/slider");

var slider = _interopRequireWildcard(_slider);

var _tab = require("./flagrate/tab");

var tab = _interopRequireWildcard(_tab);

var _popover = require("./flagrate/popover");

var popover = _interopRequireWildcard(_popover);

var _tutorial = require("./flagrate/tutorial");

var tutorial = _interopRequireWildcard(_tutorial);

var _notify = require("./flagrate/notify");

var notify = _interopRequireWildcard(_notify);

var _modal = require("./flagrate/modal");

var modal = _interopRequireWildcard(_modal);

var _grid = require("./flagrate/grid");

var grid = _interopRequireWildcard(_grid);

var _form = require("./flagrate/form");

var form = _interopRequireWildcard(_form);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

var Flagrate = exports.Flagrate = undefined;
(function (Flagrate) {
   Flagrate.identity = util.identity;
   Flagrate.extendObject = util.extendObject;
   Flagrate.emptyFunction = util.emptyFunction;
   Flagrate.jsonPointer = util.jsonPointer;
   Flagrate.Element = element.Element;
   Flagrate.createElement = element.createElement;
   Flagrate.Button = button.Button;
   Flagrate.createButton = button.createButton;
   Flagrate.Buttons = buttons.Buttons;
   Flagrate.createButtons = buttons.createButtons;
   Flagrate.Menu = menu.Menu;
   Flagrate.createMenu = menu.createMenu;
   Flagrate.Pulldown = pulldown.Pulldown;
   Flagrate.createPulldown = pulldown.createPulldown;
   Flagrate.TextInput = textInput.TextInput;
   Flagrate.createTextInput = textInput.createTextInput;
   Flagrate.Tokenizer = tokenizer.Tokenizer;
   Flagrate.createTokenizer = tokenizer.createTokenizer;
   Flagrate.TextArea = textArea.TextArea;
   Flagrate.createTextArea = textArea.createTextArea;
   Flagrate.ComboBox = comboBox.ComboBox;
   Flagrate.createComboBox = comboBox.createComboBox;
   Flagrate.Select = select.Select;
   Flagrate.createSelect = select.createSelect;
   Flagrate.ContextMenu = contextMenu.ContextMenu;
   Flagrate.createContextMenu = contextMenu.createContextMenu;
   Flagrate.Toolbar = toolbar.Toolbar;
   Flagrate.createToolbar = toolbar.createToolbar;
   Flagrate.SearchBox = searchBox.SearchBox;
   Flagrate.createSearchBox = searchBox.createSearchBox;
   Flagrate.Checkbox = checkbox.Checkbox;
   Flagrate.createCheckbox = checkbox.createCheckbox;
   Flagrate.Checkboxes = checkboxes.Checkboxes;
   Flagrate.createCheckboxes = checkboxes.createCheckboxes;
   Flagrate.Radio = radio.Radio;
   Flagrate.createRadio = radio.createRadio;
   Flagrate.Radios = radios.Radios;
   Flagrate.createRadios = radios.createRadios;
   Flagrate.Switch = sw.Switch;
   Flagrate.createSwitch = sw.createSwitch;
   Flagrate.Progress = progress.Progress;
   Flagrate.createProgress = progress.createProgress;
   Flagrate.Slider = slider.Slider;
   Flagrate.createSlider = slider.createSlider;
   Flagrate.Tab = tab.Tab;
   Flagrate.createTab = tab.createTab;
   Flagrate.Popover = popover.Popover;
   Flagrate.createPopover = popover.createPopover;
   Flagrate.Tutorial = tutorial.Tutorial;
   Flagrate.createTutorial = tutorial.createTutorial;
   Flagrate.Notify = notify.Notify;
   Flagrate.createNotify = notify.createNotify;
   Flagrate.Modal = modal.Modal;
   Flagrate.createModal = modal.createModal;
   Flagrate.Grid = grid.Grid;
   Flagrate.createGrid = grid.createGrid;
   Flagrate.Form = form.Form;
   Flagrate.createForm = form.createForm;
})(Flagrate || (exports.Flagrate = Flagrate = {}));
if (window.flagrate === undefined) {
   window.flagrate = Flagrate;
}
exports.default = Flagrate;



},{"./flagrate/button":2,"./flagrate/buttons":3,"./flagrate/checkbox":4,"./flagrate/checkboxes":5,"./flagrate/combo-box":6,"./flagrate/context-menu":7,"./flagrate/element":8,"./flagrate/form":9,"./flagrate/grid":10,"./flagrate/menu":11,"./flagrate/modal":12,"./flagrate/notify":13,"./flagrate/popover":14,"./flagrate/progress":15,"./flagrate/pulldown":16,"./flagrate/radio":17,"./flagrate/radios":18,"./flagrate/search-box":19,"./flagrate/select":20,"./flagrate/slider":21,"./flagrate/switch":22,"./flagrate/tab":23,"./flagrate/text-area":24,"./flagrate/text-input":25,"./flagrate/tokenizer":26,"./flagrate/toolbar":27,"./flagrate/tutorial":28,"./flagrate/util":29}],2:[function(require,module,exports){
/*
   Copyright 2016 Webnium

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.Button = undefined;
exports.createButton = createButton;

var _util = require("./util");

var _element = require("./element");

/*?
    flagrate.createButton(option)
    new flagrate.Button(option)
    - option (Object) - options.

    Button.

    #### option

    * `id`                       (String): `id` attribute of `button` element.
    * `className`                (String):
    * `attribute`                (Object):
    * `style`                    (Object): (using flagrate.Element.setStyle)
    * `color`                    (String): (using flagrate.Button#setColor)
    * `label`                    (String; default `""`):
    * `icon`                     (String):
    * `isFocused`                (Boolean; default `false`):
    * `isDisabled`               (Boolean; default `false`):
    * `isRemovableByUser`        (Boolean; default `false`):
    * `onSelect`                 (Function):
    * `onRemove`                 (Function):
**/
function FButton() {
    var option = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    option.isRemovableByUser = option.isRemovableByUser || false;
    this.onSelect = option.onSelect || _util.emptyFunction;
    this.onRemove = option.onRemove || _util.emptyFunction;
    var attr = option.attribute || {};
    if (option.id) {
        attr["id"] = option.id;
    }
    if (option.isFocused) {
        attr["autofocus"] = true;
    }
    if (!attr["type"]) {
        attr["type"] = "button";
    }
    // create a button element
    var button = new _element.Element("button", attr);
    (0, _util.extendObject)(button, this);
    button.labelElement = new _element.Element("span").insertTo(button);
    if (option.label) {
        button.labelElement.insertText(option.label);
    } else if (option.labelHTML) {
        button.labelElement.insert(option.labelHTML);
    }
    button.addClassName("flagrate flagrate-button");
    if (option.className) {
        button.addClassName(option.className);
    }
    button.addEventListener("click", button._onSelectHandler.bind(button), true);
    if (option.isRemovableByUser) {
        button.addClassName("flagrate-button-removable");
        button._removeButton = new _element.Element("button", {
            type: "button",
            class: "flagrate-button-remove"
        }).insertTo(button);
        button._removeButton.addEventListener("click", button._onRemoveHandler.bind(button), true);
    }
    if (option.style) {
        button.setStyle(option.style);
    }
    if (option.color) {
        button.setColor(option.color);
    }
    if (option.icon) {
        button.setIcon(option.icon);
    }
    if (option.isDisabled) {
        button.disable();
    }
    return button;
}
var Button = exports.Button = FButton;
function createButton(option) {
    return new Button(option);
}
Button.prototype = {
    select: function select() {
        return this._onSelectHandler(null);
    },
    disable: function disable() {
        this.addClassName("flagrate-disabled");
        this.writeAttribute("disabled", true);
        return this;
    },
    enable: function enable() {
        this.removeClassName("flagrate-disabled");
        this.writeAttribute("disabled", false);
        return this;
    },
    isEnabled: function isEnabled() {
        return !this.hasClassName("flagrate-disabled");
    },
    setLabel: function setLabel(text) {
        this.labelElement.updateText(text);
        return this;
    },
    setLabelHTML: function setLabelHTML(html) {
        this.labelElement.update(html);
        return this;
    },
    setColor: function setColor(color) {
        var button = this;
        if (color.charAt(0) === "@") {
            button.style.backgroundColor = "";
            button.style.color = "";
            button.addClassName("flagrate-button-color-" + color.slice(1));
        } else {
            button.style.backgroundColor = color;
            if (/^#[0-9a-f]{6}$/i.test(color) === true) {
                var c = parseInt(color.slice(1), 16);
                if (((c >> 16) + (c >> 8 & 0xff) + (c & 0xff)) / 3 > 150) {
                    button.style.color = "black";
                } else {
                    button.style.color = "white";
                }
            } else {
                button.style.color = "";
            }
        }
        button._color = color;
        return button;
    },
    getColor: function getColor() {
        return this._color || "";
    },
    setIcon: function setIcon(identifier) {
        var button = this;
        button._iconIdentifier = identifier;
        if (identifier) {
            return button.addClassName("flagrate-icon").setStyle({
                backgroundImage: "url(" + identifier + ")"
            });
        } else {
            return button.removeClassName("flagrate-icon").setStyle({
                backgroundImage: "none"
            });
        }
    },
    getIcon: function getIcon() {
        return this._iconIdentifier || "";
    },
    _onSelectHandler: function _onSelectHandler(e) {
        var button = this;
        if (button.isEnabled() === false) {
            return;
        }
        // for Firefox <- until when..?
        if (button._removeButton && e && e.layerX) {
            var bw = button.getWidth();
            var bh = button.getHeight();
            var bp = button._removeButton.getStyle("margin-right") === null ? 0 : parseInt(button._removeButton.getStyle("margin-right").replace("px", ""), 10);
            var rw = button._removeButton.getWidth();
            var rh = button._removeButton.getHeight();
            var lx = e.layerX;
            var ly = e.layerY;
            var isHitRemoveButton = lx > bw - bp - rw && lx < bw - bp && ly > bh - (bh - rh) / 2 - rh && ly < bh - (bh - rh) / 2;
            if (isHitRemoveButton) {
                button._onRemoveHandler(e);
                return button;
            }
        }
        var _e = e;
        _e.targetButton = button;
        button.onSelect(_e, button);
        button.fire("select", { targetButton: button });
    },
    _onRemoveHandler: function _onRemoveHandler(e) {
        var button = this;
        if (button.isEnabled() === true) {
            button.remove();
            var _e = e;
            _e.targetButton = button;
            button.onRemove(_e, button);
            button.fire("remove", { targetButton: button });
        }
    }
};



},{"./element":8,"./util":29}],3:[function(require,module,exports){
/*
   Copyright 2016 Webnium

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.Buttons = undefined;
exports.createButtons = createButtons;

var _util = require("./util");

var _element = require("./element");

var _button = require("./button");

var button = _interopRequireWildcard(_button);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

/*?
    flagrate.createButtons(option)
    new flagrate.Buttons(option)
    - option (Object) - options.

    Button group.

    #### option

    * `id`                       (String): `id` attribute of container element.
    * `className`                (String):
    * `attribute`                (Object):
    * `items`                    (Array): of item
    * `onSelect`                 (Function):

    #### item

    * `key`                      (String):
    * `label`                    (String; default `""`):
    * `icon`                     (String):
    * `color`                    (String):
    * `isDisabled`               (Boolean; default `false`):
    * `onSelect`                 (Function):
**/
function FButtons() {
    var option = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    option.items = option.items || [];
    this.onSelect = option.onSelect || _util.emptyFunction;
    var attr = option.attribute || {};
    if (option.id) {
        attr["id"] = option.id;
    }
    // create a container
    var container = new _element.Element("div", attr);
    (0, _util.extendObject)(container, this);
    container.addClassName("flagrate flagrate-buttons");
    if (option.className) {
        container.addClassName(option.className);
    }
    if (option.style) {
        container.setStyle(option.style);
    }
    for (var i = 0, l = option.items.length; i < l; i++) {
        container.push(option.items[i]);
    }
    container.addEventListener("click", function (e) {
        e.stopPropagation();
        e.preventDefault();
    });
    return container;
}
var Buttons = exports.Buttons = FButtons;
function createButtons(option) {
    return new Buttons(option);
}
Buttons.prototype = {
    push: function push(option) {
        var _this = this;

        var _onSelect = option.onSelect;
        option.onSelect = function (e, button) {
            if (_onSelect) {
                _onSelect.call(button, e, button);
            }
            _this.onSelect(e, _this);
        };
        var btn = new button.Button(option).insertTo(this);
        if (option.key) {
            btn.dataset["_key"] = option.key;
        }
        return this;
    },
    getButtonByKey: function getButtonByKey(key) {
        var elements = this.childNodes;
        for (var i = 0, l = elements.length; i < l; i++) {
            if (elements[i].dataset["_key"] === key) {
                return elements[i];
            }
        }
        return null;
    },
    getButtons: function getButtons() {
        return this.childNodes || [];
    }
};



},{"./button":2,"./element":8,"./util":29}],4:[function(require,module,exports){
/*
   Copyright 2016 Webnium

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.Checkbox = undefined;
exports.createCheckbox = createCheckbox;

var _util = require("./util");

var _element = require("./element");

var idCounter = 0;
/*?
    flagrate.createCheckbox(option)
    new flagrate.Checkbox(option)
    - option (Object) - options.
**/
function FCheckbox() {
    var opt = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    var id = "flagrate-checkbox-" + (++idCounter).toString(10);
    var attr = opt.attribute || {};
    attr["id"] = opt.id || null;
    attr["class"] = opt.className || null;
    //create
    var checkbox = new _element.Element("label", attr);
    checkbox.writeAttribute("for", id);
    (0, _util.extendObject)(checkbox, this);
    if (opt.label) {
        checkbox.insertText(opt.label);
    } else if (opt.labelHTML) {
        checkbox.insert(opt.labelHTML);
    }
    checkbox.addClassName("flagrate flagrate-checkbox");
    if (opt.icon) {
        checkbox.addClassName("flagrate-icon");
        checkbox.setStyle({
            backgroundImage: "url(" + opt.icon + ")"
        });
    }
    checkbox.onChange = opt.onChange || null;
    checkbox.onCheck = opt.onCheck || null;
    checkbox.onUncheck = opt.onUncheck || null;
    checkbox._input = new _element.Element("input", { id: id, type: "checkbox" });
    checkbox.insert({ top: new _element.Element() });
    checkbox.insert({ top: checkbox._input });
    checkbox._input.addEventListener("change", function (e) {
        e.stopPropagation();
        var _e = e;
        _e.targetCheckbox = checkbox;
        if (checkbox.isChecked() === true) {
            if (checkbox.onCheck) {
                checkbox.onCheck(_e, checkbox);
            }
            checkbox.fire("check", { targetCheckbox: checkbox });
        } else {
            if (checkbox.onUncheck) {
                checkbox.onUncheck(_e, checkbox);
            }
            checkbox.fire("uncheck", { targetCheckbox: checkbox });
        }
        if (checkbox.onChange) {
            checkbox.onChange(_e, checkbox);
        }
        checkbox.fire("change", { targetCheckbox: checkbox });
    });
    if (opt.isChecked === true) {
        checkbox.check();
    }
    if (opt.isFocused === true) {
        checkbox.focus();
    }
    if (opt.isDisabled === true) {
        checkbox.disable();
    }
    return checkbox;
}
var Checkbox = exports.Checkbox = FCheckbox;
function createCheckbox(option) {
    return new Checkbox(option);
}
Checkbox.prototype = {
    disable: function disable() {
        this.addClassName("flagrate-disabled");
        this._input.writeAttribute("disabled", true);
        return this;
    },
    enable: function enable() {
        this.removeClassName("flagrate-disabled");
        this._input.writeAttribute("disabled", false);
        return this;
    },
    isEnabled: function isEnabled() {
        return !this.hasClassName("flagrate-disabled");
    },
    isChecked: function isChecked() {
        return !!this._input.checked;
    },
    check: function check() {
        this._input.checked = true;
        return this;
    },
    uncheck: function uncheck() {
        this._input.checked = false;
        return this;
    }
};



},{"./element":8,"./util":29}],5:[function(require,module,exports){
/*
   Copyright 2016 Webnium

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.Checkboxes = undefined;

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

exports.createCheckboxes = createCheckboxes;

var _util = require("./util");

var _element = require("./element");

var _checkbox = require("./checkbox");

/*?
    flagrate.createCheckboxes(option)
    new flagrate.Checkboxes(option)
    - option (Object) - options.
**/
function FCheckboxes() {
    var opt = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    var attr = opt.attribute || {};
    if (opt.id) {
        attr["id"] = opt.id;
    }
    //create
    var checkboxes = new _element.Element("div", attr);
    (0, _util.extendObject)(checkboxes, this);
    checkboxes.addClassName("flagrate flagrate-checkboxes");
    if (opt.className) {
        checkboxes.addClassName(opt.className);
    }
    if (opt.style) {
        checkboxes.setStyle(opt.style);
    }
    checkboxes.onChange = opt.onChange;
    checkboxes._items = [];
    (opt.items || []).forEach(function (item) {
        var _item = {};
        if ((typeof item === "undefined" ? "undefined" : _typeof(item)) === "object") {
            (0, _util.extendObject)(_item, item);
        } else {
            _item.label = typeof item === "string" ? item : item.toString();
            _item.value = item;
        }
        _item._checkbox = new _checkbox.Checkbox(_item).insertTo(checkboxes);
        _item._checkbox.addEventListener("change", function (e) {
            if (checkboxes.onChange) {
                checkboxes.onChange(e, checkboxes);
            }
        });
        checkboxes._items.push(_item);
    });
    if (opt.isDisabled) {
        checkboxes.disable();
    }
    if (opt.values) {
        checkboxes.setValues(opt.values);
    }
    return checkboxes;
}
var Checkboxes = exports.Checkboxes = FCheckboxes;
function createCheckboxes(option) {
    return new Checkboxes(option);
}
Checkboxes.prototype = {
    select: function select(index) {
        if (this._items[index]) {
            this._items[index]._checkbox.check();
        }
        return this;
    },
    deselect: function deselect(index) {
        if (this._items[index]) {
            this._items[index]._checkbox.uncheck();
        }
        return this;
    },
    getValues: function getValues() {
        var values = [];
        for (var i = 0, l = this._items.length; i < l; i++) {
            if (this._items[i]._checkbox.isChecked() === true) {
                values.push(this._items[i].value);
            }
        }
        return values;
    },
    addValue: function addValue(value) {
        for (var i = 0, l = this._items.length; i < l; i++) {
            if (this._items[i].value === value) {
                this.select(i);
                break;
            }
        }
        return this;
    },
    removeValue: function removeValue(value) {
        for (var i = 0, l = this._items.length; i < l; i++) {
            if (this._items[i].value === value) {
                this.deselect(i);
                break;
            }
        }
        return this;
    },
    setValues: function setValues(values) {
        for (var i = 0, l = this._items.length; i < l; i++) {
            if (values.indexOf(this._items[i].value) === -1) {
                this.deselect(i);
            } else {
                this.select(i);
            }
        }
        return this;
    },
    selectAll: function selectAll() {
        for (var i = 0, l = this._items.length; i < l; i++) {
            this.select(i);
        }
        return this;
    },
    deselectAll: function deselectAll() {
        return this.setValues([]);
    },
    enable: function enable() {
        for (var i = 0, l = this._items.length; i < l; i++) {
            this._items[i]._checkbox.enable();
        }
        this.removeClassName("flagrate-disabled");
        return this;
    },
    disable: function disable() {
        for (var i = 0, l = this._items.length; i < l; i++) {
            this._items[i]._checkbox.disable();
        }
        this.addClassName("flagrate-disabled");
        return this;
    },
    isEnabled: function isEnabled() {
        return !this.hasClassName("flagrate-disabled");
    }
};



},{"./checkbox":4,"./element":8,"./util":29}],6:[function(require,module,exports){
/*
   Copyright 2016 Webnium

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.ComboBox = undefined;
exports.createComboBox = createComboBox;

var _util = require("./util");

var _element = require("./element");

var _button = require("./button");

var _menu = require("./menu");

var _textInput = require("./text-input");

/*?
    flagrate.createComboBox(option)
    new flagrate.ComboBox(option)
    - option (Object) - options.

    Select.

    #### option

    * `id`                       (String): `id` attribute of container element.
    * `className`                (String):
    * `attribute`                (Object):
    * `style`                    (Object): (using flagrate.Element.setStyle)
    * `value`                    (String): default value.
    * `items`                    (Array): of String values.
    * `placeholder`              (String):
    * `icon`                     (String):
    * `regexp`                   (RegExp):
    * `isDisabled`               (Boolean; default `false`):
**/
function FComboBox() {
    var option = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    this.items = option.items || [];
    this.regexp = option.regexp || null;
    var attr = option.attribute || {};
    if (option.id) {
        attr["id"] = option.id;
    }
    //create
    var container = new _element.Element("div", attr);
    container._textinput = new _textInput.TextInput({
        value: option.value,
        placeholder: option.placeholder,
        icon: option.icon
    }).insertTo(container);
    function createOnSelectHandler(value) {
        return function () {
            container.setValue(value);
            container._textinput.focus();
            container.fire("change");
        };
    }
    container._button = new _button.Button({
        onSelect: function onSelect() {
            if (container._menu) {
                container._menu.remove();
                delete container._menu;
                return;
            }
            var items = [];
            for (var i = 0, l = container.items.length; i < l; i++) {
                items.push({
                    label: container.items[i],
                    onSelect: createOnSelectHandler(container.items[i])
                });
            }
            var menu = container._menu = new _menu.Menu({
                className: "flagrate-combobox-menu",
                items: items,
                onSelect: function onSelect() {
                    menu.remove();
                    delete container._menu;
                }
            }).insertTo(container);
            // To prevent overflow.
            var menuHeight = menu.getHeight();
            var menuMargin = parseInt(menu.getStyle("margin-top").replace("px", ""), 10);
            var cummOffsetTop = container.cumulativeOffset().top;
            var upsideSpace = -window.pageYOffset + cummOffsetTop;
            var downsideSpace = window.pageYOffset + window.innerHeight - cummOffsetTop - container.getHeight();
            if (menuHeight + menuMargin > downsideSpace) {
                if (upsideSpace > downsideSpace) {
                    if (upsideSpace < menuHeight + menuMargin) {
                        menuHeight = upsideSpace - menuMargin - menuMargin;
                        menu.style.maxHeight = menuHeight + "px";
                    }
                    menu.addClassName("flagrate-combobox-menu-upper");
                } else {
                    menuHeight = downsideSpace - menuMargin - menuMargin;
                    menu.style.maxHeight = menuHeight + "px";
                }
            }
            function removeMenu(e) {
                document.body.removeEventListener("click", removeMenu);
                container.parentNode.removeEventListener("click", removeMenu);
                container.off("click", removeMenu);
                menu.style.opacity = "0";
                setTimeout(function () {
                    return menu.remove();
                }, 500);
                delete container._menu;
            }
            setTimeout(function () {
                document.body.addEventListener("click", removeMenu);
                container.parentNode.addEventListener("click", removeMenu);
                container.on("click", removeMenu);
            }, 0);
        }
    }).insertTo(container);
    (0, _util.extendObject)(container, this);
    container.addClassName("flagrate flagrate-combobox");
    if (option.className) {
        container.addClassName(option.className);
    }
    if (option.style) {
        container.setStyle(option.style);
    }
    if (option.isDisabled) {
        container.disable();
    }
    return container;
}
var ComboBox = exports.ComboBox = FComboBox;
function createComboBox(option) {
    return new ComboBox(option);
}
ComboBox.prototype = {
    disable: function disable() {
        this.addClassName("flagrate-disabled");
        this._textinput.disable();
        this._button.disable();
        return this;
    },
    enable: function enable() {
        this.removeClassName("flagrate-disabled");
        this._textinput.enable();
        this._button.enable();
        return this;
    },
    isEnabled: function isEnabled() {
        return !this.hasClassName("flagrate-disabled");
    },
    getValue: function getValue() {
        return this._textinput.value;
    },
    setValue: function setValue(value) {
        this._textinput.value = value;
        return this;
    },
    setIcon: function setIcon(identifier) {
        this._textinput.setIcon(identifier);
        return this;
    },
    getIcon: function getIcon() {
        return this._textinput.getIcon();
    },
    isValid: function isValid() {
        return this.regexp.test(this.getValue());
    }
};



},{"./button":2,"./element":8,"./menu":11,"./text-input":25,"./util":29}],7:[function(require,module,exports){
/*
   Copyright 2016 Webnium

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.ContextMenu = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

exports.createContextMenu = createContextMenu;

var _menu = require("./menu");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/*?
    flagrate.createContextMenu(option)
    new flagrate.ContextMenu(option)
    - option (Object) - options.

    ContextMenu.

    #### option

    * `target`                   (Element):
    * `items`                    (Array): of item (see: flagrate.Menu)
**/
var ContextMenu = exports.ContextMenu = function () {
    function ContextMenu() {
        var option = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

        _classCallCheck(this, ContextMenu);

        this._openHandler = this.open.bind(this);
        this._closeHandler = this.close.bind(this);
        this.items = option.items || [];
        this._isShowing = false;
        this.setTarget(option.target || document.body);
    }

    _createClass(ContextMenu, [{
        key: "setTarget",
        value: function setTarget(target) {
            if (this._target) {
                this._target.removeEventListener("contextmenu", this._openHandler);
            }
            target.addEventListener("contextmenu", this._openHandler);
            this._target = target;
            return this;
        }
    }, {
        key: "open",
        value: function open(e) {
            if (e && e.preventDefault) {
                e.preventDefault();
            }
            if (this._isShowing === true) {
                this.close();
            }
            this._isShowing = true;
            this._menu = new _menu.Menu({
                className: "flagrate-context-menu",
                items: this.items,
                onSelect: this._closeHandler
            });
            var x = 0;
            var y = 0;
            if (e && e.clientX && e.clientY) {
                x = e.clientX;
                y = e.clientY;
            }
            this._menu.style.opacity = "0";
            this._menu.insertTo(document.body);
            if (x + this._menu.getWidth() > window.innerWidth) {
                x = x - this._menu.getWidth() + 1;
            }
            if (y + this._menu.getHeight() > window.innerHeight) {
                y = y - this._menu.getHeight() + 1;
            }
            this._menu.style.top = y + "px";
            this._menu.style.left = x + "px";
            this._menu.style.opacity = "1";
            document.body.addEventListener("click", this._closeHandler);
            document.body.addEventListener("mouseup", this._closeHandler);
            document.body.addEventListener("mousewheel", this._closeHandler);
            return this;
        }
    }, {
        key: "close",
        value: function close() {
            document.body.removeEventListener("click", this._closeHandler);
            document.body.removeEventListener("mouseup", this._closeHandler);
            document.body.removeEventListener("mousewheel", this._closeHandler);
            this._isShowing = false;
            var menu = this._menu;
            setTimeout(function () {
                if (menu && menu.remove) {
                    menu.remove();
                }
            }, 0);
            delete this._menu;
            return this;
        }
        /** Tells whether the visibility. */

    }, {
        key: "visible",
        value: function visible() {
            return this._isShowing;
        }
        /** remove the elements and listeners. */

    }, {
        key: "remove",
        value: function remove() {
            if (this._menu) {
                this.close();
            }
            if (this._target) {
                this._target.removeEventListener("contextmenu", this._openHandler);
            }
        }
    }]);

    return ContextMenu;
}();

function createContextMenu(option) {
    return new ContextMenu(option);
}



},{"./menu":11}],8:[function(require,module,exports){
/*
   Copyright 2016 Webnium

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.createElement = exports.Element = undefined;

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _util = require("./util");

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

var _cache = {};
var _insertionTranslation = {
    before: function before(element, node) {
        element.parentNode.insertBefore(node, element);
    },
    top: function top(element, node) {
        element.insertBefore(node, element.firstChild);
    },
    bottom: function bottom(element, node) {
        element.appendChild(node);
    },
    after: function after(element, node) {
        element.parentNode.insertBefore(node, element.nextSibling);
    }
};
/*?
    flagrate.createElement([tagName = "div", attribute])
    new flagrate.Element([tagName = "div", attribute])
    - tagName (String) - The name of the HTML element to create.
    - attribute (Attribute) - An optional group of attribute/value pairs to set on the element.

    Creates an HTML element with `tagName` as the tag name, optionally with the given attributes.

    #### Example

        // The old way:
        var a = document.createElement("a");
        a.setAttribute("class", "foo");
        a.setAttribute("href", "/foo.html");
        a.appendChild(document.createTextNode("Next page"));
        x.appendChild(a);

        // The new way:
        var a = flagrate.createElement("a", { "class": "foo", href: "/foo.html" })
                        .insertText("Next page")
                        .insertTo(x);
**/
function FElement() {
    var tagName = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "div";
    var attribute = arguments[1];

    var node = void 0;
    if (_cache[tagName]) {
        node = _cache[tagName].cloneNode(false);
    } else if (attribute && attribute.hasOwnProperty("type") || tagName === "select") {
        node = document.createElement(tagName);
    } else {
        node = document.createElement(tagName);
        _cache[tagName] = node.cloneNode(false);
    }
    (0, _util.extendObject)(node, this);
    return attribute ? node.writeAttribute(attribute) : node;
}
var Element = exports.Element = FElement;
function _createElement(tagName, attribute) {
    return new Element(tagName, attribute);
}
var createElement = exports.createElement = _createElement;
Element.prototype = {
    isFlagrated: true
};
/*?
    flagrate.Element.visible(element) -> Boolean
    - element (Element) - instance of Element.

    Tells whether `element` is visible

    This method is similar to http://api.prototypejs.org/dom/Element/visible/
**/
Element.visible = function (element) {
    return element.style.display !== "none";
};
/*?
    flagrate.Element.exists(element) -> Boolean
    - element (Element) - instance of Element.

    Tells whether `element` is exists on document.
**/
Element.exists = function (element) {
    if (element.parentNode) {
        while ((element = element.parentNode) !== null) {
            if (element === document) {
                return true;
            }
        }
    }
    return false;
};
/*?
    flagrate.Element.toggle(element) -> Element
    - element (Element) - instance of Element.

    Toggles the visibility of `element`. Returns `element`.

    This method is similar to http://api.prototypejs.org/dom/Element/toggle/
**/
Element.toggle = function (element) {
    return Element[Element.visible(element) ? "hide" : "show"](element);
};
/*?
    flagrate.Element.hide(element) -> Element
    - element (Element) - instance of Element.

    Sets `display: none` on `element`. Returns `element`.

    This method is similar to http://api.prototypejs.org/dom/Element/hide/
**/
Element.hide = function (element) {
    element.style.display = "none";
    return element;
};
/*?
    flagrate.Element.show(element) -> Element
    - element (Element) - instance of Element.

    Removes `display: none` on `element`. Returns `element`.

    This method is similar to http://api.prototypejs.org/dom/Element/show/
**/
Element.show = function (element) {
    element.style.display = "";
    return element;
};
/*?
    flagrate.Element.remove(element) -> void
    - element (Element) - instance of Element.

    Completely removes `element` from the document and returns it.

    This method is similar to http://api.prototypejs.org/dom/Element/remove/
**/
Element.remove = function (element) {
    if (element.parentNode) {
        element.parentNode.removeChild(element);
    }
    return;
};
/*?
    flagrate.Element.update(element[, newContent]) -> Element
    - element (Element) - instance of Element.
    - newContent (String|Number|Element) - new content.

    Replaces _the content_ of `element` with the `newContent` argument and
    returns `element`.

    This method is similar to http://api.prototypejs.org/dom/Element/update/
**/
Element.update = function (element, content) {
    var i = element.childNodes.length;
    while (i--) {
        Element.remove(element.childNodes[i]);
    }
    if (!content) {
        return element;
    }
    if (Element.isElement(content) === true) {
        element.appendChild(content);
        return element;
    }
    if (typeof content !== "string") {
        content = content.toString(10);
    }
    element.innerHTML = content;
    return element;
};
/*?
    flagrate.Element.updateText(element[, newContent]) -> Element
    - element (Element) - instance of Element.
    - newContent (String|Number) - new text content.
**/
Element.updateText = function (element, content) {
    var i = element.childNodes.length;
    while (i--) {
        Element.remove(element.childNodes[i]);
    }
    if (content === undefined) {
        return element;
    }
    if (Element.isElement(content) === true && content.toString !== void 0) {
        return Element.updateText(element, content.toString());
    }
    if (typeof content !== "string") {
        content = content.toString(10);
    }
    element.appendChild(document.createTextNode(content));
    return element;
};
/*?
    flagrate.Element.insert(element, content) -> Element
    - element (Element) - instance of Element.
    - content (String|Number|Element|Object) - The content to insert

    Inserts content `above`, `below`, at the `top`, and/or at the `bottom` of
    the given element, depending on the option(s) given.

    This method is similar to http://api.prototypejs.org/dom/Element/insert/
**/
Element.insert = function (element, insertion) {
    if (typeof insertion === "string" || typeof insertion === "number" || Element.isElement(insertion) === true) {
        insertion = { bottom: insertion };
    }
    var position = void 0,
        content = void 0,
        insert = void 0,
        div = void 0;
    for (position in insertion) {
        if (insertion.hasOwnProperty(position)) {
            content = insertion[position];
            position = position.toLowerCase();
            insert = _insertionTranslation[position];
            if (Element.isElement(content) === true) {
                insert(element, content);
                continue;
            }
            if (typeof content !== "string") {
                content = content.toString(10);
            }
            div = new Element();
            div.innerHTML = content;
            if (position === "top" || position === "after") {
                [].concat(_toConsumableArray(div.childNodes)).reverse();
            }
            while (div.childNodes.length !== 0) {
                insert(element, div.childNodes[0]);
            }
        }
    }
    return element;
};
/*?
    flagrate.Element.insertText(element, content) -> Element
    - element (Element) - instance of Element.
    - content (String|Number|Object) - The content to insert

    Inserts content `above`, `below`, at the `top`, and/or at the `bottom` of
    the given element, depending on the option(s) given.
**/
Element.insertText = function (element, insertion) {
    if (typeof insertion === "string" || typeof insertion === "number") {
        insertion = { bottom: insertion };
    }
    var position = void 0,
        content = void 0,
        insert = void 0;
    for (position in insertion) {
        if (insertion.hasOwnProperty(position)) {
            content = insertion[position];
            position = position.toLowerCase();
            insert = _insertionTranslation[position];
            if (typeof content !== "string") {
                content = content.toString(10);
            }
            insert(element, document.createTextNode(content));
        }
    }
    return element;
};
/*?
    flagrate.Element.insertTo(element, to[, position = "bottom"]) -> Element
    - element (Element) - insert this.
    - to (Element) - insert to this element.
    - position (String) - `before` or `top` or `bottom` or `after`.
**/
Element.insertTo = function (element, to) {
    var position = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "bottom";

    var insertion = {};
    if (position) {
        insertion[position] = element;
    } else {
        insertion["bottom"] = element;
    }
    Element.insert(to, insertion);
    return element;
};
/*?
    flagrate.Element.readAttribute(element, attributeName) -> String | null
    - element (Element) - instance of Element.
    - attributeName (String) - attribute name.

    Returns the value of `element`'s `attribute` or `null` if `attribute` has
    not been specified.

    This method is similar to http://api.prototypejs.org/dom/Element/readAttribute/
**/
Element.readAttribute = function (element, name) {
    // ref: https://github.com/sstephenson/prototype/blob/1fb9728/src/dom/dom.js#L1856
    return element.getAttribute(name);
};
/*?
    flagrate.Element.writeAttribute(element, attribute[, value = true]) -> Element
    - element (Element) - instance of Element.
    - attribute (String|Object) - attribute name or name/value pairs object.
    - value (Boolean|String) - value of attribute.

    Adds, specifies or removes attributes passed as either a hash or a name/value pair.

    This method is similar to http://api.prototypejs.org/dom/Element/writeAttribute/
**/
Element.writeAttribute = function (element, name, value) {
    var attr = void 0;
    if ((typeof name === "undefined" ? "undefined" : _typeof(name)) === "object") {
        attr = name;
    } else {
        attr = {};
        attr[name] = value === undefined ? true : value;
    }
    var k = void 0;
    for (k in attr) {
        if (attr.hasOwnProperty(k) === true) {
            value = attr[k];
            if (value === false || value === null) {
                element.removeAttribute(k);
            } else if (value === true) {
                element.setAttribute(k, k);
            } else if (value !== undefined) {
                element.setAttribute(k, value);
            }
        }
    }
    return element;
};
/*?
    flagrate.Element.getDimensions(element) -> Object
    - element (Element) - instance of Element.

    Finds the computed width and height of `element` and returns them as
    key/value pairs of an object.

    This method is similar to http://api.prototypejs.org/dom/Element/getDimensions/
**/
Element.getDimensions = function (element) {
    var display = Element.getStyle(element, "display");
    if (display && display !== "none") {
        return {
            width: element.offsetWidth,
            height: element.offsetHeight
        };
    }
    var before = {
        visibility: element.style.visibility,
        position: element.style.position,
        display: element.style.display
    };
    var after = {
        visibility: "hidden",
        display: "block"
    };
    // Switching `fixed` to `absolute` causes issues in Safari.
    if (before.position !== "fixed") {
        after.position = "absolute";
    }
    Element.setStyle(element, after);
    var dimensions = {
        width: element.offsetWidth,
        height: element.offsetHeight
    };
    Element.setStyle(element, before);
    return dimensions;
};
/*?
    flagrate.Element.getHeight(element) -> Number
    - element (Element) - instance of Element.

    This method is similar to http://api.prototypejs.org/dom/Element/getHeight/
**/
Element.getHeight = function (element) {
    return Element.getDimensions(element).height;
};
/*?
    flagrate.Element.getWidth(element) -> Number
    - element (Element) - instance of Element.

    This method is similar to http://api.prototypejs.org/dom/Element/getWidth/
**/
Element.getWidth = function (element) {
    return Element.getDimensions(element).width;
};
/*?
    flagrate.Element.cumulativeOffset(element) -> Object
    - element (Element) - instance of Element.

    This method is similar to http://api.prototypejs.org/dom/Element/cumulativeOffset/
**/
Element.cumulativeOffset = function (element) {
    var t = 0,
        l = 0;
    if (element.parentNode) {
        do {
            t += element.offsetTop || 0;
            l += element.offsetLeft || 0;
            element = element.offsetParent;
        } while (element);
    }
    return {
        top: t,
        left: l
    };
};
/*?
    flagrate.Element.cumulativeScrollOffset(element) -> Object
    - element (Element) - instance of Element.

    This method is similar to http://api.prototypejs.org/dom/Element/cumulativeScrollOffset/
**/
Element.cumulativeScrollOffset = function (element) {
    var t = 0,
        l = 0;
    do {
        t += element.scrollTop || 0;
        l += element.scrollLeft || 0;
        // for Chrome
        if (element.parentNode === document.body && document.documentElement.scrollTop !== 0) {
            element = document.documentElement;
        } else {
            element = element.parentNode;
        }
    } while (element);
    return {
        top: t,
        left: l
    };
};
/*?
    Flagrate.Element.hasClassName(element, className) -> Boolean
    - element (Element) - instance of Element.
    - className (String) -

    This method is similar to http://api.prototypejs.org/dom/Element/hasClassName/
**/
Element.hasClassName = function (element, className) {
    return element.className.length > 0 && (element.className === className || new RegExp("(^|\\s)" + className + "(\\s|$)").test(element.className));
};
/*?
    flagrate.Element.addClassName(element, className) -> Element
    - element (Element) - instance of Element.
    - className (String) - The class name to add.

    This method is similar to http://api.prototypejs.org/dom/Element/addClassName/
**/
Element.addClassName = function (element, className) {
    if (!Element.hasClassName(element, className)) {
        element.className += (element.className ? " " : "") + className;
    }
    return element;
};
/*?
    flagrate.Element.removeClassName(element, className) -> Element
    - element (Element) - instance of Element.
    - className (String) -

    This method is similar to http://api.prototypejs.org/dom/Element/removeClassName/
**/
Element.removeClassName = function (element, className) {
    element.className = element.className.replace(new RegExp("(^|\\s+)" + className + "(\\s+|$)"), " ").trim();
    return element;
};
/*?
    flagrate.Element.toggleClassName(element, className) -> Element
    - element (Element) - instance of Element.
    - className (String) -

    This method is similar to http://api.prototypejs.org/dom/Element/toggleClassName/
**/
Element.toggleClassName = function (element, className) {
    return Element[Element.hasClassName(element, className) ? "removeClassName" : "addClassName"](element, className);
};
/*?
    flagrate.Element.getStyle(element, propertyName) -> String | Number | null
    - element (Element) - instance of Element.
    - propertyName (String) - The property name of style to be retrieved.

    This method is similar to http://api.prototypejs.org/dom/Element/getStyle/
**/
Element.getStyle = function (element, style) {
    style = style === "float" ? "cssFloat" : style.replace(/-+([a-z])?/g, function (m, s) {
        return s ? s.toUpperCase() : "";
    });
    var value = element.style[style];
    if (!value || value === "auto") {
        var css = document.defaultView.getComputedStyle(element, null);
        value = css && css[style] !== void 0 && css[style] !== "" ? css[style] : null;
    }
    if (style === "opacity") {
        return value ? parseFloat(value) : 1.0;
    }
    return value === "auto" ? null : value;
};
/*?
    flagrate.Element.setStyle(element, style) -> Element
    - element (Element) - instance of Element.
    - style (Object) -

    This method is similar to http://api.prototypejs.org/dom/Element/setStyle/
**/
Element.setStyle = function (element, style) {
    var p = void 0;
    for (p in style) {
        if (style.hasOwnProperty(p)) {
            element.style[p === "float" || p === "cssFloat" ? "cssFloat" : p] = style[p];
        }
    }
    return element;
};
/*?
    flagrate.Element.on(element, eventName, listener[, useCapture = false]) -> Element
    - element (Element) - instance of Element.
    - eventName (String) - name of event.
    - listener (Function) - The function to call when the event occurs.
    - useCapture (Boolean) -

    Registers an event handler on a DOM element.
**/
Element.on = function (element, name, listener, useCapture) {
    if (element._flagrateEvent === undefined) {
        element._flagrateEvent = {};
    }
    if (element._flagrateEvent[name] === undefined) {
        element._flagrateEvent[name] = [];
    }
    element._flagrateEvent[name].push({
        listener: listener,
        useCapture: useCapture
    });
    element.addEventListener(name, listener, useCapture || false);
    return element;
};
/*?
    flagrate.Element.off(element, eventName[, listener, useCapture = false]) -> Element
    - element (Element) - instance of Element.
    - eventName (String) - name of event.
    - listener (Function) - The function to call when the event occurs.
    - useCapture (Boolean) -

    Unregisters an event handler on a DOM element.
**/
Element.off = function (element, name, listener, useCapture) {
    if (listener) {
        element.removeEventListener(name, listener, useCapture || false);
        return;
    }
    if (element._flagrateEvent === undefined) {
        element._flagrateEvent = {};
    }
    if (element._flagrateEvent[name] === undefined) {
        element._flagrateEvent[name] = [];
    }
    element._flagrateEvent[name].forEach(function (fevent) {
        element.removeEventListener(name, fevent.listener, fevent.useCapture || false);
    });
    return element;
};
/*?
    flagrate.Element.fire(element, eventName[, property]) -> Element
    - element (Element) - instance of Element.
    - eventName (String) - name of event.
    - property (Object) -

    Fires a custom event.
**/
Element.fire = function (element, name, property) {
    var event = document.createEvent("HTMLEvents");
    event.initEvent(name, true, true);
    if (property) {
        (0, _util.extendObject)(event, property);
    }
    element.dispatchEvent(event);
    return element;
};
/*?
    flagrate.Element.emit(element, eventName[, property]) -> Element
    Alias of: flagrate.Element.fire
**/
Element.emit = Element.fire;
//
// create instance methods
//
for (var name in Element) {
    if (!(name in Element.prototype)) {
        Element.prototype[name] = wrapper(name);
    }
}
function wrapper(name) {
    return function () {
        return Element[name].apply(Element, [this].concat(Array.prototype.slice.call(arguments)));
    };
}
//
// extra class methods
//
/*?
    flagrate.Element.extend(element) -> flagrate.Element
    - element (Element) - instance of Element.

    Extends the given `element` instance.

    **Caution**: This method will add Flagrate.Element instance methods to given element instance.
**/
Element.extend = function (element) {
    if (element.isFlagrated) {
        return element;
    }
    (0, _util.extendObject)(element, Element.prototype);
    return element;
};
/*?
    flagrate.Element.isElement(element) -> Boolean
    - element (Element) - instance of Element.
**/
if ((typeof HTMLElement === "undefined" ? "undefined" : _typeof(HTMLElement)) === "object") {
    Element.isElement = function (object) {
        return object instanceof HTMLElement;
    };
} else {
    Element.isElement = function (object) {
        return !!(object && object.nodeType === 1 && typeof object.nodeName === "string");
    };
}



},{"./util":29}],9:[function(require,module,exports){
/*
   Copyright 2016 Webnium

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.Form = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

exports.createForm = createForm;

var _util = require("./util");

var _element = require("./element");

var _textInput = require("./text-input");

var _textArea = require("./text-area");

var _comboBox = require("./combo-box");

var _checkbox = require("./checkbox");

var _checkboxes = require("./checkboxes");

var _switch = require("./switch");

var _radios = require("./radios");

var _select = require("./select");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/*?
    flagrate.createForm(option)
    new flagrate.Form(option)
    - option (Object) - configuration.

    Create and initialize the Form.

    #### option

    * `fields`                   (Array; default `[]`): of **[field](#field)** object.
    * `id`                       (String): `id` attribute of container.
    * `className`                (String): `class` attribute of container.
    * `attribute`                (Object): additional attribute of container.
    * `style`                    (Object): style of container. (using flagrate.Element.setStyle)
    * `nolabel`                  (Boolean; default `false`): hide labels.
    * `vertical`                 (Boolean; default `false`): vertical label style.

    #### field

    * `key`                      (String):
    * `pointer`                  (String|null):
    * `label`                    (String; default `""`):
    * `icon`                     (String):
    * `text`                     (String):
    * `html`                     (String):
    * `element`                  (Element):
    * `input`                    (Object): see **[input](#input)**
    * `depends`                  (Array): of **[depend](#depend)**
    * `id`                       (String): `id` attribute of container.
    * `className`                (String): `class` attribute of container.
    * `attribute`                (Object): additional attribute of container.
    * `style`                    (Object): style of container. (using flagrate.Element.setStyle)

    #### input

    * `type`                     (String|Object; **required**): **[inputtype](#inputType)** String or Object
    * `val`                      (any): default value(s) of this input.
    * `isRequired`               (Boolean; default `false`):
    * `min`                      (Number): (simple validator)
    * `max`                      (Number): (simple validator)
    * `minLength`                (Number): (simple validator)
    * `maxLength`                (Number): (simple validator)
    * `validators`               (Array): of **[inputValidator](#inputvalidator)** String or Object or Function.
    * `toString`                 (Boolean; default `false`): if NOT String, use [#toString()](https://developer.mozilla.org/ja/docs/toString) before resulting.
    * `trim`                     (Boolean; default `false`): if String, use [String#trim()](https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Global_Objects/String/trim) before resulting.
    * `toNumber`                 (Boolean; default `false`): if NOT Number, tries to convert to Number.
    * `transform`                (Function): alternate result transform/converting function. (only sync)
    * `id`                       (String): `id` attribute of input element.

    #### depend

    * `key`                      (String): unique key for identifying fields. if looking result, must change to use the pointer.
    * `pointer`                  (String):
    * `val`                      (any):
    * `op`                       (String): `===`, `!==`, `>=`, `<=`, `>`, `<`, `in`
    * `tester`                   (Function): alternate testing function. this disables normal testing. (only sync)

    #### inputType

    if specified a String, will use flagrate.Form.inputType[(specified)].

    #### inputValidator

    if specified a String, will use flagrate.Form.inputValidator[(specified)].

        // Example: custom validator
        validators: [
            // using regex:
            {
                regexp: /^[a-z0-9]+(-[a-z0-9]+)*(\.([a-z0-9]+(-[a-z0-9]+)*))*$/i,
                error: "Please enter a valid hostname string."
            },
            // using async function:
            function (input, done) {
                someAsyncFunction(input, function (err, result) {
                    if (err) {
                        done("error", "This hostname is already in use. (" + err + ")");
                    } else {
                        done("success");
                    }
                });
            },
            // using sync function:
            function (input, done) {
                var err = someSyncFunction(input);
                if (err) {
                    done("error", "This hostname is prohibited. (" + err + ")");
                } else {
                    done("success");
                }
            }
        ]

    see flagrate.Form.inputValidator to read more documents.
**/
var Form = exports.Form = function () {
    function Form() {
        var _opt = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

        _classCallCheck(this, Form);

        this._opt = _opt;
        this._fields = [];
        this._nolabel = false;
        this._vertical = false;
        this.element = new _element.Element("form", { "class": "flagrate flagrate-form" });
        this._id = "flagrate-form-" + (++Form.idCounter).toString(10);
        if (_opt.nolabel === true) {
            this._nolabel = true;
        }
        if (_opt.vertical === true) {
            this._vertical = true;
        }
        this._create();
        if (_opt.fields && _opt.fields.length !== 0) {
            this.push(_opt.fields);
        }
    }

    _createClass(Form, [{
        key: "insertTo",
        value: function insertTo(element, pos) {
            return this.element.insertTo(element, pos) && this;
        }
    }, {
        key: "on",
        value: function on(eventType, listener, useCapture) {
            return this.element.on(eventType, listener, useCapture) && this;
        }
    }, {
        key: "off",
        value: function off(eventType, listener, useCapture) {
            return this.element.off(eventType, listener, useCapture) && this;
        }
        /** Returns a result Object. */

    }, {
        key: "getResult",
        value: function getResult() {
            var result = {};
            for (var i = 0, l = this._fields.length; i < l; i++) {
                var field = this._fields[i];
                if (!field.key && typeof field.pointer !== "string" || field._dependsIsOk !== true) {
                    continue;
                }
                if (field.pointer === null) {
                    // null pointer
                    continue;
                }
                if (typeof field.pointer === "string") {
                    _util.jsonPointer.set(result, field.pointer, field.getVal());
                } else if (field.key) {
                    result[field.key] = field.getVal();
                }
            }
            return result;
        }
        /*?
            #### Example
                  form.validate(function(success) {
                    if (success) {
                        console.log("form is valid.");
                    } else {
                        console.log("form is invalid.");
                    }
                });
        **/

    }, {
        key: "validate",
        value: function validate(callback) {
            var fields = [];
            for (var i = 0, l = this._fields.length; i < l; i++) {
                var field = this._fields[i];
                if (field._dependsIsOk === true && field.input && field.input.type) {
                    fields.push(field);
                }
            }
            var hasError = false;
            function fin() {
                if (callback) {
                    callback(!hasError);
                }
            }
            function done(result) {
                if (result === false) {
                    hasError = true;
                }
                run();
            }
            function run() {
                if (fields.length === 0) {
                    return fin();
                }
                fields.shift().validate(done);
            }
            run();
            return this;
        }
    }, {
        key: "enable",
        value: function enable() {
            for (var i = 0, l = this._fields.length; i < l; i++) {
                var field = this._fields[i];
                if (field.input && field.input.type) {
                    field.input.type.enable.call(field.input);
                }
            }
            return this;
        }
    }, {
        key: "disable",
        value: function disable() {
            for (var i = 0, l = this._fields.length; i < l; i++) {
                var field = this._fields[i];
                if (field.input && field.input.type) {
                    field.input.type.disable.call(field.input);
                }
            }
            return this;
        }
    }, {
        key: "getField",
        value: function getField(key) {
            for (var i = 0, l = this._fields.length; i < l; i++) {
                var field = this._fields[i];
                if (field.key && field.key === key) {
                    return field;
                }
            }
            return null;
        }
    }, {
        key: "push",
        value: function push(f) {
            if (f instanceof Array) {
                for (var i = 0, l = f.length; i < l; i++) {
                    this._createField(f[i]);
                    this._fields.push(f[i]);
                }
            } else {
                this._createField(f);
                this._fields.push(f);
            }
            for (var _i = 0, _l = this._fields.length; _i < _l; _i++) {
                this._collectFieldRefs(this._fields[_i]);
                this._checkFieldDepends(this._fields[_i]);
            }
            this._requestRender();
            return this._fields.length;
        }
    }, {
        key: "splice",
        value: function splice(index, c, f) {
            c = typeof c === "undefined" ? this._fields.length - index : c;
            var removes = this._fields.splice(index, c);
            for (var i = 0, l = removes.length; i < l; i++) {
                if (removes[i].container) {
                    removes[i].container.remove();
                    delete removes[i].container;
                }
            }
            if (f) {
                if (f instanceof Array === false) {
                    f = [f];
                }
                for (var _i2 = 0, _l2 = f.length; _i2 < _l2; _i2++) {
                    this._createField(f[_i2]);
                    this._fields.splice(index + _i2, 0, f[_i2]);
                }
            }
            for (var _i3 = 0, _l3 = this._fields.length; _i3 < _l3; _i3++) {
                this._collectFieldRefs(this._fields[_i3]);
                this._checkFieldDepends(this._fields[_i3]);
            }
            this._requestRender();
            return removes;
        }
    }, {
        key: "removeField",
        value: function removeField(f) {
            var removes = [];
            var bulk = true;
            if (f instanceof Array === false) {
                bulk = false;
                f = [f];
            }
            for (var i = 0, l = f.length; i < l; i++) {
                var index = typeof f[i] === "number" ? f[i] : this.indexOf(f[i]);
                if (index !== -1) {
                    removes.push(this.splice(index, 1));
                }
            }
            return bulk ? removes : removes[0];
        }
    }, {
        key: "indexOf",
        value: function indexOf(f) {
            if (typeof f === "string") {
                var index = -1;
                for (var i = 0, l = this._fields.length; i < l; i++) {
                    if (this._fields[i].key === f) {
                        index = i;
                        break;
                    }
                }
                return index;
            } else {
                return this._fields.indexOf(f);
            }
        }
    }, {
        key: "_create",
        value: function _create() {
            if (this._opt.id) {
                this.element.writeAttribute("id", this._opt.id);
            }
            if (this._opt.className) {
                this.element.addClassName(this._opt.className);
            }
            if (this._opt.attribute) {
                this.element.writeAttribute(this._opt.attribute);
            }
            if (this._opt.style) {
                this.element.setStyle(this._opt.style);
            }
            if (this._opt.nolabel === true) {
                this.element.addClassName("flagrate-form-nolabel");
            }
            if (this._opt.vertical === true) {
                this.element.addClassName("flagrate-form-vertical");
            }
            this.element.addEventListener("submit", function (e) {
                return e.preventDefault();
            });
            return this;
        }
    }, {
        key: "_requestRender",
        value: function _requestRender() {
            if (this._renderTimer) {
                clearTimeout(this._renderTimer);
            }
            this._renderTimer = setTimeout(this._render.bind(this), 0);
            return this;
        }
    }, {
        key: "_render",
        value: function _render() {
            var active = document.activeElement;
            for (var i = 0, l = this._fields.length; i < l; i++) {
                var field = this._fields[i];
                if (field._dependsIsOk === true) {
                    field.container.insertTo(this.element);
                } else {
                    if (field.visible() === true) {
                        field.container.remove();
                    }
                }
            }
            if (active) {
                if (/Trident/.test(window.navigator.userAgent) === true) {
                    setTimeout(function () {
                        if (active.focus) {
                            active.focus();
                        }
                        var isMustReselected = active.tagName === "INPUT" && (active.type === "text" || active.type === "password" || active.type === "number") || active.tagName === "TEXTAREA";
                        if (isMustReselected) {
                            if (typeof active.selectionStart === "number") {
                                active.selectionStart = active.selectionEnd = active.value.length;
                            } else if (active["createTextRange"] !== undefined) {
                                var range = active["createTextRange"]();
                                range.collapse(false);
                                range.select();
                            }
                        }
                    }, 0);
                } else {
                    if (active.focus) {
                        active.focus();
                    }
                }
            }
            return this;
        }
    }, {
        key: "_collectFieldRefs",
        value: function _collectFieldRefs(field) {
            field._refs = [];
            // DEPRECATED
            if (typeof field["point"] !== "undefined") {
                field.pointer = field["point"];
                delete field["point"];
            }
            if (!field.key && typeof field.pointer !== "string") {
                return this;
            }
            var i = void 0,
                l = void 0,
                j = void 0,
                m = void 0,
                k = void 0,
                n = void 0,
                fi = void 0,
                s = void 0;
            for (i = 0, l = this._fields.length; i < l; i++) {
                fi = this._fields[i];
                if (field === fi || !fi.depends || fi.depends.length === 0) {
                    continue;
                }
                for (j = 0, m = fi.depends.length; j < m; j++) {
                    if (fi.depends[j] instanceof Array) {
                        s = false;
                        for (k = 0, n = fi.depends[j].length; k < n; k++) {
                            if (fi.depends[j][k].key === field.key) {
                                s = true;
                                break;
                            }
                            if (typeof fi.depends[j][k].point === "string") {
                                fi.depends[j][k].pointer = fi.depends[j][k].point;
                                delete fi.depends[j][k].point;
                            }
                            if (typeof fi.depends[j][k].pointer === "string") {
                                if (fi.depends[j][k].pointer === field.pointer) {
                                    s = true;
                                    break;
                                }
                                if (fi.depends[j][k].pointer === "/" + field.key) {
                                    s = true;
                                    break;
                                }
                            }
                        }
                        if (s) {
                            field._refs.push(fi);
                        }
                        break;
                    } else {
                        if (fi.depends[j].key === field.key) {
                            field._refs.push(fi);
                            break;
                        }
                        if (typeof fi.depends[j].point === "string") {
                            fi.depends[j].pointer = fi.depends[j].point;
                            delete fi.depends[j].point;
                        }
                        if (typeof fi.depends[j].pointer === "string") {
                            if (fi.depends[j].pointer === field.pointer) {
                                field._refs.push(fi);
                                break;
                            }
                            if (fi.depends[j].pointer === "/" + field.key) {
                                field._refs.push(fi);
                                break;
                            }
                        }
                    }
                }
            }
            return this;
        }
    }, {
        key: "_compareDepend",
        value: function _compareDepend(d) {
            var v = void 0;
            if (d.key) {
                var f = this.getField(d.key);
                if (f !== null) {
                    if (!d.op && !d.tester && d.val === undefined) {
                        return true;
                    }
                    if (f._dependsIsOk === true) {
                        v = f.getVal();
                    }
                }
            } else if (typeof d.pointer === "string") {
                try {
                    v = _util.jsonPointer.get(this.getResult(), d.pointer);
                } catch (e) {
                    // undefined
                }
            } else {
                return true;
            }
            if (typeof d.tester === "function") {
                return !!d.tester(v, d);
            }
            if (d.op) {
                if (d.op === "===" && d.val === v) {
                    return true;
                }
                if (d.op === "!==" && d.val !== v) {
                    return true;
                }
                if (d.op === ">=" && d.val >= v) {
                    return true;
                }
                if (d.op === "<=" && d.val <= v) {
                    return true;
                }
                if (d.op === ">" && d.val > v) {
                    return true;
                }
                if (d.op === "<" && d.val < v) {
                    return true;
                }
                if (d.op === "in" && typeof v[d.val] !== "undefined") {
                    return true;
                }
            } else {
                if (d.val === v) {
                    return true;
                }
            }
            return false;
        }
    }, {
        key: "_checkFieldDepends",
        value: function _checkFieldDepends(field) {
            var depends = field.depends;
            if (!depends || depends.length === 0) {
                field._dependsIsOk = true;
                return true;
            }
            var result = true;
            var i = void 0,
                l = void 0,
                j = void 0,
                m = void 0,
                d = void 0,
                f = void 0,
                s = void 0;
            for (i = 0, l = depends.length; i < l; i++) {
                d = depends[i];
                if (d instanceof Array) {
                    s = false;
                    for (j = 0, m = d.length; j < m; j++) {
                        if (this._compareDepend(d[j]) === true) {
                            s = true;
                            break;
                        }
                    }
                    if (s === false) {
                        result = false;
                        break;
                    }
                } else {
                    if (this._compareDepend(d) === false) {
                        result = false;
                        break;
                    }
                }
            }
            field._dependsIsOk = result;
            return result;
        }
    }, {
        key: "_createField",
        value: function _createField(field) {
            var _this = this;

            field._dependsIsOk = !field.depends || field.depends.length === 0;
            // field container
            field.container = new _element.Element("div");
            // attributes to field container
            if (field.id) {
                field.container.writeAttribute("id", field.id);
            }
            if (field.className) {
                field.container.writeAttribute("class", field.className);
            }
            if (field.attribute) {
                field.container.writeAttribute(field.attribute);
            }
            if (field.style) {
                field.container.setStyle(field.style);
            }
            // create label
            if (this._nolabel === false) {
                field.labelElement = new _element.Element("label").insertText(field.label || "");
                new _element.Element("div", { "class": "flagrate-form-field-label" }).insert(field.labelElement).insertTo(field.container);
                // icon to label
                if (field.icon) {
                    field.labelElement.addClassName("flagrate-icon");
                    field.labelElement.setStyle({
                        backgroundImage: "url(" + field.icon + ")"
                    });
                }
            }
            // input container
            field._input = new _element.Element("div").insertTo(field.container);
            // input ready?
            if (field.input && field.input.type) {
                if (typeof field.input.type === "string") {
                    field.input.type = Form.inputType[field.input.type];
                } else if (!field.input.type.create) {
                    delete field.input;
                }
            }
            // init input
            if (field.input && field.input.type) {
                var input = field.input;
                if (!input.id) {
                    input.id = "flagrate-form-input-" + ++Form.idCounter;
                }
                if (this._nolabel === false) {
                    field.labelElement.writeAttribute("for", input.id);
                }
                input.element = input.type.create.call(input);
                new _element.Element("div", { "class": "flagrate-form-field-input" }).insert(input.element).insertTo(field._input);
                input.element.writeAttribute("id", input.id);
                // value, values is just alias.
                if (input["value"]) {
                    input.val = input["value"];
                } else if (input["values"]) {
                    input.val = input["values"];
                }
                // set the default value
                if (input.val !== undefined) {
                    input.type.setVal.call(input, input.val);
                }
                if (input.style) {
                    input.element.setStyle(input.style);
                }
                if (input.attribute) {
                    input.element.writeAttribute(input.attribute);
                }
                // toString is alias for toStr.
                if (typeof input["toString"] === "boolean" && input.toStr === undefined) {
                    input.toStr = input["toString"];
                }
                // init validator
                if (input.validators) {
                    input.validators.forEach(function (v, i) {
                        if (typeof v === "string") {
                            input.validators[i] = Form.inputValidator[v];
                        }
                    });
                } else {
                    input.validators = [];
                }
                // result block
                input._result = new _element.Element("ul", {
                    "class": "flagrate-form-field-result"
                }).insertTo(field._input);
                // etc
                if (input.isRequired === true) {
                    field.container.addClassName("flagrate-required");
                }
            }
            // misc
            if (field.element) {
                new _element.Element("div", {
                    "class": "flagrate-form-field-element"
                }).insert(field.element).insertTo(field._input);
            }
            if (field.html) {
                new _element.Element("div", {
                    "class": "flagrate-form-field-html"
                }).insert(field.html).insertTo(field._input);
            }
            if (field.text) {
                new _element.Element("p", {
                    "class": "flagrate-form-field-text"
                }).insertText(field.text).insertTo(field._input);
            }
            // field methods
            field.visible = function () {
                return field.container.parentNode !== null && field.container.parentNode === _this.element;
            };
            field.getVal = function () {
                if (!field.input) {
                    return undefined;
                }
                var result = field.input.type.getVal.call(field.input);
                if (field.input.toStr === true) {
                    result = result.toString();
                }
                if (field.input.trim === true && typeof result === "string") {
                    result = result.trim();
                }
                if (field.input.toNumber === true && typeof result !== "number") {
                    if (typeof result === "string") {
                        result = parseFloat(result);
                    } else if (result instanceof Date) {
                        result = result.getTime();
                    } else if (typeof result === "boolean") {
                        result = result === true ? 1 : 0;
                    }
                }
                if (typeof field.input.transform === "function") {
                    result = field.input.transform.call(field.input, result);
                }
                return result;
            };
            field.setVal = function (val) {
                if (!field.input) {
                    return field;
                }
                field.input.type.setVal.call(field.input, val);
                field._inputOnChange();
                return field;
            };
            field.validate = function (callback) {
                var val = field.getVal();
                var hasError = false;
                var hasWarning = false;
                field.input._result.update();
                // simple validator
                if (field.input.isRequired === true) {
                    if (val === undefined) {
                        hasError = true;
                    } else if (val === false || val === null) {
                        hasError = true;
                    } else if (typeof val === "number" && isNaN(val) === true) {
                        hasError = true;
                    } else if (val.length !== undefined && val.length === 0) {
                        hasError = true;
                    }
                }
                if (typeof field.input.min === "number") {
                    if (typeof val === "number") {
                        if (field.input.min > val) {
                            hasError = true;
                        }
                    } else if (typeof val === "string" && val !== "") {
                        if (field.input.min > parseInt(val, 10)) {
                            hasError = true;
                        }
                    } else if (val instanceof Array) {
                        if (field.input.min > val.length) {
                            hasError = true;
                        }
                    }
                }
                if (typeof field.input.max === "number") {
                    if (typeof val === "number") {
                        if (field.input.max < val) {
                            hasError = true;
                        }
                    } else if (typeof val === "string" && val !== "") {
                        if (field.input.max < parseInt(val, 10)) {
                            hasError = true;
                        }
                    } else if (val instanceof Array) {
                        if (field.input.max < val.length) {
                            hasError = true;
                        }
                    }
                }
                if (field.input.minLength && field.input.minLength > (val.length || val.toString && val.toString().length || 0) && typeof val === "string" && val !== "") {
                    hasError = true;
                }
                if (field.input.maxLength && field.input.maxLength < (val.length || val.toString && val.toString().length || 0)) {
                    hasError = true;
                }
                // validators
                var q = [];
                field.input.validators.forEach(function (v) {
                    q.push(v);
                });
                function fin() {
                    if (field.input._result.innerHTML === "") {
                        field.container.removeClassName("flagrate-has-result");
                    } else {
                        field.container.addClassName("flagrate-has-result");
                    }
                    if (hasError) {
                        field.container.removeClassName("flagrate-has-warning");
                        field.container.removeClassName("flagrate-has-success");
                        field.container.addClassName("flagrate-has-error");
                    } else if (hasWarning) {
                        field.container.removeClassName("flagrate-has-error");
                        field.container.removeClassName("flagrate-has-success");
                        field.container.addClassName("flagrate-has-warning");
                    } else {
                        field.container.removeClassName("flagrate-has-error");
                        field.container.removeClassName("flagrate-has-warning");
                        field.container.addClassName("flagrate-has-success");
                    }
                    field._hasError = hasError;
                    field._hasWarning = hasWarning;
                    if (callback) {
                        callback(!hasError);
                    }
                }
                function done(result, message) {
                    switch (result) {
                        case true:
                        case "success":
                            break;
                        case null:
                        case "warning":
                            hasWarning = true;
                            break;
                        case false:
                        case "error":
                            hasError = true;
                            break;
                    }
                    if (message) {
                        new _element.Element("li").insertText(message).insertTo(field.input._result);
                    }
                    run();
                }
                function run() {
                    if (q.length === 0 || hasError === true) {
                        return fin();
                    }
                    var v = q.shift();
                    if (typeof v === "function") {
                        v.call(field.input, val, done);
                    } else if (typeof val === "string" && val !== "") {
                        if (v.regexp.test(val)) {
                            done(true, v.success);
                        } else {
                            done(false, v.error);
                        }
                    } else {
                        done(true);
                    }
                }
                run();
            };
            field._checkRefs = function () {
                var rerend = false;
                for (var i = 0, l = field._refs.length, refField; i < l; i++) {
                    refField = field._refs[i];
                    if (refField._dependsIsOk !== _this._checkFieldDepends(refField)) {
                        refField._checkRefs();
                        rerend = true;
                    }
                }
                if (rerend === true) {
                    _this._requestRender();
                }
            };
            field._inputOnChange = function () {
                // validation
                field.validate();
                // dependency
                field._checkRefs();
            };
            // listen change event
            if (field.input && field.input.type) {
                var changeEvents = field.input.type.changeEvents || ["change"];
                changeEvents.forEach(function (eventName) {
                    field.input.element.addEventListener(eventName, field._inputOnChange);
                });
            }
            return this;
        }
    }]);

    return Form;
}();

Form.idCounter = 0;
/*?
    flagrate.Form.inputValidator -> Object

    #### Built-in validators

    * numeric
    * alphanumeric

    #### Basic validator

        // success and error messages are optional
        { regexp: /RegExp/, success: "String", error: "String" }
        // warning state is not available in this way, see Advanced.

    #### Advanced validator

        // Sync or Async validation
        function (input, done) { done(result, message); }// message is optional

        // Examples
        function (input, done) { done(true); }// success
        function (input, done) { done(null); }// warning
        function (input, done) { done(false); }// error
        function (input, done) { done("success"); }// success
        function (input, done) { done("warning"); }// warning
        function (input, done) { done("error"); }// error
        function (input, done) { done(true, "..."); }// success with message
        function (input, done) { done(null, "..."); }// warning with message
        function (input, done) { done(false, "..."); }// error with message

    #### Example: adding error message to built-in validators

        flagrate.Form.inputValidator.numeric.error = "Please enter a numbers.";
        flagrate.Form.inputValidator.alphanumeric.error = "Please enter a alphanumeric.";

    #### Example: add the custom validator to Flagrate (to create plugin)

        flagrate.Form.inputValidator.hostname = {
            regexp: /^[a-z0-9]+(-[a-z0-9]+)*(\.([a-z0-9]+(-[a-z0-9]+)*))*$/i,
            error: "Please enter a valid hostname string."
        };
**/
Form.inputValidator = {
    numeric: {
        regexp: /^[0-9]+$/
    },
    alphanumeric: {
        regexp: /^[a-z0-9]+$/i
    }
};
/*?
    flagrate.Form.inputType -> Object

    #### Built-in input types

    * [text](#text-string-) -> `String`
    * [password](#password-string-) -> `String`
    * [textarea](#textarea-string-) -> `String`
    * [number](#number-number-) -> `Number`
    * [combobox](#combobox-string-) -> `String`
    * [checkbox](#checkbox-boolean-) -> `Boolean`
    * [checkboxes](#checkboxes-array-) -> `Array`
    * [switch](#switch-boolean-) -> `Boolean`
    * [radios](#radios-any-) -> `any`
    * [select](#select-any-array-) -> `any`|`Array`
    * [file](#file-file-) -> `File`
    * [files](#files-filelist-) -> `FileList`
**/
Form.inputType = {
    /*?
        #### text -> `String`
        most basic single-line text input. (uses flagrate.TextInput)
          * `placeholder` (String):
        * `icon`        (String):
        * `maxLength`   (Number):
    **/
    text: {
        changeEvents: ["change", "keyup"],
        create: function create() {
            // return to define this.element
            return new _textInput.TextInput({
                placeholder: this.placeholder,
                icon: this.icon,
                attribute: {
                    maxlength: this.maxLength
                }
            });
        },
        getVal: function getVal() {
            return this.element.getValue();
        },
        setVal: function setVal(value) {
            this.element.setValue(value);
        },
        enable: function enable() {
            this.element.enable();
        },
        disable: function disable() {
            this.element.disable();
        }
    },
    /*?
        #### password -> `String`
        password input. Almost the same to [text](#text).
    **/
    password: {
        changeEvents: ["change", "keyup"],
        create: function create() {
            return new _textInput.TextInput({
                placeholder: this.placeholder,
                icon: this.icon,
                attribute: {
                    type: "password",
                    maxlength: this.maxLength
                }
            });
        },
        getVal: function getVal() {
            return this.element.getValue();
        },
        setVal: function setVal(value) {
            this.element.setValue(value);
        },
        enable: function enable() {
            this.element.enable();
        },
        disable: function disable() {
            this.element.disable();
        }
    },
    /*?
        #### textarea -> `String`
        textarea input. (uses flagrate.TextArea)
          * `placeholder` (String):
        * `icon`        (String):
        * `maxLength`   (Number):
    **/
    textarea: {
        changeEvents: ["change", "keyup"],
        create: function create() {
            return new _textArea.TextArea({
                placeholder: this.placeholder,
                icon: this.icon,
                attribute: {
                    maxlength: this.maxLength
                }
            });
        },
        getVal: function getVal() {
            return this.element.getValue();
        },
        setVal: function setVal(value) {
            this.element.setValue(value);
        },
        enable: function enable() {
            this.element.enable();
        },
        disable: function disable() {
            this.element.disable();
        }
    },
    /*?
        #### number -> `Number`
        number input. (uses flagrate.TextInput)
          * `placeholder` (String):
        * `icon`        (String):
        * `min`         (Number):
        * `max`         (Number):
        * `maxLength`   (Number):
    **/
    number: {
        changeEvents: ["change", "keyup"],
        create: function create() {
            return new _textInput.TextInput({
                placeholder: this.placeholder,
                icon: this.icon,
                attribute: {
                    type: "number",
                    inputmode: "numeric",
                    min: this.min,
                    max: this.max,
                    maxlength: this.maxLength
                }
            });
        },
        getVal: function getVal() {
            return parseFloat(this.element.getValue());
        },
        setVal: function setVal(value) {
            this.element.setValue(value);
        },
        enable: function enable() {
            this.element.enable();
        },
        disable: function disable() {
            this.element.disable();
        }
    },
    /*?
        #### combobox -> `String`
        combobox input. (uses flagrate.ComboBox)
          * `placeholder` (String):
        * `icon`        (String):
        * `maxLength`   (Number):
        * `items`       (Array): of String values.
    **/
    combobox: {
        changeEvents: ["change", "keyup"],
        create: function create() {
            return new _comboBox.ComboBox({
                placeholder: this.placeholder,
                icon: this.icon,
                items: this.items,
                attribute: {
                    maxlength: this.maxLength
                }
            });
        },
        getVal: function getVal() {
            return this.element.getValue();
        },
        setVal: function setVal(value) {
            this.element.setValue(value);
        },
        enable: function enable() {
            this.element.enable();
        },
        disable: function disable() {
            this.element.disable();
        }
    },
    /*?
        #### checkbox -> `Boolean`
        Checkbox input. (uses flagrate.Checkbox)
          * `label`       (String):
        * `labelHTML`   (String):
        * `icon`        (String):
    **/
    checkbox: {
        create: function create() {
            return new _checkbox.Checkbox({
                icon: this.icon,
                label: this.label,
                labelHTML: this.labelHTML
            });
        },
        getVal: function getVal() {
            return this.element.isChecked();
        },
        setVal: function setVal(value) {
            if (value) {
                this.element.check();
            } else {
                this.element.uncheck();
            }
        },
        enable: function enable() {
            this.element.enable();
        },
        disable: function disable() {
            this.element.disable();
        }
    },
    /*?
        #### checkboxes -> `Array`
        Checkboxes input. (uses flagrate.Checkboxes)
          * `items` (Array):
    **/
    checkboxes: {
        create: function create() {
            return new _checkboxes.Checkboxes({
                items: this.items
            });
        },
        getVal: function getVal() {
            return this.element.getValues();
        },
        setVal: function setVal(values) {
            this.element.setValues(values);
        },
        enable: function enable() {
            this.element.enable();
        },
        disable: function disable() {
            this.element.disable();
        }
    },
    /*?
        #### switch -> `Boolean`
        Switch input. (uses flagrate.Switch)
    **/
    "switch": {
        create: function create() {
            return new _switch.Switch();
        },
        getVal: function getVal() {
            return this.element.isOn();
        },
        setVal: function setVal(value) {
            if (value) {
                this.element.switchOn();
            } else {
                this.element.switchOff();
            }
        },
        enable: function enable() {
            this.element.enable();
        },
        disable: function disable() {
            this.element.disable();
        }
    },
    /*?
        #### radios -> `any`
        Radio buttons input. (uses flagrate.Radios)
          * `items` (Array):
    **/
    radios: {
        create: function create() {
            return new _radios.Radios({
                items: this.items
            });
        },
        getVal: function getVal() {
            return this.element.getValue();
        },
        setVal: function setVal(value) {
            this.element.setValue(value);
        },
        enable: function enable() {
            this.element.enable();
        },
        disable: function disable() {
            this.element.disable();
        }
    },
    /*?
        #### select -> `any`|`array`
        Select input. (uses flagrate.Select)
          * `items` (Array):
        * `listView` (Boolean; default `false`):
        * `multiple` (Boolean; default `false`):
        * `max` (Number; default `-1`):
        * `selectedIndex` (Number):
        * `selectedIndexes` (Array): of Number
    **/
    select: {
        create: function create() {
            return new _select.Select({
                items: this.items,
                listView: this.listView,
                multiple: this.multiple,
                max: this.max,
                selectedIndex: this.selectedIndex,
                selectedIndexes: this.selectedIndexes
            });
        },
        getVal: function getVal() {
            return this.element.multiple === true ? this.element.getValues() : this.element.getValue();
        },
        setVal: function setVal(val) {
            if (this.element.multiple === false) {
                val = [val];
            } else {
                this.element.deselectAll();
            }
            for (var i = 0, l = val.length, m = this.element.items.length; i < l; i++) {
                for (var j = 0; j < m; j++) {
                    if (val[i] === this.element.items[j].value) {
                        this.element.select(j);
                        break;
                    }
                }
            }
        },
        enable: function enable() {
            this.element.enable();
        },
        disable: function disable() {
            this.element.disable();
        }
    },
    /*?
        #### file -> `File`
        File input for [File API](http://www.w3.org/TR/file-upload/)
          * `accept` (String): pass to `accept` attribute value.
        * `acceptTypes` (Array): Array of MIME type string.
    **/
    file: {
        create: function create() {
            return new _element.Element("input", {
                type: "file",
                accept: this.accept || (this.acceptTypes ? this.acceptTypes.join(",") : undefined)
            });
        },
        getVal: function getVal() {
            return this.element.files[0];
        },
        setVal: function setVal(file) {
            this.element.files[0] = file;
        },
        enable: function enable() {
            this.element.writeAttribute("disabled", false);
        },
        disable: function disable() {
            this.element.writeAttribute("disabled", true);
        }
    },
    /*?
        #### files -> `FileList`
        File input for [File API](http://www.w3.org/TR/file-upload/)
          * `accept` (String): pass to `accept` attribute value.
        * `acceptTypes` (Array): Array of MIME type string.
    **/
    files: {
        create: function create() {
            return new _element.Element("input", {
                type: "file",
                accept: this.accept || (this.acceptTypes ? this.acceptTypes.join(",") : undefined),
                multiple: true
            });
        },
        getVal: function getVal() {
            return this.element.files;
        },
        setVal: function setVal(files) {
            this.element.files = files;
        },
        enable: function enable() {
            this.element.writeAttribute("disabled", false);
        },
        disable: function disable() {
            this.element.writeAttribute("disabled", true);
        }
    }
};
function createForm(option) {
    return new Form(option);
}



},{"./checkbox":4,"./checkboxes":5,"./combo-box":6,"./element":8,"./radios":18,"./select":20,"./switch":22,"./text-area":24,"./text-input":25,"./util":29}],10:[function(require,module,exports){
/*
   Copyright 2016 Webnium

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.Grid = undefined;

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

exports.createGrid = createGrid;

var _element = require("./element");

var _button = require("./button");

var _checkbox = require("./checkbox");

var _toolbar = require("./toolbar");

var _contextMenu = require("./context-menu");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/*?
    flagrate.createGrid(option)
    new flagrate.Grid(option)
    - option (Object) - configuration for the grid.

    Create and initialize the grid.

    #### option

    * `id`                       (String): `id` attribute of container.
    * `className`                (String):
    * `attribute`                (Object):
    * `style`                    (Object): (using flagrate.Element.setStyle)
    * `cols`                     (Array): of col object.
    * `rows`                     (Array): of row object.
    * `pagination`               (Boolean; default `false`):
    * `numberOfRowsPerPage`      (Number; default `20`): pagination.
    * `fill`                     (Boolean; default `false`):
    * `headless`                 (Boolean; default `false`):
    * `multiSelect`              (Boolean; default `false`):
    * `disableCheckbox`          (Boolean; default `false`):
    * `disableSelect`            (Boolean; default `false`):
    * `disableSort`              (Boolean; default `false`):
    * `disableFilter`            (Boolean; default `false`):
    * `disableResize`            (Boolean; default `false`):
    * `onSelect`                 (Function):
    * `onDeselect`               (Function):
    * `onClick`                  (Function):
    * `onDblClick`               (Function):
    * `onRender`                 (Function):
    * `onRendered`               (Function):
    * `postProcessOfRow`         (Function):

    #### col

    * `id`                       (String): `id` attribute of `th`
    * `className`                (String):
    * `attribute`                (Object):
    * `style`                    (Object): styling of `th` (using flagrate.Element.setStyle)
    * `key`                      (String; required):
    * `label`                    (String; default `""`):
    * `icon`                     (String):
    * `align`                    (String):
    * `width`                    (Number):
    * `disableSort`              (Boolean; default `false`):
    * `disableResize`            (Boolean; default `false`):

    #### row

    * `id`                       (String): `id` attribute of `tr`
    * `className`                (String):
    * `attribute`                (Object):
    * `style`                    (Object): styling of `tr` (using flagrate.Element.setStyle)
    * `cell`                     (Object|String; default `{}`): of cell object. or String for text.
    * `menuItems`                (Array): of Menu items.
    * `isSelected`               (Boolean):
    * `onSelect`                 (Function):
    * `onDeselect`               (Function):
    * `onClick`                  (Function):
    * `onDblClick`               (Function):
    * `postProcess`              (Function):

    #### cell

    * `id`                       (String): `id` attribute of `td`
    * `className`                (String):
    * `attribute`                (Object):
    * `style`                    (Object): styling of `td` (using flagrate.Element.setStyle)
    * `text`                     (String):
    * `html`                     (String):
    * `element`                  (Element):
    * `icon`                     (String):
    * `sortAlt`                  (Number|String):
    * `onClick`                  (Function):
    * `onDblClick`               (Function):
    * `postProcess`              (Function):
**/
var Grid = exports.Grid = function () {
    function Grid() {
        var _opt = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

        _classCallCheck(this, Grid);

        this._opt = _opt;
        this._cols = [];
        this._rows = [];
        this._pagePosition = 0;
        this._selectedRows = [];
        this._sortedByKey = null;
        this._sortedByAsc = null;
        this.element = new _element.Element("div", { "class": "flagrate flagrate-grid" });
        this._head = new _element.Element("div", { "class": "flagrate-grid-head" }).insertTo(this.element);
        this._thead = new _element.Element("thead").insertTo(new _element.Element("table").insertTo(this._head));
        this._tr = new _element.Element("tr").insertTo(this._thead);
        this._body = new _element.Element("div", { "class": "flagrate-grid-body" }).insertTo(this.element);
        this._tbody = new _element.Element("tbody").insertTo(new _element.Element("table").insertTo(this._body));
        this._style = new _element.Element("style").insertTo(this.element);
        this._id = "flagrate-grid-" + (++Grid.idCounter).toString(10);
        if (_opt.id) {
            this.element.writeAttribute("id", _opt.id);
        }
        if (_opt.className) {
            this.element.addClassName(_opt.className);
        }
        if (_opt.attribute) {
            this.element.writeAttribute(_opt.attribute);
        }
        if (_opt.style) {
            this.element.setStyle(_opt.style);
        }
        if (_opt.cols) {
            this._cols = _opt.cols;
        }
        if (_opt.rows) {
            this._rows = _opt.rows;
        }
        if (_opt.colMinWidth === undefined) {
            _opt.colMinWidth = 16;
        }
        if (_opt.pagination === undefined) {
            _opt.pagination = false;
        }
        if (!_opt.numberOfRowsPerPage) {
            _opt.numberOfRowsPerPage = 20;
        }
        if (_opt.fill === undefined) {
            _opt.fill = false;
        }
        if (_opt.headless === true) {
            _opt.disableSort = true;
            _opt.disableResize = true;
            this.element.addClassName("flagrate-grid-headless");
        }
        if (_opt.multiSelect === undefined) {
            _opt.multiSelect = false;
        }
        if (_opt.disableCheckbox === undefined) {
            _opt.disableCheckbox = false;
        }
        if (_opt.disableSelect === undefined) {
            _opt.disableSelect = false;
        }
        if (_opt.disableSort === undefined) {
            _opt.disableSort = false;
        }
        /* if (_opt.disableFilter === undefined) {
            _opt.disableFilter = false;
        } */
        if (_opt.disableResize === undefined) {
            _opt.disableResize = false;
        }
        this.onSelect = _opt.onSelect;
        this.onDeselect = _opt.onDeselect;
        this.onClick = _opt.onClick;
        this.onDblClick = _opt.onDblClick;
        this.onRender = _opt.onRender;
        this.onRendered = _opt.onRendered;
        this.postProcessOfRow = _opt.postProcessOfRow;
        this._create()._requestRender();
    }

    _createClass(Grid, [{
        key: "insertTo",
        value: function insertTo(element, pos) {
            return this.element.insertTo(element, pos) && this;
        }
    }, {
        key: "on",
        value: function on(eventType, listener, useCapture) {
            return this.element.on(eventType, listener, useCapture) && this;
        }
    }, {
        key: "off",
        value: function off(eventType, listener, useCapture) {
            return this.element.off(eventType, listener, useCapture) && this;
        }
    }, {
        key: "select",
        value: function select(a) {
            var _this = this;

            var rows = void 0;
            if (Array.isArray(a) === true) {
                rows = a;
            } else {
                rows = [];
                for (var i = 0, l = arguments.length; i < l; i++) {
                    rows.push(arguments[i]);
                }
            }
            if (this._opt.multiSelect === false) {
                this.deselectAll();
            }

            var _loop = function _loop(_i, _l) {
                var row = rows[_i];
                if (typeof row === "number") {
                    row = _this._rows[row];
                }
                row.isSelected = true;
                if (row._tr && row._tr.hasClassName("flagrate-grid-row-selected") === true) {
                    return "continue";
                }
                _this._selectedRows.push(row);
                if (row._tr) {
                    row._tr.addClassName("flagrate-grid-row-selected");
                }
                if (row._checkbox) {
                    row._checkbox.check();
                    setTimeout(function () {
                        if (row.isSelected === true) {
                            row._checkbox.check();
                        }
                    }, 0);
                }
                if (row.onSelect) {
                    row.onSelect.call(_this, window.event, row, _this);
                }
                if (_this.onSelect) {
                    _this.onSelect(window.event, row, _this);
                }
            };

            for (var _i = 0, _l = rows.length; _i < _l; _i++) {
                var _ret = _loop(_i, _l);

                if (_ret === "continue") continue;
            }
            if (this._selectedRows.length !== 0 && this._checkbox) {
                this._checkbox.check();
            }
            this.element.fire("change", { targetGrid: this });
            return this;
        }
    }, {
        key: "deselect",
        value: function deselect(a) {
            var _this2 = this;

            var rows = void 0;
            if (Array.isArray(a)) {
                rows = a;
            } else {
                rows = [];
                for (var i = 0, l = arguments.length; i < l; i++) {
                    rows.push(arguments[i]);
                }
            }

            var _loop2 = function _loop2(_i2, _l2) {
                var row = rows[_i2];
                if (typeof row === "number") {
                    row = _this2._rows[row];
                }
                row.isSelected = false;
                if (row._tr && row._tr.hasClassName("flagrate-grid-row-selected") === false) {
                    return "continue";
                }
                _this2._selectedRows.splice(_this2._selectedRows.indexOf(row), 1);
                if (row._tr) {
                    row._tr.removeClassName("flagrate-grid-row-selected");
                }
                if (row._checkbox) {
                    row._checkbox.uncheck();
                    setTimeout(function () {
                        if (row.isSelected === false) {
                            row._checkbox.uncheck();
                        }
                    }, 0);
                }
                if (row.onDeselect) {
                    row.onDeselect.call(_this2, window.event, row, _this2);
                }
                if (_this2.onDeselect) {
                    _this2.onDeselect(window.event, row, _this2);
                }
            };

            for (var _i2 = 0, _l2 = rows.length; _i2 < _l2; _i2++) {
                var _ret2 = _loop2(_i2, _l2);

                if (_ret2 === "continue") continue;
            }
            if (this._selectedRows.length === 0 && this._checkbox) {
                this._checkbox.uncheck();
            }
            this.element.fire("change", { targetGrid: this });
            return this;
        }
        /** select all rows */

    }, {
        key: "selectAll",
        value: function selectAll() {
            return this.select(this._rows);
        }
        /** deselect all rows */

    }, {
        key: "deselectAll",
        value: function deselectAll() {
            return this.deselect(this._rows);
        }
        /** get selected rows */

    }, {
        key: "getSelectedRows",
        value: function getSelectedRows() {
            return this._selectedRows;
        }
        /** get values of selected rows */

    }, {
        key: "getValues",
        value: function getValues() {
            return this._selectedRows.map(function (row) {
                return getValue.call(row);
            });
        }
        /** sort rows by key */

    }, {
        key: "sort",
        value: function sort(key, isAsc) {
            if (isAsc === undefined) {
                isAsc = true;
            }
            this._rows.sort(function (a, b) {
                var A = 0;
                var B = 0;
                var cellA = a.cell[key];
                var cellB = b.cell[key];
                if ((typeof cellA === "undefined" ? "undefined" : _typeof(cellA)) === "object") {
                    A = cellA.sortAlt !== undefined ? cellA.sortAlt : cellA.text || cellA.html || cellA.element && cellA.element.innerHTML || cellA._div && cellA._div.innerHTML || 0;
                } else {
                    A = cellA || 0;
                }
                if ((typeof cellB === "undefined" ? "undefined" : _typeof(cellB)) === "object") {
                    B = cellB.sortAlt !== undefined ? cellB.sortAlt : cellB.text || cellB.html || cellB.element && cellB.element.innerHTML || cellB._div && cellB._div.innerHTML || 0;
                } else {
                    B = cellB || 0;
                }
                return A === B ? 0 : A > B ? 1 : -1;
            });
            if (isAsc === false) {
                this._rows.reverse();
            }
            for (var i = 0, l = this._cols.length; i < l; i++) {
                if (this._cols[i].key === key) {
                    if (isAsc) {
                        this._cols[i]._th.addClassName("flagrate-grid-col-sorted-asc");
                        this._cols[i]._th.removeClassName("flagrate-grid-col-sorted-desc");
                    } else {
                        this._cols[i]._th.addClassName("flagrate-grid-col-sorted-desc");
                        this._cols[i]._th.removeClassName("flagrate-grid-col-sorted-asc");
                    }
                    this._cols[i].isSorted = true;
                    this._cols[i].isAsc = isAsc;
                    this._sortedByKey = key;
                    this._sortedByAsc = isAsc;
                } else {
                    if (this._cols[i].isSorted) {
                        this._cols[i]._th.removeClassName("flagrate-grid-col-sorted-asc").removeClassName("flagrate-grid-col-sorted-desc");
                    }
                    this._cols[i].isSorted = false;
                    this._cols[i].isAsc = null;
                }
            }
            this._requestRender();
            return this;
        }
    }, {
        key: "unshift",
        value: function unshift(r) {
            if (Array.isArray(r) === true) {
                for (var i = 0, l = r.length; i < l; i++) {
                    this._rows.unshift(r[i]);
                }
            } else {
                this._rows.unshift(r);
            }
            if (this._sortedByKey === null) {
                this._requestRender();
            } else {
                this.sort(this._sortedByKey, this._sortedByAsc);
            }
            return this._rows.length;
        }
    }, {
        key: "push",
        value: function push(r) {
            if (Array.isArray(r) === true) {
                for (var i = 0, l = r.length; i < l; i++) {
                    this._rows.push(r[i]);
                }
            } else {
                this._rows.push(r);
            }
            if (this._sortedByKey === null) {
                this._requestRender();
            } else {
                this.sort(this._sortedByKey, this._sortedByAsc);
            }
            return this._rows.length;
        }
    }, {
        key: "shift",
        value: function shift(c) {
            var count = c || 1;
            var removes = [];
            for (var i = 0, l = this._rows.length; i < l && i < count; i++) {
                removes.push(this._rows.shift());
            }
            this._requestRender();
            return !c ? removes[0] : removes;
        }
    }, {
        key: "pop",
        value: function pop(c) {
            var count = c || 1;
            var removes = [];
            for (var i = 0, l = this._rows.length; i < l && i < count; i++) {
                removes.push(this._rows.pop());
            }
            this._requestRender();
            return !c ? removes[0] : removes;
        }
    }, {
        key: "splice",
        value: function splice(index, c, r) {
            c = typeof c === "undefined" ? this._rows.length - index : c;
            var removes = this._rows.splice(index, c);
            if (r) {
                if (r instanceof Array === false) {
                    r = [r];
                }
                for (var i = 0, l = r.length; i < l; i++) {
                    this._rows.splice(index + i, 0, r[i]);
                }
            }
            if (this._sortedByKey === null) {
                this._requestRender();
            } else {
                this.sort(this._sortedByKey, this._sortedByAsc);
            }
            return removes;
        }
    }, {
        key: "indexOf",
        value: function indexOf(row, fromIndex) {
            return this._rows.indexOf(row, fromIndex);
        }
    }, {
        key: "removeRow",
        value: function removeRow(r) {
            var removes = [];
            var bulk = true;
            if (r instanceof Array === false) {
                bulk = false;
                r = [r];
            }
            for (var i = 0, l = r.length; i < l; i++) {
                var index = this.indexOf(r[i]);
                if (index !== -1) {
                    removes.push(this.splice(index, 1));
                }
            }
            return bulk ? removes : removes[0];
        }
    }, {
        key: "disable",
        value: function disable() {
            this.element.addClassName("flagrate-disabled");
            return this;
        }
    }, {
        key: "enable",
        value: function enable() {
            this.element.removeClassName("flagrate-disabled");
            return this;
        }
    }, {
        key: "isEnabled",
        value: function isEnabled() {
            return !this.element.hasClassName("flagrate-disabled");
        }
    }, {
        key: "_create",
        value: function _create() {
            var _this3 = this;

            if (this._opt.disableCheckbox === false && this._opt.disableSelect === false && this._opt.multiSelect === true) {
                this._checkbox = new _checkbox.Checkbox({
                    onCheck: this.selectAll.bind(this),
                    onUncheck: this.deselectAll.bind(this)
                }).insertTo(new _element.Element("th", { "class": "flagrate-grid-cell-checkbox" }).insertTo(this._tr));
            }
            for (var i = 0, l = this._cols.length; i < l; i++) {
                var col = this._cols[i];
                col._id = this._id + "-col-" + col.key;
                col._th = new _element.Element("th").insertTo(this._tr);
                if (col.id) {
                    col._th.writeAttribute("id", col.id);
                }
                if (col.className) {
                    col._th.writeAttribute("class", col.className);
                }
                if (col.attribute) {
                    col._th.writeAttribute(col.attribute);
                }
                if (col.style) {
                    col._th.setStyle(col.style);
                }
                col._th.addClassName(col._id);
                var width = !!col.width ? col.width.toString(10) + "px" : "auto";
                this._style.insertText("." + col._id + "{width:" + width + "}");
                if (col.align) {
                    col._th.style.textAlign = col.align;
                }
                col._div = new _element.Element().insertTo(col._th);
                if (col.label) {
                    col._div.updateText(col.label);
                }
                if (col.icon) {
                    col._div.addClassName("flagrate-icon");
                    col._div.setStyle({
                        backgroundImage: "url(" + col.icon + ")"
                    });
                }
                if (this._opt.disableResize === false && !col.disableResize) {
                    col._resizeHandle = new _element.Element("div", {
                        "class": "flagrate-grid-col-resize-handle"
                    }).insertTo(this.element);
                    col._resizeHandle.onmousedown = this._createResizeHandleOnMousedownHandler(col);
                }
                if (this._opt.disableSort === false && !col.disableSort) {
                    col._th.addClassName("flagrate-grid-col-sortable");
                    col._th.onclick = this._createColOnClickHandler(col);
                }
            }
            this._lastCol = new _element.Element("th", { "class": this._id + "-col-last" }).insertTo(this._tr);
            this._style.insertText("." + this._id + "-col-last:after{right:0}");
            // pagination (testing)
            if (this._opt.pagination) {
                this.element.addClassName("flagrate-grid-pagination");
                // pager container
                this._pager = new _toolbar.Toolbar({
                    className: "flagrate-grid-pager",
                    items: [{
                        key: "rn",
                        element: new _element.Element("span").insertText("-")
                    }, {
                        key: "first",
                        element: new _button.Button({
                            className: "flagrate-grid-pager-first",
                            onSelect: function onSelect() {
                                _this3._pagePosition = 0;
                                _this3._requestRender();
                            }
                        })
                    }, {
                        key: "prev",
                        element: new _button.Button({
                            className: "flagrate-grid-pager-prev",
                            onSelect: function onSelect() {
                                --_this3._pagePosition;
                                _this3._requestRender();
                            }
                        })
                    }, {
                        key: "num",
                        element: new _element.Element("span", { "class": "flagrate-grid-pager-num" }).insertText("-")
                    }, {
                        key: "next",
                        element: new _button.Button({
                            className: "flagrate-grid-pager-next",
                            onSelect: function onSelect() {
                                ++_this3._pagePosition;
                                _this3._requestRender();
                            }
                        })
                    }, {
                        key: "last",
                        element: new _button.Button({
                            className: "flagrate-grid-pager-last",
                            onSelect: function onSelect() {
                                _this3._pagePosition = Math.floor(_this3._rows.length / _this3._opt.numberOfRowsPerPage);
                                _this3._requestRender();
                            }
                        })
                    }]
                }).insertTo(this.element);
            }
            if (this._opt.fill) {
                this.element.addClassName("flagrate-grid-fill");
                this._body.onscroll = this._createBodyOnScrollHandler();
            } else {
                this.element.onscroll = this._createOnScrollHandler();
            }
            if (this._opt.disableResize === false) {
                this._layoutUpdater();
            }
            return this;
        }
    }, {
        key: "_layoutUpdater",
        value: function _layoutUpdater() {
            var _this4 = this;

            if (this._layoutInterval) {
                clearInterval(this._layoutInterval);
            }
            this._layoutInterval = setInterval(function () {
                if (_this4.element.exists() === false) {
                    clearInterval(_this4._layoutInterval);
                    return;
                }
                _this4._requestUpdateLayout();
            }, 1000);
        }
    }, {
        key: "_requestUpdateLayout",
        value: function _requestUpdateLayout() {
            var _this5 = this;

            if (this._layoutWidth === this.element.clientWidth) {
                return;
            }
            if (this._layoutTimer) {
                clearTimeout(this._layoutTimer);
            }
            this._layoutTimer = setTimeout(function () {
                _this5._layoutWidth = _this5.element.clientWidth;
                _this5._updateLayoutOfCols();
                _this5._updatePositionOfResizeHandles();
            }, 0);
        }
    }, {
        key: "_requestRender",
        value: function _requestRender() {
            if (this._renderTimer) {
                clearTimeout(this._renderTimer);
            }
            this._renderTimer = setTimeout(this._render.bind(this), 0);
            return this;
        }
    }, {
        key: "_render",
        value: function _render() {
            if (!!this.onRender && this.onRender(this) === false) {
                return this;
            }
            var isCheckable = this._opt.disableCheckbox === false && this._opt.disableSelect === false && this._opt.multiSelect === true;
            var i = void 0,
                j = void 0,
                row = void 0,
                col = void 0,
                cell = void 0,
                pl = void 0,
                pages = void 0,
                from = void 0,
                to = void 0;
            var rl = this._rows.length;
            var cl = this._cols.length;
            if (this._opt.pagination) {
                pl = 0;
                pages = Math.ceil(rl / this._opt.numberOfRowsPerPage);
                if (pages <= this._pagePosition) {
                    this._pagePosition = pages - 1;
                }
                if (this._pagePosition <= 0) {
                    this._pagePosition = 0;
                }
                from = this._pagePosition * this._opt.numberOfRowsPerPage;
                to = from + this._opt.numberOfRowsPerPage;
            }
            this._tbody.update();
            for (i = 0; i < rl; i++) {
                if (this._opt.pagination) {
                    if (i < from) {
                        continue;
                    }
                    if (i >= to) {
                        break;
                    }
                    ++pl;
                }
                row = this._rows[i];
                if (row._tr) {
                    row._tr.insertTo(this._tbody);
                    continue;
                }
                // init row
                row._grid = this;
                row._tr = new _element.Element("tr").insertTo(this._tbody);
                if (row.id) {
                    row._tr.id = row.id;
                }
                if (row.className) {
                    row._tr.className = row.className;
                }
                if (row.attribute) {
                    row._tr.writeAttribute(row.attribute);
                }
                if (row.style) {
                    row._tr.setStyle(row.style);
                }
                if (row.onClick || this.onClick || this._opt.disableSelect === false) {
                    if (this._opt.disableSelect === false) {
                        row._tr.addClassName("flagrate-grid-row-selectable");
                    }
                    if (row.onClick || this.onClick) {
                        row._tr.addClassName("flagrate-grid-row-clickable");
                    }
                    row._tr.onclick = this._createRowOnClickHandler(row);
                }
                if (row.onDblClick || this.onDblClick) {
                    row._tr.ondblclick = this._createRowOnDblClickHandler(row);
                }
                if (isCheckable && !row._checkbox) {
                    row._checkbox = new _checkbox.Checkbox({
                        onChange: this._createRowOnCheckHandler(row)
                    }).insertTo(new _element.Element("td", { "class": "flagrate-grid-cell-checkbox" }).insertTo(row._tr));
                }
                if (row.isSelected === true) {
                    this.select(row);
                }
                for (j = 0; j < cl; j++) {
                    col = this._cols[j];
                    cell = row.cell[col.key] === undefined ? row.cell[col.key] = {} : row.cell[col.key];
                    if (typeof cell === "string" || typeof cell === "number") {
                        cell = row.cell[col.key] = { text: cell };
                    }
                    if (cell._td) {
                        cell._td.insertTo(row._tr);
                        continue;
                    }
                    // init cell
                    cell._td = new _element.Element("td").insertTo(row._tr);
                    if (cell.id) {
                        cell._td.id = cell.id;
                    }
                    if (cell.className) {
                        cell._td.className = cell.className;
                    }
                    if (cell.attribute) {
                        cell._td.writeAttribute(cell.attribute);
                    }
                    if (cell.style) {
                        cell._td.setStyle(cell.style);
                    }
                    if (col.align) {
                        cell._td.style.textAlign = col.align;
                    }
                    cell._td.addClassName(col._id);
                    // init cell content
                    cell._div = new _element.Element().insertTo(cell._td);
                    if (cell.text !== undefined) {
                        cell._div.updateText(cell.text);
                    }
                    if (cell.html) {
                        cell._div.update(cell.html);
                    }
                    if (cell.element) {
                        cell._div.update(cell.element);
                    }
                    if (cell.icon) {
                        cell._div.addClassName("flagrate-icon");
                        cell._div.style.backgroundImage = "url(" + cell.icon + ")";
                    }
                    if (cell.onClick) {
                        cell._td.addClassName("flagrate-grid-cell-clickable");
                        cell._td.onclick = this._createCellOnClickHandler(cell);
                    }
                    if (cell.onDblClick) {
                        cell._td.ondblclick = this._createCellOnDblClickHandler(cell);
                    }
                    // redefine props
                    Object.defineProperties(cell, cellProps);
                    // post-processing
                    if (cell.postProcess) {
                        cell.postProcess.call(this, cell._td, cell, this);
                    }
                }
                if (!row._last) {
                    row._last = new _element.Element("td", { "class": this._id + "-col-last" });
                }
                row._last.insertTo(row._tr);
                // menu
                if (row.menuItems) {
                    this._updateRowMenu(row, row.menuItems);
                }
                // redefine props
                Object.defineProperties(row, rowProps);
                // post-processing
                if (row.postProcess) {
                    row.postProcess.call(this, row._tr, row, this);
                }
                if (this.postProcessOfRow) {
                    this.postProcessOfRow(row._tr, row, this);
                }
            } //<--for
            if (this._opt.pagination) {
                this._pager.getElementByKey("rn").updateText(from + 1 + " - " + (from + pl) + " / " + rl);
                this._pager.getElementByKey("num").updateText(this._pagePosition + 1 + " / " + pages);
            }
            if (this._opt.disableResize === false) {
                if (this._opt.fill) {
                    this._head.style.right = this._body.offsetWidth - this._body.clientWidth + "px";
                    this._head.scrollLeft = this._body.scrollLeft;
                }
                this._requestUpdateLayout();
            }
            if (this.onRendered) {
                this.onRendered(this);
            }
            return this;
        }
    }, {
        key: "_updateRowMenu",
        value: function _updateRowMenu(row, items) {
            if (row._menu) {
                row._menu.remove();
                delete row._menu;
            }
            if (items && items.length !== 0) {
                row._last.addClassName("flagrate-grid-cell-menu");
                row._menu = new _contextMenu.ContextMenu({
                    target: row._tr,
                    items: items
                });
                if (!row._last.onclick) {
                    row._last.onclick = row._grid._createLastRowOnClickHandler(row);
                }
            } else {
                row._last.removeClassName("flagrate-grid-cell-menu");
            }
        }
    }, {
        key: "_updatePositionOfResizeHandles",
        value: function _updatePositionOfResizeHandles() {
            var adj = this._opt.fill ? -this._body.scrollLeft : 0;
            var col = void 0;
            for (var i = 0, l = this._cols.length; i < l; i++) {
                col = this._cols[i];
                if (col._resizeHandle) {
                    col._resizeHandle.style.left = col._th.offsetLeft + col._th.getWidth() + adj + "px";
                }
            }
        }
    }, {
        key: "_updateLayoutOfCols",
        value: function _updateLayoutOfCols(surplus) {
            var _this6 = this;

            var fixed = true;
            var minimized = 0;
            var col = void 0;
            for (var i = 0, l = this._cols.length; i < l; i++) {
                col = this._cols[i];
                if (col.width) {
                    continue;
                }
                var width = "auto";
                var minWidth = col.minWidth === undefined ? this._opt.colMinWidth : col.minWidth;
                if (surplus) {
                    width = surplus + "px";
                } else if (minWidth >= col._th.getWidth()) {
                    width = minWidth + "px";
                    ++minimized;
                } else {
                    fixed = false;
                }
                this._style.updateText(this._style.innerHTML.replace(new RegExp("(" + col._id + "{width:)([^}]*)}"), "$1" + width + "}"));
            }
            if (fixed) {
                this.element.addClassName("flagrate-grid-fixed");
            } else {
                this.element.removeClassName("flagrate-grid-fixed");
            }
            setTimeout(function () {
                var base = _this6._opt.fill ? _this6._body : _this6.element;
                _this6._style.updateText(_this6._style.innerHTML.replace(new RegExp("(" + _this6._id + "-col-last:after{right:)([^}]*)}"), "$1" + (base.scrollWidth - base.clientWidth - base.scrollLeft) + "px!important}"));
                var _surplus = _this6._lastCol.getWidth();
                if (fixed && !surplus && _surplus && minimized) {
                    _this6._updateLayoutOfCols(Math.floor(_surplus / minimized));
                }
            }, 0);
        }
    }, {
        key: "_createOnScrollHandler",
        value: function _createOnScrollHandler() {
            var _this7 = this;

            return function (e) {
                if (_this7._opt.disableResize === false) {
                    _this7._updateLayoutOfCols();
                }
            };
        }
    }, {
        key: "_createBodyOnScrollHandler",
        value: function _createBodyOnScrollHandler() {
            var _this8 = this;

            return function (e) {
                _this8._head.style.right = _this8._body.offsetWidth - _this8._body.clientWidth + "px";
                _this8._head.scrollLeft = _this8._body.scrollLeft;
                if (_this8._opt.disableResize === false) {
                    _this8._updateLayoutOfCols();
                    _this8._updatePositionOfResizeHandles();
                }
            };
        }
    }, {
        key: "_createColOnClickHandler",
        value: function _createColOnClickHandler(col) {
            var _this9 = this;

            return function (e) {
                _this9.sort(col.key, !col.isAsc);
            };
        }
    }, {
        key: "_createRowOnClickHandler",
        value: function _createRowOnClickHandler(row) {
            var _this10 = this;

            return function (e) {
                if (/firefox/i.test(navigator.userAgent) === true) {
                    window.event = e;
                }
                if (_this10.isEnabled() === false) {
                    return;
                }
                if (row.onClick) {
                    row.onClick.call(_this10, e, row, _this10);
                }
                if (_this10.onClick) {
                    _this10.onClick(e, row, _this10);
                }
                if (_this10._opt.disableSelect === false) {
                    if (row.isSelected === true) {
                        _this10.deselect(row);
                    } else {
                        _this10.select(row);
                    }
                }
                if (row._checkbox) {
                    row._checkbox.focus();
                }
                return false;
            };
        }
    }, {
        key: "_createRowOnDblClickHandler",
        value: function _createRowOnDblClickHandler(row) {
            var _this11 = this;

            return function (e) {
                if (/firefox/i.test(navigator.userAgent) === true) {
                    window.event = e;
                }
                if (_this11.isEnabled() === false) {
                    return;
                }
                if (row.onDblClick) {
                    row.onDblClick.call(_this11, e, row, _this11);
                }
                if (_this11.onDblClick) {
                    _this11.onDblClick(e, row, _this11);
                }
            };
        }
    }, {
        key: "_createCellOnClickHandler",
        value: function _createCellOnClickHandler(cell) {
            var _this12 = this;

            return function (e) {
                if (_this12.isEnabled() === false) {
                    return;
                }
                if (cell.onClick) {
                    cell.onClick.call(_this12, e, cell, _this12);
                }
            };
        }
    }, {
        key: "_createCellOnDblClickHandler",
        value: function _createCellOnDblClickHandler(cell) {
            var _this13 = this;

            return function (e) {
                if (_this13.isEnabled() === false) {
                    return;
                }
                if (cell.onDblClick) {
                    cell.onDblClick.call(_this13, e, cell, _this13);
                }
            };
        }
    }, {
        key: "_createRowOnCheckHandler",
        value: function _createRowOnCheckHandler(row) {
            var _this14 = this;

            return function (e) {
                if (_this14.isEnabled() === false) {
                    if (e.targetCheckbox.isChecked() === true) {
                        e.targetCheckbox.uncheck();
                    } else {
                        e.targetCheckbox.check();
                    }
                    return;
                }
                if (_this14._opt.disableSelect === false) {
                    if (row._checkbox.isChecked() === true) {
                        _this14.select(row);
                    } else {
                        _this14.deselect(row);
                    }
                }
            };
        }
    }, {
        key: "_createLastRowOnClickHandler",
        value: function _createLastRowOnClickHandler(row) {
            var _this15 = this;

            return function (e) {
                if (_this15.isEnabled() === false) {
                    return;
                }
                e.stopPropagation();
                if (row._menu) {
                    row._menu.open(e);
                }
            };
        }
    }, {
        key: "_createResizeHandleOnMousedownHandler",
        value: function _createResizeHandleOnMousedownHandler(col) {
            var _this16 = this;

            return function (e) {
                //e.stopPropagation();
                e.preventDefault();
                var current = e.clientX;
                var origin = current;
                var onMove = function onMove(e) {
                    e.preventDefault();
                    var delta = e.clientX - current;
                    current += delta;
                    col._resizeHandle.style.left = parseInt(col._resizeHandle.style.left.replace("px", ""), 10) + delta + "px";
                };
                var onUp = function onUp(e) {
                    e.preventDefault();
                    document.removeEventListener("mousemove", onMove, true);
                    document.removeEventListener("mouseup", onUp, true);
                    var minWidth = col.minWidth === undefined ? _this16._opt.colMinWidth : col.minWidth;
                    var delta = e.clientX - origin;
                    var width = col._th.getWidth() + delta;
                    width = col.width = Math.max(width, minWidth);
                    _this16._style.updateText(_this16._style.innerHTML.replace(new RegExp("(" + col._id + "{width:)([^}]*)}"), "$1" + width + "px}"));
                    _this16._updateLayoutOfCols();
                    _this16._updatePositionOfResizeHandles();
                };
                document.addEventListener("mousemove", onMove, true);
                document.addEventListener("mouseup", onUp, true);
            };
        }
    }, {
        key: "headless",
        get: function get() {
            return this.element.hasClassName("flagrate-grid-headless");
        },
        set: function set(enable) {
            if (enable) {
                this.element.addClassName("flagrate-grid-headless");
            } else {
                this.element.removeClassName("flagrate-grid-headless");
            }
        }
    }, {
        key: "fill",
        get: function get() {
            return this.element.hasClassName("flagrate-grid-fill");
        },
        set: function set(enable) {
            if (enable) {
                this.element.addClassName("flagrate-grid-fill");
                this._body.onscroll = this._createBodyOnScrollHandler();
            } else {
                this.element.removeClassName("flagrate-grid-fill");
                this.element.onscroll = this._createOnScrollHandler();
            }
            this._requestRender();
        }
    }, {
        key: "rows",
        get: function get() {
            return this._rows;
        },
        set: function set(rows) {
            this._rows = rows;
            this._requestRender();
        }
    }, {
        key: "sortedByKey",
        get: function get() {
            return this._sortedByKey;
        }
    }, {
        key: "sortedByAsc",
        get: function get() {
            return this._sortedByAsc;
        }
    }, {
        key: "selectedRows",
        get: function get() {
            return this.getSelectedRows();
        },
        set: function set(rows) {
            this.select(rows);
        }
    }]);

    return Grid;
}();

Grid.idCounter = 0;
function createGrid(a) {
    return new Grid(a);
}
/** get value of row */
function getValue() {
    var row = this;
    if (row.value !== undefined) {
        return row.value;
    }
    var ret = {};
    for (var key in row.cell) {
        if (_typeof(row.cell[key]) === "object" && row.cell[key].value !== undefined) {
            ret[key] = row.cell[key].value;
        }
    }
    return ret;
}
var hiddenProp = { enumerable: false };
var rowProps = {
    _checkbox: hiddenProp,
    _grid: hiddenProp,
    _last: hiddenProp,
    _menu: hiddenProp,
    _tr: hiddenProp,
    className: hiddenProp,
    attribute: hiddenProp,
    style: hiddenProp,
    postProcess: hiddenProp,
    tr: {
        enumerable: true,
        get: function get() {
            return this._tr;
        }
    },
    id: {
        enumerable: true,
        get: function get() {
            return this._tr.id || undefined;
        },
        set: function set(id) {
            this._tr.id = id;
        }
    },
    menuItems: {
        enumerable: true,
        get: function get() {
            if (this._menu) {
                return this._menu.items;
            }
        },
        set: function set(items) {
            this._grid._updateRowMenu(this, items);
        }
    }
};
var cellProps = {
    _td: hiddenProp,
    _div: hiddenProp,
    className: hiddenProp,
    attribute: hiddenProp,
    style: hiddenProp,
    postProcess: hiddenProp,
    td: {
        enumerable: true,
        get: function get() {
            return this._td;
        }
    },
    div: {
        enumerable: true,
        get: function get() {
            return this._div;
        }
    },
    id: {
        enumerable: true,
        get: function get() {
            return this._td.id || undefined;
        },
        set: function set(id) {
            this._td.id = id;
        }
    },
    align: {
        enumerable: true,
        get: function get() {
            return this._td.style.textAlign || undefined;
        },
        set: function set(align) {
            this._td.style.textAlign = align;
        }
    },
    text: {
        enumerable: false,
        get: function get() {
            return this._div.innerText;
        },
        set: function set(text) {
            this._div.updateText(text);
        }
    },
    html: {
        enumerable: false,
        get: function get() {
            return this._div.innerHTML;
        },
        set: function set(html) {
            this._div.update(html);
        }
    },
    element: {
        enumerable: false,
        get: function get() {
            return this._div.firstChild;
        },
        set: function set(element) {
            this._div.update(element);
        }
    },
    icon: {
        enumerable: true,
        get: function get() {
            return this._div.style.backgroundImage.replace(/(.*url\()([^)]+)(\).*)/, "$2") || undefined;
        },
        set: function set(url) {
            var cell = this;
            if (url) {
                cell._div.addClassName("flagrate-icon");
                cell._div.style.backgroundImage = "url(" + url + ")";
            } else {
                cell._div.removeClassName("flagrate-icon");
                cell._div.style.backgroundImage = "";
            }
        }
    }
};



},{"./button":2,"./checkbox":4,"./context-menu":7,"./element":8,"./toolbar":27}],11:[function(require,module,exports){
/*
   Copyright 2016 Webnium

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.Menu = undefined;
exports.createMenu = createMenu;

var _util = require("./util");

var _element = require("./element");

var _button = require("./button");

var button = _interopRequireWildcard(_button);

var _buttons = require("./buttons");

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

/*?
    flagrate.createMenu(option)
    new flagrate.Menu(option)
    - option (Object) - options.

    Menu.

    #### option

    * `id`                       (String): `id` attribute of container element.
    * `className`                (String):
    * `attribute`                (Object):
    * `items`                    (Array): of item
    * `onSelect`                 (Function):

    #### item

    * `key`                      (String):
    * `label`                    (String; default `""`):
    * `icon`                     (String):
    * `isDisabled`               (Boolean; default `false`):
    * `onSelect`                 (Function):
**/
function FMenu() {
    var option = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    option.items = option.items || [];
    this.onSelect = option.onSelect || _util.emptyFunction;
    var attr = option.attribute || {};
    if (option.id) {
        attr["id"] = option.id;
    }
    // create a container
    var container = new _element.Element("div", attr);
    (0, _util.extendObject)(container, this);
    container.addClassName("flagrate flagrate-menu");
    if (option.className) {
        container.addClassName(option.className);
    }
    if (option.style) {
        container.setStyle(option.style);
    }
    for (var i = 0, l = option.items.length; i < l; i++) {
        container.push(option.items[i]);
    }
    container.addEventListener("click", function (e) {
        e.stopPropagation();
        e.preventDefault();
    });
    container.addEventListener("mouseup", function (e) {
        e.stopPropagation();
    });
    return container;
}
var Menu = exports.Menu = FMenu;
function createMenu(option) {
    return new Menu(option);
}
Menu.prototype = {
    push: function push(option) {
        var _this = this;

        if (typeof option === "string") {
            new _element.Element("hr").insertTo(this);
        } else {
            var _onSelect = option.onSelect;
            option.onSelect = function (e, button) {
                if (_onSelect) {
                    _onSelect.call(button, e, button);
                }
                _this.onSelect(e, _this);
            };
            var btn = new button.Button(option).insertTo(this);
            if (option.key) {
                btn.dataset["_key"] = option.key;
            }
        }
        return this;
    },

    getButtonByKey: _buttons.Buttons.prototype.getButtonByKey,
    getButtons: _buttons.Buttons.prototype.getButtons
};



},{"./button":2,"./buttons":3,"./element":8,"./util":29}],12:[function(require,module,exports){
/*
   Copyright 2016 Webnium

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.Modal = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

exports.createModal = createModal;

var _element = require("./element");

var _button = require("./button");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/*?
    flagrate.createModal(option)
    new flagrate.Modal(option)
    - option (Object) - configuration for the modal.

    Create and initialize the modal.

    #### option

    * `target`                   (Element; default `document.body`):
    * `id`                       (String):
    * `className`                (String):
    * `title`                    (String):
    * `subtitle`                 (String):
    * `text`                     (String):
    * `html`                     (String):
    * `element`                  (Element):
    * `href`                     (String):
    * `buttons`                  (Array): of button object.
    * `sizing`                   (String;  default `"flex"`; `"flex"` | `"full"`):
    * `onBeforeClose`            (Function):
    * `onClose`                  (Function):
    * `onShow`                   (Function):
    * `disableCloseButton`       (Boolean; default `false`):
    * `disableCloseByMask`       (Boolean; default `false`):
    * `disableCloseByEsc`        (Boolean; default `false`):

    #### button

    * `key`                      (String):
    * `label`                    (String; required):
    * `icon`                     (String):
    * `color`                    (String):
    * `onSelect`                 (Function):
    * `isFocused`                (Boolean; default `false`):
    * `isDisabled`               (Boolean; default `false`):
    * `className`                (String):
**/
var Modal = exports.Modal = function () {
    function Modal() {
        var _opt = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

        _classCallCheck(this, Modal);

        this._opt = _opt;
        this._buttons = [];
        this._close = this.close.bind(this);
        this.__onKeydownHandler = this._onKeydownHandler.bind(this);
        if (!_opt.target) {
            _opt.target = document.body;
        }
        if (!_opt.sizing) {
            _opt.sizing = "flex";
        }
        if (_opt.disableCloseButton === undefined) {
            _opt.disableCloseButton = false;
        }
        if (_opt.disableCloseByMask === undefined) {
            _opt.disableCloseByMask = false;
        }
        if (_opt.disableCloseByEsc === undefined) {
            _opt.disableCloseByEsc = false;
        }
        if (_opt["description"]) {
            // description has deprecated but no schedule to remove.
            this._opt.subtitle = _opt["description"];
        }
        if (_opt.buttons) {
            this._buttons = _opt.buttons;
        }
        if (_opt.onBeforeClose) {
            this.onBeforeClose = _opt.onBeforeClose;
        }
        if (_opt.onClose) {
            this.onClose = _opt.onClose;
        }
        if (_opt.onShow) {
            this.onShow = _opt.onShow;
        }
        if (this._buttons.length === 0) {
            this._buttons = [{
                label: "OK",
                color: "@primary",
                onSelect: this._close,
                isFocused: true
            }];
        }
        this._create();
    }

    _createClass(Modal, [{
        key: "setId",
        value: function setId(id) {
            this._container.id = id;
            return this;
        }
    }, {
        key: "setClassName",
        value: function setClassName(className) {
            this._container.className = className;
            return this;
        }
    }, {
        key: "setContent",
        value: function setContent(div) {
            this._opt.content = div;
            this._middle.update(div);
            return this;
        }
    }, {
        key: "setSizing",
        value: function setSizing(sizing) {
            this._container.removeClassName("flagrate-sizing-" + this._opt.sizing);
            this._container.addClassName("flagrate-sizing-" + sizing);
            this._opt.sizing = sizing;
            return this;
        }
    }, {
        key: "setElement",
        value: function setElement(element) {
            this._opt.element = element;
            this._content.update(element);
            return this;
        }
    }, {
        key: "setHTML",
        value: function setHTML(html) {
            this._opt.html = html;
            this._content.update(html);
            return this;
        }
    }, {
        key: "setText",
        value: function setText(text) {
            this._opt.text = text;
            this._content.updateText(text);
            return this;
        }
    }, {
        key: "setTitle",
        value: function setTitle(title) {
            this._opt.title = title;
            this._title.updateText(title);
            return this;
        }
    }, {
        key: "setSubtitle",
        value: function setSubtitle(subtitle) {
            this._opt.subtitle = subtitle;
            this._subtitle.updateText(subtitle);
            return this;
        }
    }, {
        key: "visible",
        value: function visible() {
            return this._container.hasClassName("flagrate-modal-visible");
        }
    }, {
        key: "open",
        value: function open() {
            var _this = this;

            if (this.visible() === true) {
                return this;
            }
            // make free
            if (document.activeElement && document.activeElement["blur"]) {
                document.activeElement.blur();
            }
            window.getSelection().removeAllRanges();
            if (this._closingTimer) {
                clearTimeout(this._closingTimer);
            }
            _element.Element.insert(this._opt.target, this._container);
            setTimeout(function () {
                return _this._container.addClassName("flagrate-modal-visible");
            }, 0);
            // Callback: onShow
            if (this.onShow) {
                this.onShow(this);
            }
            this._positioning();
            // focus to primary button
            if (this._buttons[0]) {
                this._buttons[0]._button.focus();
            }
            window.addEventListener("keydown", this.__onKeydownHandler, true);
            return this;
        }
        /** DEPRECATED */

    }, {
        key: "show",
        value: function show() {
            return this.open();
        }
        /** DEPRECATED */

    }, {
        key: "render",
        value: function render() {
            return this.open();
        }
    }, {
        key: "close",
        value: function close(e) {
            var _this2 = this;

            if (this.visible() === false) {
                return this;
            }
            this._container.removeClassName("flagrate-modal-visible");
            if (e) {
                e.stopPropagation();
                e.preventDefault();
            }
            // Callback: onBeforeClose
            if (this.onBeforeClose) {
                if (this.onBeforeClose(this, e) === false) {
                    return this; //abort closing
                }
            }
            clearTimeout(this._positioningTimer);
            this._closingTimer = setTimeout(function () {
                return _this2._container.remove();
            }, 1000);
            window.removeEventListener("keydown", this.__onKeydownHandler, true);
            // Callback: onClose
            if (this.onClose) {
                this.onClose(this, e);
            }
            return this;
        }
    }, {
        key: "getButtonByKey",
        value: function getButtonByKey(key) {
            var result = null;
            var buttons = this._buttons;
            for (var i = 0; i < buttons.length; i++) {
                if (!buttons[i].key) {
                    continue;
                }
                if (buttons[i].key === key) {
                    result = buttons[i]._button;
                    break;
                }
            }
            return result;
        }
    }, {
        key: "getButtons",
        value: function getButtons() {
            return this._buttons.map(function (button) {
                return button._button;
            });
        }
    }, {
        key: "setButtons",
        value: function setButtons(buttons) {
            this._buttons = buttons;
            this._createButtons();
            return this;
        }
    }, {
        key: "_create",
        value: function _create() {
            this._createBase();
            this._createModal();
            this._createButtons();
        }
    }, {
        key: "_createBase",
        value: function _createBase() {
            this._container = new _element.Element("div", {
                id: this._opt.id,
                "class": "flagrate flagrate-modal flagrate-sizing-" + this._opt.sizing
            });
            if (this._opt.className) {
                this._container.addClassName(this._opt.className);
            }
            if (this._opt.target !== document.body) {
                this._container.style.position = "absolute";
            }
            this._obi = new _element.Element().insertTo(this._container);
            if (this._opt.disableCloseByMask === false) {
                this._container.addEventListener("click", this._close);
            }
        }
    }, {
        key: "_createModal",
        value: function _createModal() {
            this._modal = new _element.Element().insertTo(this._obi);
            this._modal.addEventListener("click", function (e) {
                return e.stopPropagation();
            });
            this._closeButton = new _button.Button({
                label: "",
                onSelect: this._close
            });
            if (this._opt.disableCloseButton === false) {
                this._closeButton.insertTo(this._modal);
            }
            this._header = new _element.Element("hgroup").insertTo(this._modal);
            this._title = new _element.Element("h1").insertText(this._opt.title || "").insertTo(this._header);
            this._subtitle = new _element.Element("small").insertText(this._opt.subtitle || "").insertTo(this._header);
            this._middle = new _element.Element().insertTo(this._modal);
            if (this._opt.content) {
                this._middle.insert(this._opt.content);
            } else {
                this._content = new _element.Element().insertTo(this._middle);
                if (this._opt.element) {
                    this._content.insert(this._opt.element);
                } else if (this._opt.html) {
                    this._content.insert(this._opt.html);
                } else if (this._opt.text) {
                    this._content.insertText(this._opt.text);
                }
            }
            this._footer = new _element.Element("footer").insertTo(this._modal);
        }
    }, {
        key: "_createButtons",
        value: function _createButtons() {
            var _this3 = this;

            if (this._footer.hasChildNodes() === true) {
                this._footer.update();
            }
            this._buttons.forEach(function (button) {
                button._button = new _button.Button({
                    className: button.className,
                    label: button.label,
                    icon: button.icon,
                    color: button.color,
                    isFocused: button.isFocused || false,
                    isDisabled: button.isDisabled,
                    onSelect: function onSelect(e) {
                        if (button.onSelect) {
                            button.onSelect.call(e.targetButton, e, _this3);
                        } else if (button["onClick"]) {
                            console.warn("ModalButton#onClick is deprecated. Use ModalButton#onSelect instead.");
                            button["onClick"](e, _this3); // DEPRECATED
                        }
                    }
                });
                // DEPRECATED, This is for backward compatibility.
                button._button["button"] = button;
                button["button"] = button._button;
                button["disable"] = button._button.disable.bind(button._button);
                button["enable"] = button._button.enable.bind(button._button);
                button["setColor"] = button._button.setColor.bind(button._button);
                _this3._footer.insert(button._button);
            });
        }
    }, {
        key: "_positioning",
        value: function _positioning() {
            var _this4 = this;

            var baseWidth = -1;
            var baseHeight = -1;
            var modalWidth = -1;
            var modalHeight = -1;
            var update = function update() {
                if (baseWidth !== _this4._container.getWidth() || baseHeight !== _this4._container.getHeight() || modalWidth !== _this4._modal.getWidth() || modalHeight !== _this4._modal.getHeight()) {
                    baseWidth = _this4._container.getWidth();
                    baseHeight = _this4._container.getHeight();
                    modalWidth = _this4._modal.getWidth();
                    modalHeight = _this4._modal.getHeight();
                    if (_this4._opt.sizing === "flex") {
                        if (baseWidth - 20 <= modalWidth) {
                            _this4._modal.style.left = "0";
                            _this4._middle.style.width = baseWidth + "px";
                            _this4._middle.style.overflowX = "auto";
                        } else {
                            _this4._modal.style.left = Math.floor(baseWidth / 2 - modalWidth / 2) + "px";
                            _this4._middle.style.width = "";
                            _this4._middle.style.overflowX = "visible";
                        }
                        if (baseHeight - 20 <= modalHeight) {
                            _this4._obi.style.top = "10px";
                            _this4._obi.style.bottom = "10px";
                            _this4._obi.style.height = "";
                            _this4._middle.style.height = baseHeight - _this4._header.getHeight() - _this4._footer.getHeight() - 20 + "px";
                            _this4._middle.style.overflowY = "auto";
                        } else {
                            _this4._obi.style.top = baseHeight / 2 - modalHeight / 2 + "px";
                            _this4._obi.style.bottom = "";
                            _this4._obi.style.height = modalHeight + "px";
                            _this4._middle.style.height = "";
                            _this4._middle.style.overflowY = "visible";
                        }
                    }
                    if (_this4._opt.sizing === "full") {
                        _this4._modal.style.right = "10px";
                        _this4._modal.style.left = "10px";
                        _this4._middle.style.overflowX = "auto";
                        _this4._obi.style.top = "10px";
                        _this4._obi.style.bottom = "10px";
                        _this4._obi.style.height = "";
                        _this4._middle.style.height = baseHeight - _this4._header.getHeight() - _this4._footer.getHeight() - 20 + "px";
                        _this4._middle.style.overflowY = "auto";
                    }
                }
                ;
                _this4._positioningTimer = setTimeout(update, 30);
            };
            this._positioningTimer = setTimeout(update, 0);
        }
    }, {
        key: "_onKeydownHandler",
        value: function _onKeydownHandler(e) {
            var active = document.activeElement && document.activeElement.tagName;
            if (this.visible() === false) {
                return;
            }
            if (active !== "BODY" && active !== "DIV" && active !== "BUTTON") {
                return;
            }
            if (window.getSelection().toString() !== "") {
                return;
            }
            var activated = false;
            // TAB:9
            if (e.keyCode === 9 && active !== "BUTTON") {
                activated = true;
                if (this._closeButton) {
                    this._closeButton.focus();
                } else if (this._buttons[0]) {
                    this._buttons[0]._button.focus();
                }
            }
            // ENTER:13
            if (e.keyCode === 13 && this._buttons[0] && active !== "BUTTON") {
                activated = true;
                this._buttons[0]._button.click();
            }
            // ESC:27
            if (e.keyCode === 27 && this._opt.disableCloseByEsc === false) {
                activated = true;
                this.close();
            }
            if (activated === true) {
                e.stopPropagation();
                e.preventDefault();
            }
        }
    }, {
        key: "buttons",
        get: function get() {
            return this.getButtons();
        }
    }, {
        key: "id",
        get: function get() {
            return this._container.id;
        },
        set: function set(id) {
            this._container.id = id;
        }
    }, {
        key: "className",
        get: function get() {
            return this._container.className;
        },
        set: function set(className) {
            this._container.className = className;
        }
    }, {
        key: "content",
        get: function get() {
            return this._content;
        },
        set: function set(div) {
            this.setContent(div);
        }
    }, {
        key: "sizing",
        get: function get() {
            return this._opt.sizing;
        },
        set: function set(sizing) {
            this.setSizing(sizing);
        }
    }, {
        key: "element",
        get: function get() {
            return this._opt.element;
        },
        set: function set(element) {
            this.setElement(element);
        }
    }, {
        key: "html",
        get: function get() {
            return this._opt.html;
        },
        set: function set(html) {
            this.setHTML(html);
        }
    }, {
        key: "text",
        get: function get() {
            return this._opt.text;
        },
        set: function set(text) {
            this.setText(text);
        }
    }, {
        key: "title",
        get: function get() {
            return this._opt.title;
        },
        set: function set(title) {
            this.setTitle(title);
        }
    }, {
        key: "subtitle",
        get: function get() {
            return this._opt.subtitle;
        },
        set: function set(subtitle) {
            this.setSubtitle(subtitle);
        }
    }]);

    return Modal;
}();

function createModal(option) {
    return new Modal(option);
}



},{"./button":2,"./element":8}],13:[function(require,module,exports){
/*
   Copyright 2016 Webnium

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.Notify = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

exports.createNotify = createNotify;

var _element = require("./element");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/*?
    flagrate.createNotify(option)
    new flagrate.Notify(option)
    - option (Object) - configuration for the notifications.

    Initialize the notifications.

    #### option

    * `target`                (Element; default `document.body`):
    * `className`             (String):
    * `disableDesktopNotify`  (Boolean; default `false`):
    * `disableFocusDetection` (Boolean; default `false`):
    * `hAlign`                (String;  default `"right"`; `"right"` | `"left"`):
    * `vAlign`                (String;  default `"bottom"`; `"top"` | `"bottom"`):
    * `hMargin`               (Number;  default `10`):
    * `vMargin`               (Number;  default `10`):
    * `spacing`               (Number;  default `10`):
    * `timeout`               (Number;  default `5`):
    * `title`                 (String;  default `"Notify"`):
**/
var Notify = exports.Notify = function () {
    function Notify() {
        var opt = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

        _classCallCheck(this, Notify);

        this.target = document.body;
        this.disableDesktopNotify = false;
        this.disableFocusDetection = false;
        this.hAlign = "right";
        this.vAlign = "bottom";
        this.hMargin = 10; //pixels
        this.vMargin = 10; //pixels
        this.spacing = 10; //pixels
        this.timeout = 5; //seconds
        this.title = "Notify";
        this._notifies = [];
        if (opt.target) {
            this.target = opt.target;
        }
        if (opt.className) {
            this.className = opt.className;
        }
        if (opt.disableDesktopNotify) {
            this.disableDesktopNotify = opt.disableDesktopNotify;
        }
        if (opt.disableFocusDetection) {
            this.disableFocusDetection = opt.disableFocusDetection;
        }
        if (opt.hAlign) {
            this.hAlign = opt.hAlign;
        }
        if (opt.vAlign) {
            this.vAlign = opt.vAlign;
        }
        if (opt.hMargin) {
            this.hMargin = opt.hMargin;
        }
        if (opt.vMargin) {
            this.vMargin = opt.vMargin;
        }
        if (opt.spacing) {
            this.spacing = opt.spacing;
        }
        if (opt.timeout) {
            this.timeout = opt.timeout;
        }
        if (opt.title) {
            this.title = opt.title;
        }
        if (opt.icon) {
            this.icon = opt.icon;
        }
        this._init();
    }

    _createClass(Notify, [{
        key: "create",
        value: function create() {
            var _this = this;

            var _opt = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

            var opt = void 0;
            // sugar
            if (typeof _opt === "string") {
                opt = {
                    text: _opt
                };
            } else {
                opt = _opt;
            }
            /*- Desktop notify -*/
            if (this.disableDesktopNotify === false) {
                var hasFocus = !!document.hasFocus ? document.hasFocus() : false;
                if (this.disableFocusDetection === false && hasFocus === false) {
                    if (this._createDesktopNotify(opt) === true) {
                        return this;
                    }
                }
            }
            /*- Setting up -*/
            var title = opt.title || this.title;
            var message = opt.message || opt.body || opt.content || opt.text || null;
            var onClick = opt.onClick;
            var onClose = opt.onClose;
            var timeout = opt.timeout !== void 0 ? opt.timeout : this.timeout;
            var icon = opt.icon || this.icon;
            var isAlive = true;
            var closeTimer = void 0;
            /*- Positions -*/
            var hPosition = this.hMargin;
            var vPosition = this.vMargin;
            /*- Create a new element for notify -*/
            //
            // <div class="flagrate-notify">
            //   <div class="title">Notification</div>
            //   <div class="text">yadda yadda yadda..</div>
            //   <div class="close">&#xd7;</div>
            // </div>
            //
            var notify = new _element.Element("div", { "class": this.className });
            notify.addClassName("flagrate flagrate-notify");
            new _element.Element("div", { "class": "title" }).insertText(title).insertTo(notify);
            new _element.Element("div", { "class": "text" }).insertText(message).insertTo(notify);
            var notifyClose = new _element.Element("div", { "class": "close" }).update("&#xd7;").insertTo(notify);
            if (icon) {
                notify.addClassName("flagrate-notify-icon");
                new _element.Element("div", { "class": "icon" }).setStyle({ "backgroundImage": "url(" + icon + ")" }).insertTo(notify);
            }
            /*- Remove a notify element -*/
            var closeNotify = function closeNotify() {
                if (isAlive === false) {
                    return;
                }
                isAlive = false;
                notify.style.opacity = "0";
                //onClose event
                if (onClose) {
                    onClose.call(_this);
                }
                setTimeout(function () {
                    _this.target.removeChild(notify);
                    _this._notifies.splice(_this._notifies.indexOf(notify), 1);
                    _this._positioner();
                }, 300);
            };
            notifyClose.addEventListener("click", function (e) {
                e.stopPropagation();
                e.preventDefault();
                if (isAlive) {
                    closeNotify();
                }
            }, false);
            notify.style.display = "none";
            notify.style.position = "fixed";
            notify.style[this.hAlign] = hPosition + "px";
            notify.style[this.vAlign] = vPosition + "px";
            /*- onClick event -*/
            if (!onClick) {
                notify.addEventListener("click", closeNotify);
            } else {
                notify.style.cursor = "pointer";
                notify.addEventListener("click", function (e) {
                    e.stopPropagation();
                    e.preventDefault();
                    onClick.call(_this);
                    closeNotify();
                });
            }
            /*- Insert to the target -*/
            this.target.appendChild(notify);
            /*- Show notify -*/
            notify.style.display = "block";
            setTimeout(function () {
                notify.style.opacity = "1";
            }, 10);
            /*- Set timeout -*/
            if (timeout !== 0) {
                var onTimeout = function onTimeout() {
                    if (isAlive) {
                        closeNotify();
                    }
                };
                closeTimer = setTimeout(onTimeout, timeout * 1000);
                //Clear timeout
                notify.addEventListener("mouseover", function () {
                    clearTimeout(closeTimer);
                    closeTimer = setTimeout(onTimeout, timeout * 1000);
                });
            }
            this._notifies.push(notify);
            this._positioner();
            return this;
        }
    }, {
        key: "_init",
        value: function _init() {
            if (this.disableDesktopNotify === false) {
                /*- Check supported -*/
                if (!window["Notification"] || !window["Notification"].permission) {
                    this.disableDesktopNotify = true;
                } else {
                    /*- Check protocol -*/
                    if (location.protocol !== "file:") {
                        /*- Get Permissions -*/
                        if (window["Notification"].permission === "default") {
                            this.create({
                                text: "Click here to Activate the Desktop Notifications...",
                                onClick: function onClick() {
                                    window["Notification"].requestPermission();
                                }
                            });
                        }
                    }
                }
            }
        }
    }, {
        key: "_createDesktopNotify",
        value: function _createDesktopNotify(opt) {
            var _this2 = this;

            /*- Setting up -*/
            var title = opt.title || this.title;
            var message = opt.message || opt.body || opt.content || opt.text || null;
            var onClick = opt.onClick;
            var onClose = opt.onClose;
            var timeout = opt.timeout !== void 0 ? opt.timeout : this.timeout;
            var icon = opt.icon || this.icon;
            var isAlive = true;
            var notify = null;
            var closeTimer = void 0;
            /*- Create a desktop notification -*/
            /*- Get Permissions -*/
            if (window["Notification"].permission !== "granted") {
                return false;
            }
            notify = new window["Notification"](title, {
                icon: icon,
                body: message
            });
            /*- Set timeout -*/
            if (timeout !== 0) {
                closeTimer = setTimeout(function () {
                    if (isAlive) {
                        notify.close();
                    }
                }, timeout * 1000);
            }
            /*- onClick event -*/
            notify.addEventListener("click", function () {
                if (onClick) {
                    onClick.call(_this2);
                }
                notify.close();
            });
            /*- onClose event -*/
            notify.onclose = function () {
                isAlive = false;
                if (onClose) {
                    onClose.call(_this2);
                }
            };
            /*- Show notify -*/
            if (notify.show) {
                notify.show();
            }
            return true;
        }
    }, {
        key: "_positioner",
        value: function _positioner() {
            var tH = this.target === document.body ? window.innerHeight || document.body.clientHeight : this.target.offsetHeight;
            var pX = 0;
            var pY = 0;
            for (var i = 0, l = this._notifies.length; i < l; i++) {
                var notify = this._notifies[i];
                var x = this.vMargin + pX;
                var y = this.hMargin + pY;
                notify.style[this.hAlign] = x.toString(10) + "px";
                notify.style[this.vAlign] = y.toString(10) + "px";
                pY += this.spacing + notify.offsetHeight;
                if (pY + notify.offsetHeight + this.vMargin + this.spacing >= tH) {
                    pY = 0;
                    pX += this.spacing + notify.offsetWidth;
                }
            }
        }
    }]);

    return Notify;
}();

function createNotify(option) {
    return new Notify(option);
}



},{"./element":8}],14:[function(require,module,exports){
/*
   Copyright 2016 Webnium

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.Popover = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

exports.createPopover = createPopover;

var _element = require("./element");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/*?
    flagrate.createPopover(option)
    new flagrate.Popover(option)
    - option (Object) - options.

    Popover.

    #### option

    * `target`    (Element):
    * `text`      (String):
    * `html`      (String):
    * `element`   (Element):
    * `className` (String):
**/
var Popover = exports.Popover = function () {
    function Popover() {
        var opt = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

        _classCallCheck(this, Popover);

        this._isShowing = false;
        this._openHandler = this.open.bind(this);
        this._closeHandler = this.close.bind(this);
        if (opt.target) {
            if (!opt.target["isFlagrated"]) {
                opt.target = _element.Element.extend(opt.target);
            }
            this._target = opt.target;
        }
        if (opt.text) {
            this._text = opt.text;
        }
        if (opt.html) {
            this._html = opt.html;
        }
        if (opt.element) {
            this._element = opt.element;
        }
        if (opt.className) {
            this._className = opt.className;
        }
        if (this._target) {
            this._target.addEventListener("mouseover", this._openHandler);
        }
    }

    _createClass(Popover, [{
        key: "open",
        value: function open(forceTarget) {
            var _this = this;

            if (this._isShowing === true) {
                this.close();
            }
            var target = this._target || document.documentElement;
            if (forceTarget instanceof Event) {
                if (_element.Element.isElement(forceTarget.target) === true) {
                    target = forceTarget.target;
                }
                document.body.addEventListener("click", this._closeHandler);
                document.body.addEventListener("mouseout", this._closeHandler);
                document.body.addEventListener("mouseup", this._closeHandler);
                window.addEventListener("scroll", this._closeHandler);
            } else if (_element.Element.isElement(forceTarget) === true) {
                target = forceTarget;
            }
            var div = this._create();
            this._positioningTimer = setInterval(function () {
                if (_element.Element.exists(target) === true) {
                    _updatePosition(target, div);
                } else {
                    _this.close();
                }
            }, 10);
            this._div.on("click", function (e) {
                return e.stopPropagation();
            });
            this._div.on("mouseup", function (e) {
                return e.stopPropagation();
            });
            this._div.on("mousewheel", function (e) {
                e.stopPropagation();
                e.preventDefault();
            });
            _updatePosition(target, div);
            return this;
        }
    }, {
        key: "close",
        value: function close() {
            if (this._div === undefined) {
                return this;
            }
            clearInterval(this._positioningTimer);
            document.body.removeEventListener("click", this._closeHandler);
            document.body.removeEventListener("mouseup", this._closeHandler);
            document.body.removeEventListener("mouseout", this._closeHandler);
            window.removeEventListener("scroll", this._closeHandler);
            this._isShowing = false;
            var div = this._div;
            div.removeClassName("flagrate-popover-visible");
            setTimeout(function () {
                if (div && div.remove) {
                    div.remove();
                }
            }, 1000);
            delete this._div;
            return this;
        }
    }, {
        key: "visible",
        value: function visible() {
            return this._isShowing && !!this._div.hasClassName("flagrate-popover-visible");
        }
    }, {
        key: "remove",
        value: function remove() {
            if (this._div) {
                this.close();
            }
            if (this._target) {
                this._target.removeEventListener("mouseover", this._openHandler);
            }
        }
    }, {
        key: "setTarget",
        value: function setTarget(element) {
            if (this._target === element) {
                return this;
            }
            if (!element["isFlagrated"]) {
                element = _element.Element.extend(element);
            }
            this._target = element;
            if (this._isShowing === true) {
                this.open();
            }
            return this;
        }
    }, {
        key: "setText",
        value: function setText(text) {
            if (this._text === text) {
                return this;
            }
            this._text = text;
            if (this._isShowing === true) {
                this._div.updateText(text);
            }
            return this;
        }
    }, {
        key: "setHTML",
        value: function setHTML(html) {
            if (this._html === html) {
                return this;
            }
            this._html = html;
            if (this._isShowing === true) {
                this._div.update(html);
            }
            return this;
        }
    }, {
        key: "setElement",
        value: function setElement(element) {
            if (this._element === element) {
                return this;
            }
            this._element = element;
            if (this._isShowing === true) {
                this._div.update(element);
            }
            return this;
        }
    }, {
        key: "setClassName",
        value: function setClassName(className) {
            if (this._className === className) {
                return this;
            }
            if (this._isShowing === true) {
                this._div.removeClassName(this._className).addClassName(className);
            }
            this._className = className;
            return this;
        }
    }, {
        key: "_create",
        value: function _create() {
            this._isShowing = true;
            var div = this._div = new _element.Element("div", {
                "class": "flagrate flagrate-popover"
            });
            if (this._className) {
                div.addClassName(this._className);
            }
            if (this._text) {
                div.updateText(this._text);
            }
            if (this._html) {
                div.update(this._html);
            }
            if (this._element) {
                div.update(this._element);
            }
            div.insertTo(document.body);
            setTimeout(function () {
                return div.addClassName("flagrate-popover-visible");
            }, 0);
            return div;
        }
    }, {
        key: "target",
        get: function get() {
            return this._target;
        },
        set: function set(element) {
            this.setTarget(element);
        }
    }, {
        key: "text",
        get: function get() {
            return this._text;
        },
        set: function set(text) {
            this.setText(text);
        }
    }, {
        key: "html",
        get: function get() {
            return this._html;
        },
        set: function set(html) {
            this.setHTML(html);
        }
    }, {
        key: "element",
        get: function get() {
            return this._element;
        },
        set: function set(element) {
            this.setElement(element);
        }
    }, {
        key: "className",
        get: function get() {
            return this._className;
        },
        set: function set(className) {
            this.setClassName(className);
        }
    }, {
        key: "isShowing",
        get: function get() {
            return this._isShowing;
        },
        set: function set(boolean) {
            if (boolean === true) {
                this.open();
            } else {
                this.close();
            }
        }
    }]);

    return Popover;
}();

function createPopover(option) {
    return new Popover(option);
}
function _updatePosition(target, div) {
    var tOffset = _element.Element.cumulativeOffset(target);
    var tScroll = _element.Element.cumulativeScrollOffset(target);
    var tWidth = _element.Element.getWidth(target);
    var tHeight = _element.Element.getHeight(target);
    var width = div.getWidth();
    var height = div.getHeight();
    var x = tOffset.left - tScroll.left + Math.round(tWidth / 2 - width / 2);
    var y = tOffset.top - tScroll.top + tHeight;
    if (y + height > window.innerHeight) {
        y = window.innerHeight - y + tHeight;
        div.removeClassName("flagrate-popover-tail-top");
        div.addClassName("flagrate-popover-tail-bottom");
        div.style.top = "";
        div.style.bottom = y + "px";
    } else {
        div.removeClassName("flagrate-popover-tail-bottom");
        div.addClassName("flagrate-popover-tail-top");
        div.style.top = y + "px";
        div.style.bottom = "";
    }
    div.style.left = x + "px";
}



},{"./element":8}],15:[function(require,module,exports){
/*
   Copyright 2016 Webnium

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.Progress = undefined;
exports.createProgress = createProgress;

var _util = require("./util");

var _element = require("./element");

/*?
    flagrate.createProgress(option)
    new flagrate.Progress(option)
    - option (Object) - options.
**/
function FProgress() {
    var opt = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    var attr = opt.attribute || {};
    attr["id"] = opt.id || null;
    attr["class"] = opt.className || null;
    //create
    var progress = new _element.Element("div", attr);
    (0, _util.extendObject)(progress, this);
    progress._value = opt.value || 0;
    progress._max = opt.max || 100;
    progress.addClassName("flagrate flagrate-progress");
    progress._bar = new _element.Element().insertTo(progress);
    progress._updateProgress();
    return progress;
}
var Progress = exports.Progress = FProgress;
function createProgress(option) {
    return new Progress(option);
}
Progress.prototype = {
    getValue: function getValue() {
        return this._value;
    },
    setValue: function setValue(number) {
        var progress = this;
        if (typeof number !== "number") {
            return progress;
        }
        progress._value = Math.max(0, Math.min(progress._max, number));
        progress.fire("change", { targetProgress: progress });
        progress._updateProgress();
        return progress;
    },
    getMax: function getMax() {
        return this._max;
    },
    setMax: function setMax(number) {
        var progress = this;
        if (typeof number !== "number") {
            return progress;
        }
        progress._max = number;
        progress.setValue(progress._value);
        progress._updateProgress();
        return progress;
    },
    _updateProgress: function _updateProgress() {
        var progress = this;
        var percentage = Math.max(0, Math.min(100, progress._value / progress._max * 100));
        progress._bar.setStyle({ width: percentage + "%" });
        return;
    }
};



},{"./element":8,"./util":29}],16:[function(require,module,exports){
/*
   Copyright 2016 Webnium

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.Pulldown = undefined;
exports.createPulldown = createPulldown;

var _util = require("./util");

var _element = require("./element");

var _button = require("./button");

var _menu = require("./menu");

/*?
    flagrate.createPulldown(option)
    new flagrate.Pulldown(option)
    - option (Object) - options.

    Pulldown.

    #### option

    * `id`                       (String): `id` attribute of `button` element.
    * `className`                (String):
    * `attribute`                (Object):
    * `style`                    (Object): (using flagrate.Element.setStyle)
    * `items`                    (Array): of item (see: flagrate.Menu)
    * `isDisabled`               (Boolean; default `false`):
    * `onSelect`                 (Function):
    * `onOpen`                   (Function):
    * `onClose`                  (Function):
**/
function FPulldown() {
    var option = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    option.label = option.label || "";
    this.items = option.items || [];
    this.onOpen = option.onOpen || _util.emptyFunction;
    this.onClose = option.onClose || _util.emptyFunction;
    var attr = option.attribute || {};
    if (option.id) {
        attr["id"] = option.id;
    }
    //create
    var pulldown = new _button.Button({
        attribute: attr,
        label: option.label,
        icon: option.icon,
        onSelect: option.onSelect
    });
    (0, _util.extendObject)(pulldown, this);
    pulldown.addEventListener("select", pulldown.open.bind(pulldown));
    pulldown.addClassName("flagrate-pulldown");
    if (option.className) {
        pulldown.addClassName(option.className);
    }
    new _element.Element("span", { "class": "flagrate-pulldown-triangle" }).insertTo(pulldown);
    if (option.style) {
        pulldown.setStyle(option.style);
    }
    if (option.color) {
        pulldown.setColor(option.color);
    }
    if (option.isDisabled) {
        pulldown.disable();
    }
    return pulldown;
}
var Pulldown = exports.Pulldown = FPulldown;
function createPulldown(option) {
    return new Pulldown(option);
}
Pulldown.prototype = {
    open: function open(e) {
        var pulldown = this;
        if (pulldown._open === true || !!pulldown._menu) {
            pulldown.close();
            return;
        }
        pulldown._open = true;
        pulldown._menu = new _element.Element("div", { "class": "flagrate-pulldown-menu" }).insert(new _menu.Menu({
            items: pulldown.items,
            onSelect: function onSelect(e) {
                if (pulldown.onSelect) {
                    pulldown.onSelect(e, pulldown);
                }
                pulldown.fire("select", { targetPulldown: pulldown });
            }
        }));
        pulldown._menu.style.top = pulldown.offsetTop + pulldown.getHeight() + "px";
        pulldown._menu.style.left = pulldown.offsetLeft + "px";
        pulldown.insert({ after: pulldown._menu });
        // To prevent overflow.
        var menuHeight = pulldown._menu.getHeight();
        var menuMargin = parseInt(pulldown._menu.getStyle("margin-top").replace("px", ""), 10);
        var cummOffsetTop = pulldown.cumulativeOffset().top;
        var upsideSpace = -window.pageYOffset + cummOffsetTop;
        var downsideSpace = window.pageYOffset + window.innerHeight - cummOffsetTop - pulldown.getHeight();
        if (menuHeight + menuMargin > downsideSpace) {
            if (upsideSpace > downsideSpace) {
                if (upsideSpace < menuHeight + menuMargin) {
                    menuHeight = upsideSpace - menuMargin - menuMargin;
                    pulldown._menu.style.maxHeight = menuHeight + "px";
                }
                pulldown._menu.style.top = pulldown.offsetTop - menuHeight - menuMargin * 2 + "px";
            } else {
                menuHeight = downsideSpace - menuMargin - menuMargin;
                pulldown._menu.style.maxHeight = menuHeight + "px";
            }
        }
        var close = function close(e) {
            document.body.removeEventListener("click", close);
            if (pulldown.parentNode) {
                pulldown.parentNode.removeEventListener("click", close);
            }
            pulldown.removeEventListener("select", close);
            pulldown.close(e);
        };
        setTimeout(function () {
            document.body.addEventListener("click", close);
            if (pulldown.parentNode) {
                pulldown.parentNode.addEventListener("click", close);
            }
            pulldown.addEventListener("select", close);
        }, 0);
        pulldown.onOpen.call(pulldown, e, pulldown);
        pulldown.fire("open", { targetPulldown: pulldown });
        return this;
    },
    close: function close(e) {
        var pulldown = this;
        if (pulldown._open === false || !pulldown._menu) {
            return;
        }
        pulldown._open = false;
        pulldown._menu.style.opacity = "0";
        setTimeout(function () {
            if (!pulldown._menu) {
                return;
            }
            pulldown._menu.remove();
            delete pulldown._menu;
            pulldown.onClose(e, pulldown);
            pulldown.fire("close", { targetPulldown: pulldown });
        }, 250);
        return this;
    }
};



},{"./button":2,"./element":8,"./menu":11,"./util":29}],17:[function(require,module,exports){
/*
   Copyright 2016 Webnium

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.Radio = undefined;
exports.createRadio = createRadio;

var _util = require("./util");

var _element = require("./element");

var idCounter = 0;
/*?
    flagrate.createRadio(option)
    new flagrate.Radio(option)
    - option (Object) - options.
**/
function FRadio() {
    var opt = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    var id = "flagrate-radio-" + (++idCounter).toString(10);
    var attr = opt.attribute || {};
    attr["id"] = opt.id || null;
    attr["class"] = opt.className || null;
    //create
    var radio = new _element.Element("label", attr);
    radio.writeAttribute("for", id);
    (0, _util.extendObject)(radio, this);
    if (opt.label) {
        radio.insertText(opt.label);
    } else if (opt.labelHTML) {
        radio.insert(opt.labelHTML);
    }
    radio.addClassName("flagrate flagrate-radio");
    if (opt.icon) {
        radio.addClassName("flagrate-icon");
        radio.setStyle({
            backgroundImage: "url(" + opt.icon + ")"
        });
    }
    radio.onChange = opt.onChange || null;
    radio.onCheck = opt.onCheck || null;
    radio.onUncheck = opt.onUncheck || null;
    radio._input = new _element.Element("input", { id: id, type: "radio", name: opt.name });
    radio.insert({ top: new _element.Element() });
    radio.insert({ top: radio._input });
    radio._input.addEventListener("change", function (e) {
        e.stopPropagation();
        var _e = e;
        _e.targetRadio = radio;
        if (radio.isChecked() === true) {
            if (radio.onCheck) {
                radio.onCheck(_e, radio);
            }
            radio.fire("check", { targetRadio: radio });
        } else {
            if (radio.onUncheck) {
                radio.onUncheck(_e, radio);
            }
            radio.fire("uncheck", { targetRadio: radio });
        }
        if (radio.onChange) {
            radio.onChange(_e, radio);
        }
        radio.fire("change", { targetRadio: radio });
    });
    if (opt.isChecked === true) {
        radio.check();
    }
    if (opt.isFocused === true) {
        radio.focus();
    }
    if (opt.isDisabled === true) {
        radio.disable();
    }
    return radio;
}
var Radio = exports.Radio = FRadio;
function createRadio(option) {
    return new Radio(option);
}
Radio.prototype = {
    disable: function disable() {
        this.addClassName("flagrate-disabled");
        this._input.writeAttribute("disabled", true);
        return this;
    },
    enable: function enable() {
        this.removeClassName("flagrate-disabled");
        this._input.writeAttribute("disabled", false);
        return this;
    },
    isEnabled: function isEnabled() {
        return !this.hasClassName("flagrate-disabled");
    },
    isChecked: function isChecked() {
        return !!this._input.checked;
    },
    check: function check() {
        this._input.checked = true;
        return this;
    },
    uncheck: function uncheck() {
        this._input.checked = false;
        return this;
    }
};



},{"./element":8,"./util":29}],18:[function(require,module,exports){
/*
   Copyright 2016 Webnium

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.Radios = undefined;

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

exports.createRadios = createRadios;

var _util = require("./util");

var _element = require("./element");

var _radio = require("./radio");

var idCounter = 0;
/*?
    flagrate.createRadios(option)
    new flagrate.Radios(option)
    - option (Object) - options.
**/
function FRadios() {
    var opt = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    var id = "flagrate-radios-" + (++idCounter).toString(10);
    var attr = opt.attribute || {};
    if (opt.id) {
        attr["id"] = opt.id;
    }
    //create
    var radios = new _element.Element("div", attr);
    (0, _util.extendObject)(radios, this);
    radios.addClassName("flagrate flagrate-radios");
    if (opt.className) {
        radios.addClassName(opt.className);
    }
    if (opt.style) {
        radios.setStyle(opt.style);
    }
    radios.onChange = opt.onChange;
    radios.selectedIndex = opt.selectedIndex || -1;
    radios._items = [];
    (opt.items || []).forEach(function (item, i) {
        var _item = {};
        if ((typeof item === "undefined" ? "undefined" : _typeof(item)) === "object") {
            (0, _util.extendObject)(_item, item);
        } else {
            _item.label = typeof item === "string" ? item : item.toString();
            _item.value = item;
        }
        _item.name = id;
        _item._radio = new _radio.Radio(_item).insertTo(radios);
        _item._radio.addEventListener("change", function (e) {
            if (radios.onChange) {
                radios.onChange(e, radios);
            }
        });
        _item._radio.addEventListener("check", function (e) {
            radios.selectedIndex = i;
        });
        radios._items.push(_item);
    });
    if (opt.isDisabled) {
        radios.disable();
    }
    if (radios.selectedIndex > -1) {
        radios._items[radios.selectedIndex]._radio.check();
    }
    return radios;
}
var Radios = exports.Radios = FRadios;
function createRadios(option) {
    return new Radios(option);
}
Radios.prototype = {
    select: function select(index) {
        if (this._items[index] !== void 0) {
            this.selectedIndex = index;
            this._items[index]._radio.check();
        }
        return this;
    },
    getValue: function getValue() {
        if (this.selectedIndex === -1) {
            return void 0;
        } else {
            return this._items[this.selectedIndex].value;
        }
    },
    setValue: function setValue(value) {
        for (var i = 0, l = this._items.length; i < l; i++) {
            if (this._items[i].value === value) {
                this.select(i);
                break;
            }
        }
        return this;
    },
    enable: function enable() {
        for (var i = 0, l = this._items.length; i < l; i++) {
            this._items[i]._radio.enable();
        }
        this.removeClassName("flagrate-disabled");
        return this;
    },
    disable: function disable() {
        for (var i = 0, l = this._items.length; i < l; i++) {
            this._items[i]._radio.disable();
        }
        this.addClassName("flagrate-disabled");
        return this;
    },
    isEnabled: function isEnabled() {
        return !this.hasClassName("flagrate-disabled");
    }
};



},{"./element":8,"./radio":17,"./util":29}],19:[function(require,module,exports){
/*
   Copyright 2016 Webnium

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.SearchBox = undefined;

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

exports.createSearchBox = createSearchBox;

var _util = require("./util");

var _element = require("./element");

var _button = require("./button");

var _textInput = require("./text-input");

var _menu = require("./menu");

/*?
    flagrate.createSearchBox(option)
    new flagrate.SearchBox(option)
    - option (Object) - options.

    text input for search.

    #### option

    * `id`                       (String): `id` attribute of container element.
    * `className`                (String):
    * `attribute`                (Object):
    * `style`                    (Object): (using flagrate.Element.setStyle)
    * `value`                    (String): default value.
    * `placeholder`              (String):
    * `icon`                     (String):
    * `isDisabled`               (Boolean; default `false`):
    * `suggester`                (Function):
    * `onSearch`                 (Function): callback with input value.
**/
function FSearchBox() {
    var opt = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    this.suggester = opt.suggester || null;
    this.onSearch = opt.onSearch || _util.emptyFunction;
    var attr = opt.attribute || {};
    attr["id"] = opt.id || null;
    attr["class"] = opt.className || null;
    //create
    var searchBox = new _element.Element("div", attr);
    (0, _util.extendObject)(searchBox, this);
    searchBox.addClassName("flagrate flagrate-search-box");
    searchBox._input = new _textInput.TextInput({
        className: "search-input",
        value: opt.value,
        placeholder: opt.placeholder,
        icon: opt.icon
    }).insertTo(searchBox);
    searchBox._button = new _button.Button({
        className: "search-button",
        onSelect: searchBox.search.bind(searchBox)
    }).insertTo(searchBox);
    searchBox._suggest = new _element.Element("div", {
        "class": "search-suggest"
    }).hide().insertTo(searchBox);
    searchBox._input.on("keydown", searchBox._onKeydownHandler.bind(searchBox));
    searchBox._input.on("keyup", searchBox._onKeyupHandler.bind(searchBox));
    searchBox._input.on("focus", searchBox._onFocusHandler.bind(searchBox));
    searchBox._input.on("blur", searchBox._onBlurHandler.bind(searchBox));
    // for Chrome
    searchBox._suggest.on("mousedown", function (e) {
        return e.preventDefault();
    });
    if (opt.style) {
        searchBox.setStyle(opt.style);
    }
    if (opt.isDisabled) {
        searchBox.disable();
    }
    return searchBox;
}
var SearchBox = exports.SearchBox = FSearchBox;
function createSearchBox(option) {
    return new SearchBox(option);
}
SearchBox.prototype = {
    disable: function disable() {
        this.addClassName("flagrate-disabled");
        this._input.disable();
        this._button.disable();
        this._suggest.hide();
        return this;
    },
    enable: function enable() {
        this.removeClassName("flagrate-disabled");
        this._input.enable();
        this._button.enable();
        return this;
    },
    isEnabled: function isEnabled() {
        return !this.hasClassName("flagrate-disabled");
    },
    getValue: function getValue() {
        return this._input.getValue();
    },
    setValue: function setValue(value) {
        this._input.setValue(value);
        return this;
    },
    search: function search() {
        var value = this.getValue();
        this.onSearch(value, this);
        this.fire("search", value);
        this._input.blur();
        return this;
    },
    suggest: function suggest() {
        if (!this.suggester) {
            return this;
        }
        this._suggest.hide();
        var value = this.getValue();
        var result = this.suggester(value, this._suggested.bind(this));
        if (result !== void 0) {
            this._suggested(result);
        }
        return this;
    },
    focus: function focus() {
        this._input.focus();
    },
    blur: function blur() {
        this._input.blur();
    },
    _suggested: function _suggested(suggestedItems) {
        var _this = this;

        if (!suggestedItems) {
            return;
        }
        if (suggestedItems.length === 0) {
            this._suggest.hide();
            return;
        }
        var items = [];
        suggestedItems.forEach(function (item) {
            if (typeof item === "string" && item.trim() !== "") {
                items.push({
                    label: item.trim(),
                    onSelect: _createCompletionHandler(_this, item.trim())
                });
            } else if ((typeof item === "undefined" ? "undefined" : _typeof(item)) === "object") {
                items.push({
                    label: item.label,
                    icon: item.icon,
                    onSelect: _createSuggestionHandler(_this, item.onSelect)
                });
            }
        });
        if (items.length === 0) {
            this._suggest.hide();
            return;
        }
        var menu = this._menu = new _menu.Menu({
            items: items,
            onSelect: function onSelect() {
                _this._suggest.hide();
            }
        });
        _element.Element.addClassName(menu.firstChild, "flagrate-search-suggest-selected");
        this._suggest.update(menu).show();
        // To prevent overflow.
        var menuHeight = this._suggest.getHeight();
        var menuMargin = parseInt(this._suggest.getStyle("margin-top").replace("px", ""), 10);
        var cummOffsetTop = this.cumulativeOffset().top;
        var upsideSpace = -window.pageYOffset + cummOffsetTop;
        var downsideSpace = window.pageYOffset + window.innerHeight - cummOffsetTop - this.getHeight();
        if (menuHeight + menuMargin > downsideSpace) {
            if (upsideSpace > downsideSpace) {
                if (upsideSpace < menuHeight + menuMargin) {
                    menuHeight = upsideSpace - menuMargin - menuMargin;
                    this._suggest.style.maxHeight = menuHeight + "px";
                }
                this._suggest.addClassName("flagrate-search-suggest-upper");
            } else {
                menuHeight = downsideSpace - menuMargin - menuMargin;
                this._suggest.style.maxHeight = menuHeight + "px";
                this._suggest.removeClassName("flagrate-search-suggest-upper");
            }
        } else {
            this._suggest.removeClassName("flagrate-search-suggest-upper");
        }
        // reset scroll position
        this._suggest.scrollTop = 0;
    },
    _onKeydownHandler: function _onKeydownHandler(e) {
        // ESC: 27
        if (e.keyCode === 27) {
            this._input.select();
            this._suggest.hide();
        } else if (this._suggest.visible() === true) {
            // ENTER: 13
            if (e.keyCode === 13) {
                var target = this._menu.getElementsByClassName("flagrate-search-suggest-selected")[0];
                target.click();
                return;
            }
            // UP: 38, DOWN: 40
            if (e.keyCode !== 38 && e.keyCode !== 40) {
                return;
            }
            e.preventDefault();
            var elements = this._menu.getElementsByTagName("button");
            for (var i = 0, l = elements.length; i < l; i++) {
                if (elements[i].hasClassName("flagrate-search-suggest-selected") === true) {
                    if (e.keyCode === 38 && i !== 0 || e.keyCode === 40 && i + 1 !== l) {
                        elements[i].removeClassName("flagrate-search-suggest-selected");
                    }
                    var scrollTop = -1;
                    if (e.keyCode === 38 && i !== 0) {
                        elements[i - 1].addClassName("flagrate-search-suggest-selected");
                        scrollTop = elements[i - 1].offsetHeight + elements[i - 1].offsetTop;
                    } else if (e.keyCode === 40 && i + 1 !== l) {
                        elements[i + 1].addClassName("flagrate-search-suggest-selected");
                        scrollTop = elements[i + 1].offsetHeight + elements[i + 1].offsetTop;
                    }
                    if (scrollTop !== -1) {
                        this._suggest.scrollTop = scrollTop + 4 - this._suggest.getHeight();
                    }
                    break;
                }
            }
        } else if (e.keyCode === 13) {
            setTimeout(this.search.bind(this), 100);
        }
    },
    _onKeyupHandler: function _onKeyupHandler(e) {
        if (this._lastValue !== this.getValue()) {
            this._lastValue = this.getValue();
            this.suggest();
        }
    },
    _onFocusHandler: function _onFocusHandler(e) {
        setTimeout(this.suggest.bind(this), 100);
    },
    _onBlurHandler: function _onBlurHandler(e) {
        var _this2 = this;

        setTimeout(function () {
            if (document.activeElement !== _this2._suggest && _this2._suggest.visible() === true) {
                _this2._suggest.hide();
            }
        }, 100);
    }
};
function _createCompletionHandler(searchBox, value) {
    return function () {
        searchBox._input.setValue(value);
        searchBox._input.focus();
    };
}
function _createSuggestionHandler(searchBox, onSelect) {
    return function () {
        onSelect.call(searchBox);
        searchBox._input.blur();
    };
}



},{"./button":2,"./element":8,"./menu":11,"./text-input":25,"./util":29}],20:[function(require,module,exports){
/*
   Copyright 2016 Webnium

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.Select = undefined;

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

exports.createSelect = createSelect;

var _util = require("./util");

var _element = require("./element");

var _pulldown = require("./pulldown");

var _grid = require("./grid");

/*?
    flagrate.createSelect(option)
    new flagrate.Select(option)
    - option (Object) - options.

    Select.

    #### option

    * `id`                       (String): `id` attribute of container element.
    * `className`                (String):
    * `attribute`                (Object):
    * `style`                    (Object): (using flagrate.Element.setStyle)
    * `items`                    (Array):
    * `listView`                 (Boolean; default `false`):
    * `multiple`                 (Boolean; default `false`):
    * `max`                      (Number; default `-1`):
    * `selectedIndex`            (Number):
    * `selectedIndexes`          (Array): array of Number.
    * `isDisabled`               (Boolean; default `false`):
**/
function FSelect() {
    var option = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    this.items = option.items || [];
    this.listView = option.listView || false;
    this.multiple = option.multiple || false;
    this.max = option.max || -1;
    if (this.multiple) {
        this.selectedIndexes = option.selectedIndexes || [];
    } else {
        this.selectedIndex = typeof option.selectedIndex === "undefined" ? -1 : option.selectedIndex;
    }
    var attr = option.attribute || {};
    if (option.id) {
        attr["id"] = option.id;
    }
    this.isPulldown = !this.listView && !this.multiple;
    // create
    var container = new _element.Element("div", attr);
    function createOnSelectHandler(i) {
        return function () {
            return container.select(i);
        };
    }
    function createOnDeselectHandler(i) {
        return function () {
            return container.deselect(i);
        };
    }
    // normalize items
    for (var i = 0, l = this.items.length; i < l; i++) {
        if (_typeof(this.items[i]) !== "object") {
            this.items[i] = {
                label: typeof this.items[i] === "string" ? this.items[i] : this.items[i].toString(10),
                value: this.items[i]
            };
        }
    }
    if (this.isPulldown) {
        container._pulldown = new _pulldown.Pulldown({
            label: "-",
            items: [{
                label: "-",
                onSelect: createOnSelectHandler(-1)
            }].concat(this.items.map(function (item, i) {
                return {
                    label: item.label,
                    labelHTML: item.labelHTML,
                    icon: item.icon,
                    onSelect: createOnSelectHandler(i)
                };
            }))
        }).insertTo(container);
    } else {
        container._grid = new _grid.Grid({
            headless: true,
            multiSelect: this.multiple,
            cols: [{
                key: "label"
            }],
            rows: this.items.map(function (item, i) {
                return {
                    cell: {
                        label: {
                            text: item.label,
                            html: item.labelHTML,
                            icon: item.icon
                        }
                    },
                    onSelect: createOnSelectHandler(i),
                    onDeselect: createOnDeselectHandler(i)
                };
            })
        }).insertTo(container);
    }
    (0, _util.extendObject)(container, this);
    container.addClassName("flagrate flagrate-select");
    if (!container.isPulldown) {
        container.addClassName("flagrate-select-list-view");
    }
    if (option.className) {
        container.addClassName(option.className);
    }
    if (option.style) {
        container.setStyle(option.style);
    }
    if (option.isDisabled) {
        container.disable();
    }
    if (container.multiple) {
        container.selectedIndexes.forEach(function (index) {
            container.select(index);
        });
    } else {
        if (container.selectedIndex > -1) {
            container.select(container.selectedIndex);
        }
    }
    return container;
}
var Select = exports.Select = FSelect;
function createSelect(option) {
    return new Select(option);
}
Select.prototype = {
    select: function select(index) {
        if (this.items.length <= index) {
            return this;
        }
        if (this.multiple) {
            if (this.max > -1 && this.selectedIndexes.length >= this.max) {
                if (this._grid.rows[index].isSelected === true) {
                    this._grid.deselect(index);
                }
                return this;
            }
            if (this.selectedIndexes.indexOf(index) === -1) {
                this.selectedIndexes.push(index);
            }
        } else {
            this.selectedIndex = index;
        }
        if (this.isPulldown) {
            if (index === -1) {
                this._pulldown.setLabel("-");
                this._pulldown.setIcon(null);
            } else {
                if (this.items[index].label !== undefined) {
                    this._pulldown.setLabel(this.items[index].label);
                } else if (this.items[index].labelHTML !== undefined) {
                    this._pulldown.setLabelHTML(this.items[index].labelHTML);
                }
                this._pulldown.setIcon(this.items[index].icon);
            }
            this.fire("change");
        } else {
            if (!this._grid.rows[index].isSelected) {
                this._grid.select(index);
            }
        }
        return this;
    },
    deselect: function deselect(index) {
        if (this.items.length <= index) {
            return this;
        }
        if (this.multiple) {
            var selectedIndex = this.selectedIndexes.indexOf(index);
            if (selectedIndex !== -1) {
                this.selectedIndexes.splice(this.selectedIndexes.indexOf(index), 1);
            }
        } else {
            this.selectedIndex = -1;
        }
        if (this.isPulldown) {
            this._pulldown.setLabel("-");
            this._pulldown.setIcon(null);
            this.fire("change");
        } else {
            if (this.multiple) {
                if (this._grid.rows[index].isSelected === true) {
                    this._grid.deselect(index);
                }
            } else {
                for (var i = 0, l = this.items.length; i < l; i++) {
                    if (this._grid.rows[i].isSelected === true) {
                        this._grid.deselect(i);
                    }
                }
            }
        }
        return this;
    },
    selectAll: function selectAll() {
        if (this.multiple) {
            this._grid.selectAll();
            this.selectedIndexes = [];
            for (var i = 0, l = this.items.length; i < l; i++) {
                this.selectedIndexes.push(i);
            }
        }
        return this;
    },
    deselectAll: function deselectAll() {
        if (this.multiple) {
            this._grid.deselectAll();
            this.selectedIndexes = [];
        } else {
            this.deselect();
        }
        return this;
    },
    disable: function disable() {
        this.addClassName("flagrate-disabled");
        if (this.isPulldown) {
            this._pulldown.disable();
        } else {
            this._grid.disable();
        }
        return this;
    },
    enable: function enable() {
        this.removeClassName("flagrate-disabled");
        if (this.isPulldown) {
            this._pulldown.enable();
        } else {
            this._grid.enable();
        }
        return this;
    },
    isEnabled: function isEnabled() {
        return !this.hasClassName("flagrate-disabled");
    },
    getValue: function getValue() {
        if (this.selectedIndex > -1) {
            return this.items[this.selectedIndex].value;
        } else {
            return void 0;
        }
    },
    getValues: function getValues() {
        var result = [];
        for (var i = 0, l = this.selectedIndexes.length; i < l; i++) {
            result.push(this.items[this.selectedIndexes[i]].value);
        }
        return result;
    }
};



},{"./element":8,"./grid":10,"./pulldown":16,"./util":29}],21:[function(require,module,exports){
/*
   Copyright 2016 Webnium

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.Slider = undefined;
exports.createSlider = createSlider;

var _util = require("./util");

var _progress = require("./progress");

var progress = _interopRequireWildcard(_progress);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

/*?
    flagrate.createSlider(option)
    new flagrate.Slider(option)
    - option (Object) - options.
**/
function FSlider() {
    var opt = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    //create
    var slider = new progress.Progress(opt);
    (0, _util.extendObject)(slider, this);
    slider.addClassName("flagrate-slider");
    if (slider.tabIndex === -1) {
        slider.tabIndex = 0;
    }
    if (window.ontouchstart !== undefined) {
        slider.addEventListener("touchstart", slider._onTouchStartHandler.bind(slider));
    }
    if (navigator.pointerEnabled) {
        slider.addEventListener("pointerdown", slider._onPointerDownHandler.bind(slider));
    } else if (navigator.msPointerEnabled) {
        // deprecated on IE11
        slider.addEventListener("MSPointerDown", slider._onPointerDownHandler.bind(slider));
    } else {
        slider.addEventListener("mousedown", slider._onPointerDownHandler.bind(slider));
    }
    if (opt.isDisabled) {
        slider.disable();
    }
    return slider;
}
var Slider = exports.Slider = FSlider;
function createSlider(option) {
    return new Slider(option);
}
Slider.prototype = {
    disable: function disable() {
        var slider = this;
        slider.dataset["flagrateTabIndex"] = slider.tabIndex.toString(10);
        slider.removeAttribute("tabindex");
        return slider.addClassName("flagrate-disabled");
    },
    enable: function enable() {
        var slider = this;
        var tabIndex = parseInt(slider.dataset["flagrateTabIndex"]);
        if (tabIndex !== -1) {
            slider.tabIndex = tabIndex;
        }
        return slider.removeClassName("flagrate-disabled");
    },
    isEnabled: function isEnabled() {
        return !this.hasClassName("flagrate-disabled");
    },
    _onTouchStartHandler: function _onTouchStartHandler(e) {
        if (!this.isEnabled()) {
            return;
        }
        e.preventDefault();
        this._slide(e.touches[0].pageX - this.cumulativeOffset().left, e.touches[0].clientX, "touch");
    },
    _onPointerDownHandler: function _onPointerDownHandler(e) {
        if (!this.isEnabled()) {
            return;
        }
        e.preventDefault();
        this._slide(e.offsetX || e.layerX, e.clientX, "pointer");
    },
    _slide: function _slide(x, pos, type) {
        var slider = this;
        var unitWidth = slider.getWidth() / slider.getMax();
        var onMove = function onMove(e) {
            e.preventDefault();
            if (e.touches && e.touches[0]) {
                x = x + e.touches[0].clientX - pos;
                pos = e.touches[0].clientX;
            } else {
                x = x + e.clientX - pos;
                pos = e.clientX;
            }
            slider.setValue(Math.round(x / unitWidth));
            slider.fire("slide", { targetSlider: slider });
        };
        var onUp = function onUp(e) {
            e.preventDefault();
            if (type === "pointer") {
                if (navigator.pointerEnabled) {
                    document.removeEventListener("pointermove", onMove);
                    document.removeEventListener("pointerup", onUp);
                } else if (navigator.msPointerEnabled) {
                    document.removeEventListener("MSPointerUp", onUp);
                    document.removeEventListener("MSPointerMove", onMove);
                } else {
                    document.removeEventListener("mousemove", onMove);
                    document.removeEventListener("mouseup", onUp);
                }
            } else if (type === "touch") {
                document.removeEventListener("touchmove", onMove);
                document.removeEventListener("touchend", onUp);
                document.removeEventListener("touchcancel", onUp);
            }
            if (e.clientX) {
                x = x + e.clientX - pos;
                slider.setValue(Math.round(x / unitWidth));
                slider.fire("slide", { targetSlider: slider });
            } else if (e.touches && e.touches[0]) {
                x = x + e.touches[0].clientX - pos;
                slider.setValue(Math.round(x / unitWidth));
                slider.fire("slide", { targetSlider: slider });
            }
        };
        if (type === "pointer") {
            if (navigator.pointerEnabled) {
                document.addEventListener("pointermove", onMove);
                document.addEventListener("pointerup", onUp);
            } else if (navigator.msPointerEnabled) {
                document.addEventListener("MSPointerMove", onMove);
                document.addEventListener("MSPointerUp", onUp);
            } else {
                document.addEventListener("mousemove", onMove);
                document.addEventListener("mouseup", onUp);
            }
        } else if (type === "touch") {
            document.addEventListener("touchmove", onMove);
            document.addEventListener("touchend", onUp);
            document.addEventListener("touchcancel", onUp);
        }
        slider.setValue(Math.round(x / unitWidth));
        slider.fire("slide", { targetSlider: slider });
    }
};



},{"./progress":15,"./util":29}],22:[function(require,module,exports){
/*
   Copyright 2016 Webnium

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.Switch = undefined;
exports.createSwitch = createSwitch;

var _util = require("./util");

var _button = require("./button");

/*?
    flagrate.createSwitch(option)
    new flagrate.Switch(option)
    - option (Object) - options.
**/
function FSwitch() {
    var opt = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    //create
    var sw = new _button.Button({
        id: opt.id,
        className: opt.className,
        attribute: opt.attribute,
        style: opt.style,
        isFocused: opt.isFocused,
        isDisabled: opt.isDisabled
    });
    (0, _util.extendObject)(sw, this);
    sw.addEventListener("select", sw.toggleSwitch.bind(sw));
    sw.addClassName("flagrate-switch");
    if (sw.dataset) {
        sw.dataset["flagrateSwitchStatus"] = opt.isOn ? "on" : "off";
    } else {
        sw.writeAttribute("data-flagrate-switch-status", opt.isOn ? "on" : "off");
    }
    return sw;
}
var Switch = exports.Switch = FSwitch;
function createSwitch(option) {
    return new Switch(option);
}
Switch.prototype = {
    isOn: function isOn() {
        if (this.dataset) {
            return this.dataset.flagrateSwitchStatus === "on";
        } else {
            return this.readAttribute("data-flagrate-switch-status") === "on";
        }
    },
    switchOn: function switchOn() {
        if (this.dataset) {
            this.dataset.flagrateSwitchStatus = "on";
        } else {
            this.writeAttribute("data-flagrate-switch-status", "on");
        }
        return this.fire("on", { targetSwitch: this }).fire("change", { targetSwitch: this });
    },
    switchOff: function switchOff() {
        if (this.dataset) {
            this.dataset.flagrateSwitchStatus = "off";
        } else {
            this.writeAttribute("data-flagrate-switch-status", "off");
        }
        return this.fire("off", { targetSwitch: this }).fire("change", { targetSwitch: this });
    },
    toggleSwitch: function toggleSwitch() {
        return this.isOn() ? this.switchOff() : this.switchOn();
    }
};



},{"./button":2,"./util":29}],23:[function(require,module,exports){
/*
   Copyright 2016 Webnium

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.Tab = undefined;
exports.createTab = createTab;

var _util = require("./util");

var _element = require("./element");

var _button = require("./button");

/*?
    flagrate.createTab(option)
    new flagrate.Tab(option)
    - option (Object) - option.

    Create and initialize the tab.

    #### option

    * `id`            (String): `id` attribute of container.
    * `className`     (String):
    * `attribute`     (Object):
    * `style`         (Object): (using flagrate.Element.setStyle)
    * `tabs`          (Array): Array of **tab** object.
    * `selectedIndex` (Number):
    * `fill`          (Boolean; default `false`):
    * `bodyless`      (Boolean; default `false`):
    * `onSelect`      (Function): Triggered whenever select the tab.

    #### tab

    * `key`           (String):
    * `label`         (String):
    * `icon`          (String):
    * `text`          (String):
    * `html`          (String):
    * `element`       (Element):
    * `onSelect`      (Function):
**/
function FTab() {
    var opt = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    var attr = opt.attribute || {};
    attr["id"] = opt.id;
    attr["class"] = "flagrate flagrate-tab";
    if (opt.fill) {
        attr["class"] += " flagrate-tab-fill";
    }
    // create
    var tab = new _element.Element("div", attr);
    (0, _util.extendObject)(tab, this);
    if (opt.className) {
        tab.addClassName(opt.className);
    }
    if (opt.style) {
        tab.setStyle(opt.style);
    }
    tab._tabs = opt.tabs || [];
    tab._bodyless = opt.bodyless || false;
    tab._selectedIndex = opt.selectedIndex || 0;
    tab.onSelect = opt.onSelect || null;
    Object.defineProperties(tab, {
        tabs: {
            enumerable: true,
            get: function get() {
                return tab._tabs;
            },
            set: function set(tabs) {
                tab._tabs = tabs;
                tab._render();
            }
        },
        bodyless: {
            enumerable: true,
            get: function get() {
                return tab._bodyless;
            },
            set: function set(bodyless) {
                tab._bodyless = bodyless;
                tab.update()._create()._render();
            }
        },
        selectedIndex: {
            enumerable: true,
            get: function get() {
                return tab._selectedIndex;
            },
            set: function set(index) {
                tab.select(index);
            }
        }
    });
    tab._create()._render();
    if (tab.tabs.length > 0) {
        tab.select(tab.selectedIndex);
    }
    return tab;
}
var Tab = exports.Tab = FTab;
function createTab(option) {
    return new Tab(option);
}
Tab.prototype = {
    select: function select(a) {
        var tab = this;
        var index = typeof a === "number" ? a : tab.indexOf(a);
        if (index < 0 || index >= tab._tabs.length) {
            return tab;
        }
        if (0 <= tab._selectedIndex && tab._selectedIndex < tab._tabs.length && tab._tabs[tab._selectedIndex]._button) {
            tab._tabs[tab._selectedIndex]._button.removeClassName("flagrate-tab-selected");
        }
        tab._selectedIndex = index;
        var tabItem = tab._tabs[index];
        if (!tabItem || !tabItem._button) {
            return tab;
        }
        tabItem._button.addClassName("flagrate-tab-selected");
        if (tabItem.text) {
            tab._body.updateText(tabItem.text);
        }
        if (tabItem.html) {
            tab._body.update(tabItem.html);
        }
        if (tabItem.element) {
            tab._body.update(tabItem.element);
        }
        var tabEvent = window.event || {};
        tabEvent.targetTab = tab;
        tabEvent.targetTabItem = tabItem;
        if (tabItem.onSelect) {
            tabItem.onSelect.call(tab, tabEvent, tabItem);
        }
        if (tab.onSelect) {
            tab.onSelect(tabEvent, tabItem);
        }
        return tab;
    },
    unshift: function unshift(r) {
        var tab = this;
        if (r instanceof Array) {
            for (var i = 0, l = r.length; i < l; i++) {
                tab._tabs.unshift(r);
            }
        } else {
            tab._tabs.unshift(r);
        }
        tab._render();
        return tab._tabs.length;
    },
    push: function push(r) {
        var tab = this;
        if (r instanceof Array) {
            for (var i = 0, l = r.length; i < l; i++) {
                tab._tabs.push(r);
            }
        } else {
            tab._tabs.push(r);
        }
        tab._render();
        return tab._tabs.length;
    },
    shift: function shift(c) {
        var tab = this;
        var count = c || 1;
        var removes = [];
        for (var i = 0, l = tab._tabs.length; i < l && i < count; i++) {
            removes.push(tab._tabs.shift());
        }
        tab._render();
        return !c ? removes[0] : removes;
    },
    pop: function pop(c) {
        var tab = this;
        var count = c || 1;
        var removes = [];
        for (var i = 0, l = tab._tabs.length; i < l && i < count; i++) {
            removes.push(tab._tabs.pop());
        }
        tab._render();
        return !c ? removes[0] : removes;
    },
    splice: function splice(index, c, t) {
        var tab = this;
        c = typeof c === "undefined" ? this._tabs.length - index : c;
        var removes = tab._tabs.splice(index, c);
        if (t) {
            if (t instanceof Array === false) {
                t = [t];
            }
            for (var i = 0, l = t.length; i < l; i++) {
                tab._tabs.splice(index + i, 0, t[i]);
            }
        }
        tab._render();
        return removes;
    },
    removeTab: function removeTab(a) {
        var tab = this;
        var removes = [];
        var bulk = true;
        if (a instanceof Array === false) {
            bulk = false;
            a = [a];
        }
        for (var i = 0, l = a.length; i < l; i++) {
            var index = typeof a[i] === "number" ? a[i] : tab.indexOf(a[i]);
            if (index !== -1) {
                removes.push(tab.splice(index, 1));
            }
        }
        return bulk ? removes : removes[0];
    },
    indexOf: function indexOf(a) {
        var tab = this;
        if (typeof a === "string") {
            var index = -1;
            for (var i = 0, l = tab._tabs.length; i < l; i++) {
                if (tab._tabs[i].key === a) {
                    index = i;
                    break;
                }
            }
            return index;
        } else {
            return tab._tabs.indexOf(a);
        }
    },
    _create: function _create() {
        var tab = this;
        tab._head = new _element.Element("div", { "class": "flagrate-tab-head" }).insertTo(tab);
        if (tab._bodyless === true) {
            tab._body = new _element.Element();
        } else {
            tab._body = new _element.Element("div", { "class": "flagrate-tab-body" }).insertTo(tab);
        }
        return tab;
    },
    _render: function _render() {
        var tab = this;
        tab._head.update();
        tab._tabs.forEach(function (tabItem) {
            if (!tabItem._button) {
                tabItem._button = new _button.Button({
                    icon: tabItem.icon,
                    label: tabItem.label,
                    onSelect: tab._createOnSelectHandler(tabItem)
                });
            }
            tabItem._button.insertTo(tab._head);
        });
        return tab;
    },
    _createOnSelectHandler: function _createOnSelectHandler(tabItem) {
        var tab = this;
        return function (e) {
            if (/firefox/i.test(navigator.userAgent) === true) {
                window.event = e;
            }
            tab.select(tabItem);
        };
    }
};



},{"./button":2,"./element":8,"./util":29}],24:[function(require,module,exports){
/*
   Copyright 2016 Webnium

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.TextArea = undefined;
exports.createTextArea = createTextArea;

var _util = require("./util");

var _element = require("./element");

/*?
    flagrate.createTextArea(option)
    new flagrate.TextArea(option)
    - option (Object) - options.

    TextArea.

    #### option

    * `id`                       (String): `id` attribute of `textarea` element.
    * `className`                (String):
    * `attribute`                (Object):
    * `style`                    (Object): (using flagrate.Element.setStyle)
    * `value`                    (String):
    * `placeholder`              (String):
    * `icon`                     (String):
    * `regexp`                   (RegExp):
    * `isDisabled`               (Boolean; default `false`):
**/
function FTextArea() {
    var option = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    this.regexp = option.regexp || null;
    var attr = option.attribute || {};
    if (option.id) {
        attr["id"] = option.id;
    }
    if (option.placeholder) {
        attr["placeholder"] = option.placeholder;
    }
    //create
    var textArea = new _element.Element("textarea", attr);
    (0, _util.extendObject)(textArea, this);
    textArea.addClassName("flagrate flagrate-textarea");
    if (option.className) {
        textArea.addClassName(option.className);
    }
    if (option.style) {
        textArea.setStyle(option.style);
    }
    if (option.icon) {
        textArea.setIcon(option.icon);
    }
    if (option.value) {
        textArea.setValue(option.value);
    }
    if (option.isDisabled) {
        textArea.disable();
    }
    return textArea;
}
var TextArea = exports.TextArea = FTextArea;
function createTextArea(option) {
    return new TextArea(option);
}
TextArea.prototype = {
    disable: function disable() {
        this.addClassName("flagrate-disabled");
        this.writeAttribute("disabled", true);
        return this;
    },
    enable: function enable() {
        this.removeClassName("flagrate-disabled");
        this.writeAttribute("disabled", false);
        return this;
    },
    isEnabled: function isEnabled() {
        return !this.hasClassName("flagrate-disabled");
    },
    setValue: function setValue(value) {
        this.value = value;
        return this;
    },
    getValue: function getValue() {
        return this.value;
    },
    setIcon: function setIcon(identifier) {
        this._iconIdentifier = identifier;
        if (identifier) {
            return this.addClassName("flagrate-icon").setStyle({
                backgroundImage: "url(" + identifier + ")"
            });
        } else {
            return this.removeClassName("flagrate-icon").setStyle({
                backgroundImage: "none"
            });
        }
    },
    getIcon: function getIcon() {
        return this._iconIdentifier || "";
    },

    isValid: function isValid() {
        return this.regexp.test(this.getValue());
    }
};



},{"./element":8,"./util":29}],25:[function(require,module,exports){
/*
   Copyright 2016 Webnium

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.TextInput = undefined;
exports.createTextInput = createTextInput;

var _util = require("./util");

var _element = require("./element");

/*?
    flagrate.createTextInput(option)
    new flagrate.TextInput(option)
    - option (Object) - options.

    TextInput.

    #### option

    * `id`                       (String): `id` attribute of `input` element.
    * `className`                (String):
    * `attribute`                (Object):
    * `style`                    (Object): (using flagrate.Element.setStyle)
    * `value`                    (String):
    * `placeholder`              (String):
    * `icon`                     (String):
    * `regexp`                   (RegExp):
    * `isDisabled`               (Boolean; default `false`):
**/
function FTextInput() {
    var option = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    this.regexp = option.regexp || null;
    var attr = option.attribute || {};
    if (option.id) {
        attr["id"] = option.id;
    }
    if (option.value) {
        attr["value"] = option.value;
    }
    if (option.placeholder) {
        attr["placeholder"] = option.placeholder;
    }
    //create
    var input = new _element.Element("input", attr);
    (0, _util.extendObject)(input, this);
    input.addClassName("flagrate flagrate-textinput");
    if (option.className) {
        input.addClassName(option.className);
    }
    if (option.style) {
        input.setStyle(option.style);
    }
    if (option.icon) {
        input.setIcon(option.icon);
    }
    if (option.isDisabled) {
        input.disable();
    }
    return input;
}
var TextInput = exports.TextInput = FTextInput;
function createTextInput(option) {
    return new TextInput(option);
}
TextInput.prototype = {
    disable: function disable() {
        this.addClassName("flagrate-disabled");
        this.writeAttribute("disabled", true);
        return this;
    },
    enable: function enable() {
        this.removeClassName("flagrate-disabled");
        this.writeAttribute("disabled", false);
        return this;
    },
    isEnabled: function isEnabled() {
        return !this.hasClassName("flagrate-disabled");
    },
    setValue: function setValue(value) {
        this.value = value;
        return this;
    },
    getValue: function getValue() {
        return this.value;
    },
    setIcon: function setIcon(identifier) {
        this._iconIdentifier = identifier;
        if (identifier) {
            return this.addClassName("flagrate-icon").setStyle({
                backgroundImage: "url(" + identifier + ")"
            });
        } else {
            return this.removeClassName("flagrate-icon").setStyle({
                backgroundImage: "none"
            });
        }
    },
    getIcon: function getIcon() {
        return this._iconIdentifier || "";
    },

    isValid: function isValid() {
        return this.regexp.test(this.getValue());
    }
};



},{"./element":8,"./util":29}],26:[function(require,module,exports){
/*
   Copyright 2016 Webnium

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.Tokenizer = undefined;
exports.createTokenizer = createTokenizer;

var _util = require("./util");

var _element = require("./element");

var _button = require("./button");

var _menu = require("./menu");

var _textInput = require("./text-input");

/*?
    flagrate.createTextInput(option)
    new flagrate.TextInput(option)
    - option (Object) - options.

    TextInput.

    #### option

    * `id`                       (String): `id` attribute of `input` element.
    * `className`                (String):
    * `attribute`                (Object):
    * `style`                    (Object): (using flagrate.Element.setStyle)
    * `value`                    (String):
    * `placeholder`              (String):
    * `icon`                     (String):
    * `regexp`                   (RegExp):
    * `isDisabled`               (Boolean; default `false`):
**/
function FTokenizer() {
    var option = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    this.values = option.values || [];
    this.max = option.max || -1;
    this.tokenize = option.tokenize || option.tokenizeSync || _util.identity;
    if (option.onChange) {
        this.onChange = option.onChange;
    }
    var attr = option.attribute || {};
    if (option.id) {
        attr["id"] = option.id;
    }
    //create
    var tokenizer = new _element.Element("div", attr);
    (0, _util.extendObject)(tokenizer, this);
    tokenizer.addClassName("flagrate flagrate-tokenizer");
    if (option.className) {
        tokenizer.addClassName(option.className);
    }
    tokenizer._tokens = new _element.Element("span").insertTo(tokenizer);
    tokenizer._input = new _textInput.TextInput({ placeholder: option.placeholder }).insertTo(tokenizer);
    if (tokenizer.values.length !== 0) {
        tokenizer._updateTokens();
    }
    tokenizer.addEventListener("click", tokenizer._onClickHandler.bind(tokenizer));
    tokenizer._input.addEventListener("keydown", tokenizer._onKeydownHandler.bind(tokenizer));
    tokenizer._input.addEventListener("focus", tokenizer._onFocusHandler.bind(tokenizer));
    tokenizer._input.addEventListener("blur", tokenizer._onBlurHandler.bind(tokenizer));
    if (option.style) {
        tokenizer.setStyle(option.style);
    }
    if (option.icon) {
        tokenizer.setIcon(option.icon);
    }
    if (option.isDisabled) {
        tokenizer.disable();
    }
    return tokenizer;
}
var Tokenizer = exports.Tokenizer = FTokenizer;
function createTokenizer(option) {
    return new Tokenizer(option);
}
Tokenizer.prototype = {
    disable: function disable() {
        this.addClassName("flagrate-disabled");
        this._input.disable();
        return this._updateTokens();
    },
    enable: function enable() {
        this.removeClassName("flagrate-disabled");
        this._input.enable();
        return this._updateTokens();
    },
    isEnabled: function isEnabled() {
        return !this.hasClassName("flagrate-disabled");
    },
    setValues: function setValues(values) {
        this.values = values;
        return this._updateTokens();
    },
    getValues: function getValues() {
        return this.values;
    },
    removeValues: function removeValues() {
        this.values = [];
        return this._updateTokens();
    },
    removeValue: function removeValue(value) {
        this.values.splice(this.values.indexOf(value), 1);
        return this._updateTokens();
    },
    setIcon: function setIcon(identifier) {
        this._iconIdentifier = identifier;
        if (identifier) {
            this.addClassName("flagrate-icon").setStyle({
                backgroundImage: "url(" + identifier + ")"
            });
        } else {
            this.removeClassName("flagrate-icon").setStyle({
                backgroundImage: "none"
            });
        }
        return this._updateTokens();
    },
    getIcon: function getIcon() {
        return this._iconIdentifier || "";
    },
    focus: function focus() {
        this._input.focus();
    },
    _updateTokens: function _updateTokens() {
        var tokenizer = this;
        tokenizer._tokens.update();
        tokenizer.values.forEach(function (value) {
            var label = void 0;
            if (typeof value === "string") {
                label = value;
            } else {
                label = value.label;
            }
            new _button.Button({
                isDisabled: tokenizer.isEnabled() === false,
                isRemovableByUser: tokenizer.isEnabled(),
                onRemove: function onRemove() {
                    return tokenizer.removeValue(value);
                },
                label: label
            }).insertTo(tokenizer._tokens);
        });
        var vw = tokenizer.getWidth();
        var bw = tokenizer.getStyle("border-width") === null ? 2 : parseInt(tokenizer.getStyle("border-width").replace("px", ""), 10);
        var pl = tokenizer.getStyle("padding-left") === null ? 4 : parseInt(tokenizer.getStyle("padding-left").replace("px", ""), 10);
        var pr = tokenizer.getStyle("padding-right") === null ? 4 : parseInt(tokenizer.getStyle("padding-right").replace("px", ""), 10);
        var tw = tokenizer._tokens.getWidth();
        var tm = tokenizer._tokens.getStyle("margin-left") === null ? 2 : parseInt(tokenizer._tokens.getStyle("margin-left").replace("px", ""), 10);
        var im = tokenizer._input.getStyle("margin-left") === null ? 2 : parseInt(tokenizer._input.getStyle("margin-left").replace("px", ""), 10);
        var ip = tokenizer._input.getStyle("padding-left") === null ? 2 : parseInt(tokenizer._input.getStyle("padding-left").replace("px", ""), 10);
        var aw = vw - pl - pr - tw - tm - im - ip - bw * 2 - 2;
        if (aw > 30) {
            tokenizer._input.style.width = aw + "px";
        } else if (aw < -5) {
            tokenizer._input.style.width = "";
        } else {
            tokenizer._input.style.width = "100%";
        }
        tokenizer.fire("change");
        return this;
    },
    _tokenize: function _tokenize() {
        this._candidates = [];
        var str = this._input.value;
        var result = this.tokenize(str, this._tokenized.bind(this));
        if (result !== void 0) {
            this._tokenized(result);
        }
        this._lastTokenizedValue = this._input.value;
        return this;
    },
    _tokenized: function _tokenized(candidates) {
        if (candidates instanceof Array === false) {
            candidates = [candidates];
        }
        this._candidates = [];
        var menu = new _menu.Menu({
            onSelect: function onSelect() {
                return menu.remove();
            }
        });
        menu.style.left = this._input.offsetLeft + "px";
        for (var i = 0, l = candidates.length, candidate, menuItem; i < l; i++) {
            candidate = candidates[i];
            if (typeof candidate === "string") {
                if (candidate === "") {
                    continue;
                }
                menuItem = { label: candidate };
            } else {
                menuItem = candidate;
            }
            if (menuItem.onSelect) {
                menuItem._onSelect = menuItem.onSelect;
            }
            menuItem.onSelect = _createMenuOnSelectHandler(this, candidate);
            this._candidates.push(candidate);
            menu.push(menuItem);
        }
        if (this._menu) {
            this._menu.remove();
        }
        if (this._candidates.length !== 0) {
            this.insert({ top: menu });
            this._menu = menu;
        }
        return this;
    },
    _onClickHandler: function _onClickHandler() {
        this.focus();
    },
    _onKeydownHandler: function _onKeydownHandler(e) {
        var _this = this;

        // ENTER:13
        if (e.keyCode === 13 && this._lastTokenizedValue !== this._input.value) {
            e.stopPropagation();
            e.preventDefault();
            this._lastTokenizedValue = this._input.value;
            this._tokenize();
            return;
        }
        if (this._candidates && this._candidates.length !== 0) {
            if (
            // ENTER:13
            e.keyCode === 13 ||
            // right:39
            e.keyCode === 39) {
                e.stopPropagation();
                e.preventDefault();
                this._input.value = "";
                if (this.max < 0 || this.max > this.values.length) {
                    this.values.push(this._candidates[0]);
                }
                this._updateTokens();
                if (this.onChange) {
                    this.onChange();
                }
                if (this._menu) {
                    this._menu.remove();
                }
            }
        }
        if (this._input.value === "" && this.values.length !== 0) {
            if (
            // BS:8
            e.keyCode === 8) {
                e.stopPropagation();
                e.preventDefault();
                var value = this.values.pop();
                this._input.value = typeof value === "string" ? value : typeof value.value === "string" ? value.value : "";
                this._updateTokens();
                if (this.onChange) {
                    this.onChange();
                }
                if (this._menu) {
                    this._menu.remove();
                }
            }
        }
        setTimeout(function () {
            if (_this.max > -1 && _this.max <= _this.values.length && _this._input.value !== "") {
                e.stopPropagation();
                _this._input.value = "";
                return;
            }
            _this._tokenize();
        }, 0);
    },
    _onFocusHandler: function _onFocusHandler() {
        this._updateTokens();
        this._tokenize();
        this.addClassName("flagrate-tokenizer-focus");
    },
    _onBlurHandler: function _onBlurHandler() {
        var _this2 = this;

        this._input.value = "";
        if (this._menu) {
            this._menu.style.opacity = "0";
            setTimeout(function () {
                return _this2._menu.remove();
            }, 500);
        }
        this.removeClassName("flagrate-tokenizer-focus");
    }
};
function _createMenuOnSelectHandler(tokenizer, candidate) {
    return function (e) {
        if (tokenizer.max < 0 || tokenizer.max > tokenizer.values.length) {
            tokenizer.values.push(candidate);
        }
        tokenizer._updateTokens();
        if (tokenizer.onChange) {
            tokenizer.onChange(e, this);
        }
    };
}



},{"./button":2,"./element":8,"./menu":11,"./text-input":25,"./util":29}],27:[function(require,module,exports){
/*
   Copyright 2016 Webnium

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.Toolbar = undefined;
exports.createToolbar = createToolbar;

var _util = require("./util");

var _element = require("./element");

/*?
    flagrate.createToolbar(option)
    new flagrate.Toolbar(option)
    - option (Object) - options.

    Toolbar.

    #### option

    * `id`                       (String): `id` attribute of container element.
    * `className`                (String):
    * `attribute`                (Object):
    * `style`                    (Object): (using flagrate.Element.setStyle)
    * `items`                    (Array): of item or String to create border, Element to insert any element.

    #### item

    * `key`                      (String):
    * `element`                  (Element):
**/
function FToolbar() {
    var option = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    var items = option.items || [];
    var attr = option.attribute || {};
    if (option.id) {
        attr["id"] = option.id;
    }
    //create
    var container = new _element.Element("div", attr);
    (0, _util.extendObject)(container, this);
    container.addClassName("flagrate flagrate-toolbar");
    if (option.className) {
        container.addClassName(option.className);
    }
    if (option.style) {
        container.setStyle(option.style);
    }
    for (var i = 0, l = items.length; i < l; i++) {
        container.push(items[i]);
    }
    return container;
}
var Toolbar = exports.Toolbar = FToolbar;
function createToolbar(option) {
    return new Toolbar(option);
}
Toolbar.prototype = {
    push: function push(option) {
        if (typeof option === "string") {
            new _element.Element("hr").insertTo(this);
        } else if (option instanceof HTMLElement) {
            this.insert(option);
        } else {
            var element = void 0;
            if (option.isBorder) {
                element = new _element.Element("hr").insertTo(this);
            } else {
                if (!option.element.isFlagrated) {
                    option.element = _element.Element.extend(option.element);
                }
                element = _element.Element.insertTo(option.element, this);
            }
            if (option.key) {
                element.dataset["_key"] = option.key;
            }
        }
        return this;
    },
    getElementByKey: function getElementByKey(key) {
        var elements = this.childNodes;
        for (var i = 0, l = elements.length; i < l; i++) {
            if (elements[i].dataset["_key"] === key) {
                return elements[i];
            }
        }
        return null;
    },
    getElements: function getElements() {
        return this.childNodes || [];
    }
};



},{"./element":8,"./util":29}],28:[function(require,module,exports){
/*
   Copyright 2016 Webnium

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.Tutorial = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

exports.createTutorial = createTutorial;

var _util = require("./util");

var _element = require("./element");

var _button = require("./button");

var _popover = require("./popover");

var _modal = require("./modal");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/*?
    flagrate.createTutorial(option)
    new flagrate.Tutorial(option)
    - option (Object) - options.

    Creates new tutorial.

    #### option

    * `steps`              (Array; required): Array of **step** object.
    * `count`              (Number; default `0`): current count of step.
    * `onFinish`           (Function): callback when finish.
    * `onAbort`            (Function): callback when abort.
    * `onClose`            (Function): callback when close.

    #### step

    * `target`             (Element|String): Element to target. If target is undefined or not found, will creates flagrate.Modal.
    * `title`              (String): Title for this step.
    * `text`               (String): Descriptive text for this step.
    * `html`               (String): Descriptive html for this step.
    * `onStep`             (Function): Triggered whenever a step is started.
    * `onBeforeStep`       (Function): Triggered at before starting of this step.
    * `onAfterStep`        (Function): Triggered at after of this step.

    ##### onBeforeStep / onAfterStep

        // async callback
        function (done) {// if expects callback, will waits for it.
            setTimeout(done, 1000);
        }

        // sync
        function () {
            // ...
        }
**/
var Tutorial = exports.Tutorial = function () {
    function Tutorial() {
        var opt = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

        _classCallCheck(this, Tutorial);

        this.onFinish = _util.emptyFunction;
        this.onAbort = _util.emptyFunction;
        this.onClose = _util.emptyFunction;
        this._steps = [];
        this._index = 0;
        if (opt.steps) {
            this._steps = opt.steps;
        }
        if (opt.index) {
            this._index = opt.index;
        }
        if (opt.onFinish) {
            this.onFinish = opt.onFinish;
        }
        if (opt.onAbort) {
            this.onAbort = opt.onAbort;
        }
        if (opt.onClose) {
            this.onClose = opt.onClose;
        }
    }

    _createClass(Tutorial, [{
        key: "visible",
        value: function visible() {
            return !!this._popover || !!this._modal || !!this._inStep;
        }
    }, {
        key: "open",
        value: function open() {
            if (this.visible() === false) {
                this._main();
            }
            return this;
        }
    }, {
        key: "close",
        value: function close() {
            if (this.visible() === true) {
                this._afterStep(this.onClose.bind(this));
            }
            return this;
        }
    }, {
        key: "abort",
        value: function abort() {
            if (this.visible() === true) {
                this._afterStep(this.onAbort.bind(this));
            }
            return this;
        }
    }, {
        key: "finish",
        value: function finish() {
            this._afterStep(this.onFinish.bind(this));
            this._index = 0;
            return this;
        }
    }, {
        key: "prev",
        value: function prev() {
            var _this = this;

            this._afterStep(function () {
                if (_this._index > 0) {
                    --_this._index;
                }
                _this._main();
            });
            return this;
        }
    }, {
        key: "next",
        value: function next() {
            var _this2 = this;

            this._afterStep(function () {
                if (_this2._index + 1 < _this2._steps.length) {
                    ++_this2._index;
                }
                _this2._main();
            });
            return this;
        }
    }, {
        key: "_main",
        value: function _main() {
            this._inStep = true;
            var step = this._steps[this._index];
            if (step.onBeforeStep) {
                if (step.onBeforeStep.length) {
                    step.onBeforeStep.call(this, this._step.bind(this));
                    return this;
                } else {
                    step.onBeforeStep.call(this);
                }
            }
            this._step();
            return this;
        }
    }, {
        key: "_step",
        value: function _step() {
            var _this3 = this;

            var step = this._steps[this._index];
            var buttons = [];
            if (this._index + 1 >= this._steps.length) {
                buttons.push({
                    className: "flagrate-tutorial-button-finish",
                    onSelect: function onSelect() {
                        _this3._afterStep(_this3.finish.bind(_this3));
                    }
                });
            } else {
                buttons.push({
                    className: "flagrate-tutorial-button-next",
                    onSelect: function onSelect() {
                        _this3._afterStep(_this3.next.bind(_this3));
                    }
                });
            }
            if (this._index > 0) {
                buttons.push({
                    className: "flagrate-tutorial-button-prev",
                    onSelect: function onSelect() {
                        _this3._afterStep(_this3.prev.bind(_this3));
                    }
                });
            }
            if (this._index + 1 < this._steps.length) {
                buttons.push({
                    className: "flagrate-tutorial-button-abort",
                    onSelect: function onSelect() {
                        _this3._afterStep(_this3.abort.bind(_this3));
                    }
                });
            }
            buttons[0].color = "@primary";
            var target = void 0;
            if (typeof step.target === "string") {
                target = document.querySelector(step.target);
            } else if (_element.Element.isElement(step.target) === true) {
                target = step.target;
            }
            if (target) {
                var container = new _element.Element();
                var body = new _element.Element();
                if (step.html) {
                    body.insert(step.html).insertTo(container);
                }
                if (step.text) {
                    body.insertText(step.text).insertTo(container);
                }
                var buttonContainer = new _element.Element("footer").insertTo(container);
                buttons.forEach(function (button) {
                    new _button.Button(button).insertTo(buttonContainer);
                });
                this._popover = new _popover.Popover({
                    className: "flagrate-tutorial",
                    element: container
                });
                this._popover.open(target);
            } else {
                this._modal = new _modal.Modal({
                    disableCloseByMask: true,
                    disableCloseButton: true,
                    disableCloseByEsc: true,
                    className: "flagrate-tutorial",
                    title: step.title,
                    text: step.text,
                    html: step.html,
                    buttons: buttons
                });
                this._modal.open();
            }
            if (step.onStep) {
                step.onStep.call(this);
            }
            return this;
        }
    }, {
        key: "_afterStep",
        value: function _afterStep(done) {
            this._inStep = false;
            var pp = false;
            if (this._popover) {
                pp = true;
                this._popover.remove();
                delete this._popover;
            }
            if (this._modal) {
                pp = true;
                this._modal.close();
                delete this._modal;
            }
            if (pp === true) {
                var step = this._steps[this._index];
                if (step.onAfterStep) {
                    if (step.onAfterStep.length) {
                        step.onAfterStep.call(this, done);
                        return this;
                    } else {
                        step.onAfterStep.call(this);
                    }
                }
            }
            done();
            return this;
        }
    }]);

    return Tutorial;
}();

function createTutorial(option) {
    return new Tutorial(option);
}



},{"./button":2,"./element":8,"./modal":12,"./popover":14,"./util":29}],29:[function(require,module,exports){
/*
   Copyright 2016 Webnium

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
"use strict";
/**
 * Identity.
 */

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

exports.identity = identity;
exports.extendObject = extendObject;
exports.emptyFunction = emptyFunction;
function identity(a) {
    return a;
}
/**
 * Extend Object.
 */
function extendObject(dest, source) {
    var k = void 0;
    for (k in source) {
        dest[k] = source[k];
    }
    return dest;
}
function emptyFunction() {}
/*?
    Flagrate#jsonPointer

    ref: node-jsonpointer https://github.com/janl/node-jsonpointer
    ref: http://tools.ietf.org/html/draft-ietf-appsawg-json-pointer-08
**/
/**
 * JSON Pointer Implementation.
 */
var jsonPointer = exports.jsonPointer = undefined;
(function (jsonPointer) {
    function get(object, pointer) {
        var pts = validate_input(object, pointer);
        if (pts.length === 0) {
            return object;
        }
        return traverse(object, pts);
    }
    jsonPointer.get = get;
    function set(object, pointer, value) {
        if (pointer === "" && (typeof value === "undefined" ? "undefined" : _typeof(value)) === "object") {
            extendObject(object, value);
            return value;
        } else {
            var pts = validate_input(object, pointer);
            if (pts.length === 0) {
                throw new Error("Invalid JSON pointer for set.");
            }
            return traverse(object, pts, value, true);
        }
    }
    jsonPointer.set = set;
    function untilde(str) {
        return str.replace(/~[01]/g, function (m) {
            switch (m) {
                case "~0":
                    return "~";
                case "~1":
                    return "/";
            }
            throw new Error("Invalid tilde escape: " + m);
        });
    }
    function traverse(object, pts, value, isSet) {
        var part = untilde(pts.shift());
        if (/^\d+$/.test(part)) {
            part = parseInt(part, 10);
        }
        if (pts.length !== 0) {
            if (isSet && _typeof(object[part]) !== "object") {
                if (value === void 0) {
                    return value;
                }
                if (/^\d+$/.test(pts[0])) {
                    object[part] = [];
                } else {
                    object[part] = {};
                }
            }
            return traverse(object[part], pts, value, isSet);
        }
        // we're done
        if (!isSet) {
            // just reading
            return object[part];
        }
        // set new value, and return
        if (value === void 0) {
            delete object[part];
        } else {
            object[part] = value;
        }
        return value;
    }
    function validate_input(object, pointer) {
        if ((typeof object === "undefined" ? "undefined" : _typeof(object)) !== "object") {
            throw new Error("Invalid input object.");
        }
        if (pointer === "") {
            return [];
        }
        if (!pointer) {
            throw new Error("Invalid JSON pointer.");
        }
        var pts = pointer.split("/");
        if (pts.shift() !== "") {
            throw new Error("Invalid JSON pointer.");
        }
        return pts;
    }
})(jsonPointer || (exports.jsonPointer = jsonPointer = {}));



},{}]},{},[1])
//# sourceMappingURL=flagrate.js.map
