{"version":3,"sources":["Position.ts"],"names":[],"mappings":"AAAA;;EAEE;AACF,YAAY,CAAC;AAEb,OAAO,EAAE,OAAO,EAAE,MAAM,kBAAkB,CAAC;AAW3C,MAAM;IAOF,YAAY,QAAsB;QAC9B,IAAI,CAAC,IAAI,GAAG,QAAQ,CAAC,IAAI,CAAC;QAC1B,IAAI,CAAC,KAAK,GAAG,IAAI,OAAO,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;QACzC,IAAI,CAAC,IAAI,GAAG,IAAI,OAAO,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;QACvC,IAAI,CAAC,IAAI,GAAG,QAAQ,CAAC,IAAI,CAAC;QAC1B,IAAI,CAAC,SAAS,GAAG,IAAI,OAAO,CAAC,QAAQ,CAAC,IAAI,KAAK,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IACjE,CAAC;IAED,aAAa,CAAC,KAAa;QACvB,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,QAAQ,EAAE,CAAC;IACjF,CAAC;IAED,KAAK,CAAC,QAAkB;QAEpB,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;YACrC,MAAM,IAAI,KAAK,CAAC,0CAA0C,CAAC,CAAC;QAChE,CAAC;QAED,EAAE,CAAC,CAAC,IAAI,CAAC,IAAI,IAAI,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;YAC7B,MAAM;YACN,MAAM,IAAI,KAAK,CAAC,kCAAkC,CAAC,CAAC;QACxD,CAAC;QAEK,IAAK,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;IACrD,CAAC;CACJ","file":"Position.js","sourcesContent":["/*!\n    Copyright 2017 Kuromatch\n*/\n\"use strict\";\n\nimport { Decimal } from \"decimal.js-light\";\n\nexport type Side = \"L\" | \"S\";\n\nexport interface PositionLike {\n    time: number;\n    price: number | string;\n    size: number | string;\n    side: Side;\n}\n\nexport class Position {\n    readonly time: number;\n    readonly price: Decimal;\n    readonly size: Decimal;\n    readonly side: Side;\n    private _sideSign: Decimal;\n\n    constructor(position: PositionLike) {\n        this.time = position.time;\n        this.price = new Decimal(position.price);\n        this.size = new Decimal(position.size);\n        this.side = position.side;\n        this._sideSign = new Decimal(position.side === \"S\" ? 1 : -1);\n    }\n\n    marginAgainst(price: number) {\n        return this.price.minus(price).mul(this.size).mul(this._sideSign).toNumber();\n    }\n\n    merge(position: Position) {\n        \n        if (!this.price.equals(position.price)) {\n            throw new Error(\"Can not merge different price positions.\");\n        }\n\n        if (this.side != position.side) {\n            // 両建て\n            throw new Error(\"Double options is not supported.\");\n        }\n\n        (<any>this).size = this.size.plus(position.size);\n    }\n}\n"]}