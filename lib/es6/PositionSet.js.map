{"version":3,"sources":["PositionSet.ts"],"names":[],"mappings":"AAAA;;EAEE;AACF,YAAY,CAAC;AAEb,OAAO,EAAE,QAAQ,EAAgB,MAAM,YAAY,CAAC;AACpD,OAAO,EAAE,OAAO,EAAE,MAAM,kBAAkB,CAAC;AAE3C,MAAM;IAKF,YAAY,SAA0B;QAJ9B,cAAS,GAAqC,EAAE,CAAC;QACjD,UAAK,GAAG,IAAI,OAAO,CAAC,CAAC,CAAC,CAAC;QACvB,YAAO,GAAG,CAAC,CAAC;QAGhB,EAAE,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC;YACZ,SAAS,CAAC,OAAO,CAAC,QAAQ,CAAC,EAAE;gBACzB,IAAI,CAAC,GAAG,CAAC,IAAI,QAAQ,CAAC,QAAQ,CAAC,CAAC,CAAC;YACrC,CAAC,CAAC,CAAA;QACN,CAAC;IACL,CAAC;IAED,IAAI,IAAI;QACJ,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC;IACjC,CAAC;IAED,GAAG,CAAC,QAAkB;QAElB,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;QAE5C,MAAM,GAAG,GAAG,QAAQ,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC;QACtC,MAAM,OAAO,GAAG,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC;QAEpC,EAAE,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC;YACV,OAAO,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;YACxB,MAAM,CAAC;QACX,CAAC;QAED,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,GAAG,QAAQ,CAAC;QAC/B,IAAI,CAAC,OAAO,EAAE,CAAC;IACnB,CAAC;IAED,OAAO,CAAC,UAAU;QACd,MAAM,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC;QACjC,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE,CAAC,UAAU,CAAC,SAAS,CAAC,GAAG,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC;IAC3E,CAAC;IAED,aAAa,CAAC,KAAa;QAEvB,IAAI,MAAM,GAAG,CAAC,CAAC;QACf,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE;YACf,MAAM,IAAI,GAAG,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;QACvC,CAAC,CAAC,CAAC;QAEH,MAAM,CAAC,MAAM,CAAC;IAClB,CAAC;IAED,OAAO;QACH,MAAM,CAAC,IAAI,CAAC,OAAO,KAAK,CAAC,CAAC;IAC9B,CAAC;CACJ","file":"PositionSet.js","sourcesContent":["/*!\n    Copyright 2017 Kuromatch\n*/\n\"use strict\";\n\nimport { Position, PositionLike } from \"./Position\";\nimport { Decimal } from \"decimal.js-light\";\n\nexport class PositionSet {\n    private positions: { [priceKey: string]: Position } = {};\n    private _size = new Decimal(0);\n    private _length = 0;\n\n    constructor(positions?: PositionLike[]) {\n        if (positions) {\n            positions.forEach(position => {\n                this.add(new Position(position));\n            })\n        }\n    }\n\n    get size() {\n        return this._size.toNumber();\n    }\n\n    add(position: Position) {\n\n        this._size = this._size.plus(position.size);\n\n        const key = position.price.toString();\n        const existed = this.positions[key];\n\n        if (existed) {\n            existed.merge(position);\n            return;\n        }\n\n        this.positions[key] = position;\n        this._length++;\n    }\n\n    forEach(callbackFn) {\n        const positions = this.positions;\n        Object.keys(positions).forEach(key => callbackFn(positions[key], key));\n    }\n\n    marginAgainst(price: number) {\n\n        let margin = 0;\n        this.forEach(pos => {\n            margin += pos.marginAgainst(price);\n        });\n\n        return margin;\n    }\n\n    isEmpty() {\n        return this._length === 0;\n    }\n}\n"]}